--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         31457280 B, 64 B, 30-way associative
Command:          ./glucose_release ./cnfs/eqsparcl10bpwtrc10.cnf
Data file:        eqsparcl10bpwtrc10.cnf.out.cache
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                I1mr      ILmr  Dr              D1mr           DLmr      Dw              D1mw          DLmw      
--------------------------------------------------------------------------------
1,169,885,840,380 3,523,386 8,246 383,335,888,603 18,790,647,048 2,200,615 132,995,421,189 3,709,938,663 3,906,316  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir              I1mr    ILmr Dr              D1mr          DLmr    Dw             D1mw          DLmw     file:function
--------------------------------------------------------------------------------
531,658,582,368   1,985   46 210,047,865,144 9,597,981,672  57,111 59,041,645,265     7,692,426       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/..//core/Solver.cc:Minisat::Solver::propagate_()
213,679,431,160       8    5  30,664,332,484 1,365,638,119  13,448 31,502,093,528             0       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/SolverTypes.h:Minisat::Solver::propagate_()
 98,205,789,282 180,054    9  20,492,630,727 1,249,616,235      93 12,354,853,519 1,822,325,952 323,352  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Vec.h:Minisat::Solver::propagate_()
 71,344,655,093     368  103  19,364,820,938 2,627,615,598       4  7,298,820,456    40,742,193       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/..//core/Solver.cc:Minisat::Solver::simplePropagate()
 47,168,542,334      85   27  11,515,963,085   484,493,702       0              0             0       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/SolverTypes.h:Minisat::Solver::simplePropagate()
 32,179,258,462      50   13   7,854,727,833   364,365,483       0  5,864,436,715   659,483,915  54,475  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Vec.h:Minisat::Solver::simplePropagate()
 27,504,618,316       1    1  27,184,046,008   195,654,756       0    320,572,308             0       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/Solver.h:Minisat::Solver::propagate_()
 13,617,131,507  16,655  113   5,010,265,990   304,256,917      22    908,148,433     6,161,289      20  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/..//core/Solver.cc:Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&, int&)
 11,567,035,794   6,667   50   4,492,117,283   637,486,755       6  1,395,287,327   158,502,176       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/..//core/Solver.cc:Minisat::Solver::cancelUntil(int) [clone .part.108]
 10,836,066,726       0    0   5,418,033,363        18,764       0              0             0       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Alloc.h:Minisat::Solver::propagate_()
 10,705,443,534       8    4   4,604,915,914   190,624,065     136  3,253,243,801   729,149,055   1,714  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/..//core/Solver.cc:Minisat::Solver::uncheckedEnqueue(Minisat::Lit, int, unsigned int)
  8,178,546,824   5,734   30   2,686,261,373    45,350,793       5  1,014,273,534     1,630,630       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/..//core/Solver.cc:Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)
  7,276,980,310   4,355   66   1,738,651,273     1,593,582       0    714,965,694    15,073,231   5,053  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Vec.h:Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&, int&)
  6,484,608,049  35,101   25   2,651,414,630   171,808,148       0  1,776,708,387    16,037,150       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Heap.h:Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int)
  5,994,899,481     225   17   3,001,882,839   167,101,576      67    300,625,783     6,789,783       3  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Heap.h:Minisat::Solver::cancelUntil(int) [clone .part.108]
  5,813,923,863 699,974   14   1,444,894,789             0       0  1,031,606,707     6,319,042      46  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Vec.h:Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)
  5,428,380,278     454   62   1,429,933,934   111,415,913     229     55,030,651       289,827       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/SolverTypes.h:Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&, int&)
  4,684,881,167     363   46   1,105,399,494    89,910,295       0    388,497,213             0       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Alg.h:Minisat::Solver::detachClause(unsigned int, bool)
  4,242,845,222       0    0   2,121,422,611        70,384       0              0             0       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Alloc.h:Minisat::Solver::simplePropagate()
  3,995,618,483 735,913  212     879,605,883    36,161,201      63    409,201,688     7,934,923       0  ???:__ieee754_pow_fma
  3,756,508,922     311   41   1,788,662,961   114,176,884     240    282,931,022            49       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/Solver.h:Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&, int&)
  3,357,869,695       0    0   3,357,869,695            33       0              0             0       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/Solver.h:Minisat::Solver::simplePropagate()
  2,876,811,382     209    7     919,441,340   178,810,807      63              0             0       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/SolverTypes.h:Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)
  2,779,964,900     101   11   1,137,502,343     6,977,125      30              0             0       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/Solver.h:Minisat::Solver::cancelUntil(int) [clone .part.108]
  2,692,079,694      28   11     906,432,926    68,411,002      14    511,013,214    22,459,300      14  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Heap.h:Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int)
  2,390,121,530     599   36   1,088,803,047   109,560,893     173    345,531,158     9,575,079      17  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Heap.h:Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&, int&)
  2,317,679,096       7    7     787,473,478     2,571,824       0    742,732,140    24,695,843       1  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Vec.h:Minisat::Solver::uncheckedEnqueue(Minisat::Lit, int, unsigned int)
  2,228,193,792       0    0   1,485,462,528    19,651,286       0    371,365,632    79,700,181      21  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/SolverTypes.h:Minisat::Solver::cancelUntil(int) [clone .part.108]
  1,879,647,737     240   17     601,871,321       312,760       0     28,146,655     1,211,421       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Vec.h:Minisat::Solver::cancelUntil(int) [clone .part.108]
  1,492,886,303     104   46     298,884,212    40,213,618     676    160,638,363    25,468,421     525  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Heap.h:Minisat::Solver::pickBranchLit()
  1,485,464,280       0    0     371,366,070             0       0    371,366,070        13,229       0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/SolverTypes.h:Minisat::Solver::uncheckedEnqueue(Minisat::Lit, int, unsigned int)
  1,261,771,038   1,117  134     325,237,673    35,448,469 174,454    191,115,562     7,650,201 740,696  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/SolverTypes.h:Minisat::Solver::relocAll(Minisat::ClauseAllocator&)

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Heap.h
--------------------------------------------------------------------------------
Ir            I1mr   ILmr Dr            D1mr        DLmr  Dw            D1mw       DLmw  

-- line 31 ----------------------------------------
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .  template<class Comp>
            .      .    .             .           .     .             .          .     .  class Heap {
            .      .    .             .           .     .             .          .     .      Comp     lt;       // The heap is a minimum-heap with respect to this comparator
            .      .    .             .           .     .             .          .     .      vec<int> heap;     // Heap of integers
            .      .    .             .           .     .             .          .     .      vec<int> indices;  // Each integers position (index) in the Heap
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .      // Index "traversal" functions
  280,009,058      9    4             0           0     0             0          0     0      static inline int left  (int i) { return i*2+1; }
  835,865,607     19   13   334,273,650 138,785,865 1,570             0          0     0      static inline int right (int i) { return (i+1)*2; }
  666,282,055      7    5   100,024,503           0     0             0          0     0      static inline int parent(int i) { return (i-1) >> 1; }
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .  
  200,049,006     23    8             0           0     0   200,049,006          0     0      void percolateUp(int i)
            .      .    .             .           .     .             .          .     .      {
  553,196,809      0    0   329,793,143  24,794,484    24   123,379,163          0     0          int x  = heap[i];
            .      .    .             .           .     .             .          .     .          int p  = parent(i);
            .      .    .             .           .     .             .          .     .          
2,063,119,673     18   11   691,732,144 114,464,081   120    15,503,618          0     0          while (i != 0 && lt(x, heap[p])){
  115,054,818     30   10             0           0     0   115,054,818          0     0              heap[i]          = heap[p];
  115,054,818      0    0             0           0     0   115,054,818 38,830,613    34              indices[heap[p]] = i;
            .      .    .             .           .     .             .          .     .              i                = p;
  106,314,854      0    0             0           0     0             0          0     0              p                = parent(p);
            .      .    .             .           .     .             .          .     .          }
  229,768,640      8    6    61,697,634           0     0   168,071,006          0     0          heap   [i] = x;
  236,712,677      2    2    61,713,973           0     0   168,087,220          0     0          indices[x] = i;
  378,362,971      0    0   300,073,509           0     0             0          0     0      }
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .  
1,344,011,921      0    0   192,001,703           0     0 1,152,010,218          0     0      void percolateDown(int i)
            .      .    .             .           .     .             .          .     .      {
  591,774,050    769   28   391,410,207  60,108,556     0   200,348,882          0     0          int x = heap[i];
1,046,401,885 34,393   33   274,498,861           2     0             0          0     0          while (left(i) < heap.size()){
1,161,114,605     17    9   165,429,728   6,788,337    22             0          0     0              int child = right(i) < heap.size() && lt(heap[right(i)], heap[left(i)]) ? right(i) : left(i);
  447,823,329     29   13             0           0     0             0          0     0              if (!lt(heap[child], x)) break;
   80,602,372      0    0             0           0     0    80,602,372          0     0              heap[i]          = heap[child];
   80,616,098      0    0        13,726           0     0    80,602,372 34,887,940   474              indices[heap[i]] = i;
   56,207,189      0    0             0           0     0             0          0     0              i                = child;
            .      .    .             .           .     .             .          .     .          }
  398,744,887     38   19   199,372,447           0     0   199,372,440          0     0          heap   [i] = x;
  214,023,278      4    3     7,331,126           0     0   199,372,440        238     0          indices[x] = i;
1,355,468,055      0    0 1,344,011,921           0     0             0          0     0      }
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .    public:
            .      .    .             .           .     .             .          .     .      Heap(const Comp& c) : lt(c) { }
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .      int  size      ()          const { return heap.size(); }
    6,342,130      3    1     6,342,130   1,557,630     0             0          0     0      bool empty     ()          const { return heap.size() == 0; }
5,369,086,475    966   39 2,729,750,114 246,702,847   113             0          0     0      bool inHeap    (int n)     const { return n < indices.size() && indices[n] >= 0; }
   10,991,578      9    6     7,007,225     929,228     3             0          0     0      int  operator[](int index) const { assert(index < heap.size()); return heap[index]; }
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .  
  505,457,958      0    0   352,753,482           0     0   100,024,503        222     0      void decrease  (int n) { assert(inHeap(n)); percolateUp  (indices[n]); }
1,062,527,542      7    6   678,524,136           0     0   192,001,703        272     0      void increase  (int n) { assert(inHeap(n)); percolateDown(indices[n]); }
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .      // Safe variant of insert/decrease/increase:
            .      .    .             .           .     .             .          .     .      void update(int n)
            .      .    .             .           .     .             .          .     .      {
            .      .    .             .           .     .             .          .     .          if (!inHeap(n))
            .      .    .             .           .     .             .          .     .              insert(n);
            .      .    .             .           .     .             .          .     .          else {
            .      .    .             .           .     .             .          .     .              percolateUp(indices[n]);
       32,210      0    0        16,105           0     0             0          0     0              percolateDown(indices[n]); }
            .      .    .             .           .     .             .          .     .      }
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .      void insert(int n)
            .      .    .             .           .     .             .          .     .      {
    6,348,869      2    2             0           0     0             0          0     0          indices.growTo(n+1, -1);
            .      .    .             .           .     .             .          .     .          assert(!inHeap(n));
            .      .    .             .           .     .             .          .     .  
   12,697,738      1    1     6,348,869     117,602     0     6,348,869          0     0          indices[n] = heap.size();
       29,354      1    1             0           0     0        19,524          0     0          heap.push(n);
   12,697,738      0    0     6,348,869           0     0             0          0     0          percolateUp(indices[n]); 
            .      .    .             .           .     .             .          .     .      }
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .      int  removeMin()
            .      .    .             .           .     .             .          .     .      {
   19,026,390      1    1    12,684,260     979,589     3     6,342,130          0     0          int x            = heap[0];
   12,684,260      0    0     6,342,130   1,882,223     7     6,342,130          0     0          heap[0]          = heap.last();
   12,684,260     22   10     6,342,130     961,678     0     6,342,130  4,773,985    49          indices[heap[0]] = 0;
    6,342,130      1    1             0           0     0     6,342,130  1,848,927     2          indices[x]       = -1;
            .      .    .             .           .     .             .          .     .          heap.pop();
   12,684,260      0    0             0           0     0             0          0     0          if (heap.size() > 1) percolateDown(0);
            .      .    .             .           .     .             .          .     .          return x; 
            .      .    .             .           .     .             .          .     .      }
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .      // Rebuild the heap from scratch, using the elements in 'ns':
            .      .    .             .           .     .             .          .     .      void build(const vec<int>& ns) {
       69,802     21   11        34,901          19     0             0          0     0          for (int i = 0; i < heap.size(); i++)
       34,940     12    6            39          13     0        34,823      5,576 1,175              indices[heap[i]] = -1;
           39      0    0             0           0     0             0          0     0          heap.clear();
            .      .    .             .           .     .             .          .     .  
       60,087     11    6        29,985           0     0             0          0     0          for (int i = 0; i < ns.size(); i++){
       59,892      0    0        29,946           0     0        29,946          1     0              indices[ns[i]] = i;
            .      .    .             .           .     .             .          .     .              heap.push(ns[i]); }
            .      .    .             .           .     .             .          .     .  
      105,130     36   18        15,000           0     0            39          0     0          for (int i = heap.size() / 2 - 1; i >= 0; i--)
            .      .    .             .           .     .             .          .     .              percolateDown(i);
            .      .    .             .           .     .             .          .     .      }
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .      void clear(bool dealloc = false) 
            .      .    .             .           .     .             .          .     .      { 
            4      0    0             2           0     0             0          0     0          for (int i = 0; i < heap.size(); i++)
            .      .    .             .           .     .             .          .     .              indices[heap[i]] = -1;
            .      .    .             .           .     .             .          .     .          heap.clear(dealloc); 
            .      .    .             .           .     .             .          .     .      }
            .      .    .             .           .     .             .          .     .  };
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .  
            .      .    .             .           .     .             .          .     .  //=================================================================================================
            .      .    .             .           .     .             .          .     .  }
-- line 146 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/SolverTypes.h
--------------------------------------------------------------------------------
Ir              I1mr  ILmr Dr             D1mr          DLmr    Dw             D1mw       DLmw      

-- line 54 ----------------------------------------
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  struct Lit {
              .     .    .              .             .       .              .          .         .      int     x;
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      // Use this as a constructor:
              .     .    .              .             .       .              .          .         .      friend Lit mkLit(Var var, bool sign );
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      bool operator == (Lit p) const { return x == p.x; }
    374,869,881     0    0    189,730,837    94,977,835     223              0          0         0      bool operator != (Lit p) const { return x != p.x; }
              .     .    .              .             .       .              .          .         .      bool operator <  (Lit p) const { return x < p.x;  } // '<' makes p, ~p adjacent in the ordering.
              .     .    .              .             .       .              .          .         .  };
              .     .    .              .             .       .              .          .         .  
        126,255     0    0              0             0       0          1,623          1         0  inline  Lit  mkLit     (Var var, bool sign= false) { Lit p; p.x = var + var + (int)sign; return p; }
 17,720,917,154    42   16  8,055,931,371       153,452       2    636,280,636    289,827         0  inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
              .     .    .              .             .       .              .          .         .  inline  Lit  operator ^(Lit p, bool b)      { Lit q; q.x = p.x ^ (unsigned int)b; return q; }
 80,632,770,970    14   11  1,488,486,936             0       0    745,755,672 79,713,410        21  inline  bool sign      (Lit p)              { return p.x & 1; }
126,422,656,836 7,158   61  1,920,347,256    32,305,928       1 26,542,926,959          0         0  inline  int  var       (Lit p)              { return p.x >> 1; }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  // Mapping Literals to and from compact integers suitable for array indexing:
              .     .    .              .             .       .              .          .         .  inline  int  toInt     (Var v)              { return v; } 
            915     0    0             52             0       0             52          4         4  inline  int  toInt     (Lit p)              { return p.x; } 
              .     .    .              .             .       .              .          .         .  inline  Lit  toLit     (int i)              { Lit p; p.x = i; return p; } 
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  //const Lit lit_Undef = mkLit(var_Undef, false);  // }- Useful special constants.
              .     .    .              .             .       .              .          .         .  //const Lit lit_Error = mkLit(var_Undef, true );  // }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  const Lit lit_Undef = { -2 };  // }- Useful special constants.
              .     .    .              .             .       .              .          .         .  const Lit lit_Error = { -1 };  // }
              .     .    .              .             .       .              .          .         .  
-- line 82 ----------------------------------------
-- line 104 ----------------------------------------
              .     .    .              .             .       .              .          .         .      uint8_t value;
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  public:
              .     .    .              .             .       .              .          .         .      explicit lbool(uint8_t v) : value(v) { }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      lbool()       : value(0) { }
              .     .    .              .             .       .              .          .         .      explicit lbool(bool x) : value(!x) { }
              .     .    .              .             .       .              .          .         .  
  4,919,703,239     1    1              0             0       0              0          0         0      bool  operator == (lbool b) const { return ((b.value&2) & (value&2)) | (!(b.value&2)&(value == b.value)); }
              .     .    .              .             .       .              .          .         .      bool  operator != (lbool b) const { return !(*this == b); }
 16,295,351,356    44   11 14,288,770,553    96,604,717       0              0          0         0      lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      lbool operator && (lbool b) const {
              .     .    .              .             .       .              .          .         .          uint8_t sel = (this->value << 1) | (b.value << 3);
              .     .    .              .             .       .              .          .         .          uint8_t v   = (0xF7F755F4 >> sel) & 3;
              .     .    .              .             .       .              .          .         .          return lbool(v); }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      lbool operator || (lbool b) const {
              .     .    .              .             .       .              .          .         .          uint8_t sel = (this->value << 1) | (b.value << 3);
-- line 122 ----------------------------------------
-- line 148 ----------------------------------------
              .     .    .              .             .       .              .          .         .          unsigned simplified : 1;}                            header;
              .     .    .              .             .       .              .          .         .      union { Lit lit; float act; uint32_t abs; uint32_t touched; CRef rel; } data[0];
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      friend class ClauseAllocator;
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      // NOTE: This constructor cannot be used directly (doesn't allocate enough memory).
              .     .    .              .             .       .              .          .         .      template<class V>
              .     .    .              .             .       .              .          .         .      Clause(const V& ps, bool use_extra, bool learnt) {
     39,647,143     0    0      9,342,531             0       0     11,619,549    113,453         0          header.mark      = 0;
     27,988,398     3    1      9,329,466       582,869  58,366              0          0         0          header.learnt    = learnt;
     56,068,251     5    4      9,355,596             3       0      9,342,531          0         0          header.has_extra = learnt | use_extra;
              .     .    .              .             .       .              .          .         .          header.reloced   = 0;
     13,909,630     0    0      2,290,082            91       0     11,619,548  1,986,913    44,025          header.size      = ps.size();
              .     .    .              .             .       .              .          .         .          header.lbd       = 0;
              .     .    .              .             .       .              .          .         .          header.removable = 1;
              .     .    .              .             .       .              .          .         .          //simplify
              .     .    .              .             .       .              .          .         .          //
     11,619,549     8    5     11,619,549     1,308,694 137,254              0          0         0          header.simplified = 0;
              .     .    .              .             .       .              .          .         .  
    376,645,588   217   32      2,326,436             0       0              0          0         0          for (int i = 0; i < ps.size(); i++)
    207,645,226   216   21     71,083,325     8,647,724   1,633     87,549,248  9,611,240 1,095,491              data[i].lit = ps[i];
              .     .    .              .             .       .              .          .         .  
     34,858,646    64   18     11,619,548             0       0              0          0         0          if (header.has_extra){
     22,279,022    20    7              0             0       0              0          0         0              if (header.learnt){
     22,229,996     4    3      8,837,782             0       0     11,114,998    695,072    75,508                  data[header.size].act = 0;
     22,230,203     0    0              0             0       0     11,114,998    694,811    75,451                  data[header.size+1].touched = 0;
              .     .    .              .             .       .              .          .         .              }else
              .     .    .              .             .       .              .          .         .                  calcAbstraction(); }
              .     .    .              .             .       .              .          .         .      }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  public:
              .     .    .              .             .       .              .          .         .      void calcAbstraction() {
              .     .    .              .             .       .              .          .         .          assert(header.has_extra);
         24,538     0    0              0             0       0              0          0         0          uint32_t abstraction = 0;
        361,077     6    3         11,449             0       0              0          0         0          for (int i = 0; i < size(); i++)
        519,303     5    2              0             0       0              1          0         0              abstraction |= 1 << (var(data[i].lit) & 31);
        100,198     1    1         11,446             0       0         35,986      1,446     1,431          data[header.size].abs = abstraction;  }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  
 12,190,812,438   185   68  6,681,077,617   882,976,439   3,754  4,334,573,496         43         0      int          size        ()      const   { return header.size; }
      2,873,918    40   13        718,832       159,534       0        718,832     16,004         0      void         shrink      (int i)         { assert(i <= size()); if (header.has_extra) data[header.size-i] = data[header.size]; header.size -= i; }
              .     .    .              .             .       .              .          .         .      void         pop         ()              { shrink(1); }
    105,918,179    10    6      2,187,151             0       0              0          0         0      bool         learnt      ()      const   { return header.learnt; }
         19,984     0    0              0             0       0              0          0         0      bool         has_extra   ()      const   { return header.has_extra; }
    177,158,130   184    8     27,202,554    25,703,157  10,593     52,020,028          0         0      uint32_t     mark        ()      const   { return header.mark; }
     48,884,182   221   14     12,840,995        16,285       0     11,968,513          0         0      void         mark        (uint32_t m)    { header.mark = m; }
        288,098     0    0              0             0       0        144,049     13,687         0      const Lit&   last        ()      const   { return data[header.size-1].lit; }
              .     .    .              .             .       .              .          .         .  
     28,082,000     0    0     28,082,000    24,146,325     185              0          0         0      bool         reloced     ()      const   { return header.reloced; }
              .     .    .              .             .       .              .          .         .      CRef         relocation  ()      const   { return data[0].rel; }
     37,317,864    19    8      9,329,466             0       0     18,658,932          0         0      void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
              .     .    .              .             .       .              .          .         .  
     23,986,833     0    0      7,986,331             0       0              0          0         0      int          lbd         ()      const   { return header.lbd; }
     76,556,680   144   23     20,633,972             0       0     11,796,698          0         0      void         set_lbd     (int lbd)       { header.lbd = lbd; }
              .     .    .              .             .       .              .          .         .      bool         removable   ()      const   { return header.removable; }
     55,699,038     6    4     20,347,118             0       0      8,837,980          0         0      void         removable   (bool b)        { header.removable = b; }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      // NOTE: somewhat unsafe to change the clause in-place! Must manually call 'calcAbstraction' afterwards for
              .     .    .              .             .       .              .          .         .      //       subsumption operations to behave correctly.
 14,227,413,920   172   38 13,436,569,381 1,058,283,969  10,641              0          0         0      Lit&         operator [] (int i)         { return data[i].lit; }
    141,865,612   278   33    122,939,437     4,116,534     691              0          0         0      Lit          operator [] (int i) const   { return data[i].lit; }
              .     .    .              .             .       .              .          .         .      operator const Lit* (void) const         { return (Lit*)data; }
              .     .    .              .             .       .              .          .         .  
      9,159,148     0    0      9,159,148            21       0              0          0         0      uint32_t&    touched     ()              { assert(header.has_extra && header.learnt); return data[header.size+1].touched; }
      9,781,156     0    0      2,989,830       731,598       0              0          0         0      float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
              .     .    .              .             .       .              .          .         .      uint32_t     abstraction () const        { assert(header.has_extra); return data[header.size].abs; }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      Lit          subsumes    (const Clause& other) const;
              .     .    .              .             .       .              .          .         .      void         strengthen  (Lit p);
              .     .    .              .             .       .              .          .         .      // simplify
              .     .    .              .             .       .              .          .         .      //
     62,396,868     3    2     17,941,464             0       0      8,837,980          0         0      void setSimplified(bool b) { header.simplified = b; }
              .     .    .              .             .       .              .          .         .      bool simplified() { return header.simplified; }
              .     .    .              .             .       .              .          .         .  };
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  //=================================================================================================
              .     .    .              .             .       .              .          .         .  // ClauseAllocator -- a simple class for allocating memory for clauses:
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  const CRef CRef_Undef = RegionAllocator<uint32_t>::Ref_Undef;
              .     .    .              .             .       .              .          .         .  class ClauseAllocator : public RegionAllocator<uint32_t>
              .     .    .              .             .       .              .          .         .  {
              .     .    .              .             .       .              .          .         .      static int clauseWord32Size(int size, int extras){
     23,124,920     4    3     11,505,174       544,112     256              0          0         0          return (sizeof(Clause) + (sizeof(Lit) * (size + extras))) / sizeof(uint32_t); }
              .     .    .              .             .       .              .          .         .  public:
              .     .    .              .             .       .              .          .         .      bool extra_clause_field;
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      ClauseAllocator(uint32_t start_cap) : RegionAllocator<uint32_t>(start_cap), extra_clause_field(false){}
              1     0    0              0             0       0              1          0         0      ClauseAllocator() : extra_clause_field(false){}
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      void moveTo(ClauseAllocator& to){
            300    16    1            150           148       0            150          0         0          to.extra_clause_field = extra_clause_field;
              .     .    .              .             .       .              .          .         .          RegionAllocator<uint32_t>::moveTo(to); }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      template<class Lits>
              .     .    .              .             .       .              .          .         .      CRef alloc(const Lits& ps, bool learnt = false)
              .     .    .              .             .       .              .          .         .      {
              .     .    .              .             .       .              .          .         .          assert(sizeof(Lit)      == sizeof(uint32_t));
              .     .    .              .             .       .              .          .         .          assert(sizeof(float)    == sizeof(uint32_t));
     19,163,482   168   18        504,550            51       0              0          0         0          int extras = learnt ? 2 : (int)extra_clause_field;
              .     .    .              .             .       .              .          .         .  
      2,303,146     0    0              0             0       0         13,064          0         0          CRef cid = RegionAllocator<uint32_t>::alloc(clauseWord32Size(ps.size(), extras));
              .     .    .              .             .       .              .          .         .          new (lea(cid)) Clause(ps, extra_clause_field, learnt);
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .          return cid;
              .     .    .              .             .       .              .          .         .      }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
     81,253,788   151    4     73,127,545        41,556       0         14,258          0         0      Clause&       operator[](Ref r)       { return (Clause&)RegionAllocator<uint32_t>::operator[](r); }
         16,644     2    2          8,322             2       0              0          0         0      const Clause& operator[](Ref r) const { return (Clause&)RegionAllocator<uint32_t>::operator[](r); }
      9,329,466     0    0      9,329,466             0       0              0          0         0      Clause*       lea       (Ref r)       { return (Clause*)RegionAllocator<uint32_t>::lea(r); }
              .     .    .              .             .       .              .          .         .      const Clause* lea       (Ref r) const { return (Clause*)RegionAllocator<uint32_t>::lea(r); }
              .     .    .              .             .       .              .          .         .      Ref           ael       (const Clause* t){ return RegionAllocator<uint32_t>::ael((uint32_t*)t); }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      void free(CRef cid)
              .     .    .              .             .       .              .          .         .      {
              .     .    .              .             .       .              .          .         .          Clause& c = operator[](cid);
      6,547,099     9    6              0             0       0              0          0         0          int extras = c.learnt() ? 2 : (int)c.has_extra();
              .     .    .              .             .       .              .          .         .          RegionAllocator<uint32_t>::free(clauseWord32Size(c.size(), extras));
              .     .    .              .             .       .              .          .         .      }
              .     .    .              .             .       .              .          .         .  
     17,676,183   147    7              0             0       0     15,151,014          3         0      void reloc(CRef& cr, ClauseAllocator& to)
              .     .    .              .             .       .              .          .         .      {
              .     .    .              .             .       .              .          .         .          Clause& c = operator[](cr);
              .     .    .              .             .       .              .          .         .          
    100,534,155     0    0     18,752,534     3,263,641       0     18,752,534          0         0          if (c.reloced()) { cr = c.relocation(); return; }
              .     .    .              .             .       .              .          .         .          
      9,329,469     0    0              3             0       0      9,329,466          0         0          cr = to.alloc(c, c.learnt());
              .     .    .              .             .       .              .          .         .          c.relocate(cr);
              .     .    .              .             .       .              .          .         .          
              .     .    .              .             .       .              .          .         .          // Copy extra data-fields:
              .     .    .              .             .       .              .          .         .          // (This could be cleaned-up. Generalize Clause-constructor to be applicable here instead?)
              .     .    .              .             .       .              .          .         .          to[cr].mark(c.mark());
     18,658,932     4    3              0             0       0              0          0         0          if (to[cr].learnt()){
     35,351,920     0    0      8,837,980       499,554     145      8,837,980          0         0              to[cr].touched() = c.touched();
     35,351,722     0    0     17,675,960       502,254     145      8,837,980          0         0              to[cr].activity() = c.activity();
              .     .    .              .             .       .              .          .         .              to[cr].set_lbd(c.lbd());
              .     .    .              .             .       .              .          .         .              to[cr].removable(c.removable());
              .     .    .              .             .       .              .          .         .              // simplify
              .     .    .              .             .       .              .          .         .              //
              .     .    .              .             .       .              .          .         .              to[cr].setSimplified(c.simplified());
              .     .    .              .             .       .              .          .         .          }
        982,972   294   18              0             0       0              0          0         0          else if (to[cr].has_extra()) to[cr].calcAbstraction();
     20,201,352     0    0     17,676,183             0       0              0          0         0      }
              .     .    .              .             .       .              .          .         .  };
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  inline std::ostream& operator<<(std::ostream& out, const Clause& cls) 
              .     .    .              .             .       .              .          .         .  {
              .     .    .              .             .       .              .          .         .      for (int i = 0; i < cls.size(); ++i)
              .     .    .              .             .       .              .          .         .      {
              .     .    .              .             .       .              .          .         .  		out << cls[i] << " ";
-- line 300 ----------------------------------------
-- line 310 ----------------------------------------
              .     .    .              .             .       .              .          .         .  class OccLists
              .     .    .              .             .       .              .          .         .  {
              .     .    .              .             .       .              .          .         .      vec<Vec>  occs;
              .     .    .              .             .       .              .          .         .      vec<char> dirty;
              .     .    .              .             .       .              .          .         .      vec<Idx>  dirties;
              .     .    .              .             .       .              .          .         .      Deleted   deleted;
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  public:
              3     0    0              0             0       0              3          0         0      OccLists(const Deleted& d) : deleted(d) {}
              .     .    .              .             .       .              .          .         .      unsigned int size(){
              .     .    .              .             .       .              .          .         .          auto m_size=0;
             40     2    2              4             2       0              0          0         0          for(int i=0;i<occs.size();i++){
         50,124    14   14         18,204         4,549       0              0          0         0              m_size+=occs[i].size();
              .     .    .              .             .       .              .          .         .          }
              .     .    .              .             .       .              .          .         .          
              .     .    .              .             .       .              .          .         .          return m_size;
              .     .    .              .             .       .              .          .         .      }
         25,025     1    1              0             0       0          4,550          0         0      void  init      (const Idx& idx){ occs.growTo(toInt(idx)+1); dirty.growTo(toInt(idx)+1, 0); }
              .     .    .              .             .       .              .          .         .      // Vec&  operator[](const Idx& idx){ return occs[toInt(idx)]; }
    358,249,257    31    5    358,249,257     1,961,650       0              0          0         0      Vec&  operator[](const Idx& idx){ return occs[toInt(idx)]; }
         51,119     3    1         26,285         2,493       0          2,406          0         0      Vec&  lookup    (const Idx& idx){ if (dirty[toInt(idx)]) clean(idx); return occs[toInt(idx)]; }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      void  cleanAll  ();
              .     .    .              .             .       .              .          .         .      void  clean     (const Idx& idx);
              .     .    .              .             .       .              .          .         .      void  smudge    (const Idx& idx){
     13,105,346     0    0      8,728,375       114,588     295              0          0         0          if (dirty[toInt(idx)] == 0){
        139,653   219    4              0             0       0        139,653          0         0              dirty[toInt(idx)] = 1;
             52     1    1              0             0       0              0          0         0              dirties.push(idx);
              .     .    .              .             .       .              .          .         .          }
              .     .    .              .             .       .              .          .         .      }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .      void  clear(bool free = true){
              .     .    .              .             .       .              .          .         .          occs   .clear(free);
              .     .    .              .             .       .              .          .         .          dirty  .clear(free);
              .     .    .              .             .       .              .          .         .          dirties.clear(free);
              .     .    .              .             .       .              .          .         .      }
              .     .    .              .             .       .              .          .         .  };
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  template<class Idx, class Vec, class Deleted>
          1,272     0    0              0             0       0            954          7         0  void OccLists<Idx,Vec,Deleted>::cleanAll()
              .     .    .              .             .       .              .          .         .  {
     63,731,194    78    5     31,724,122     1,694,944       0              0          0         0      for (int i = 0; i < dirties.size(); i++)
              .     .    .              .             .       .              .          .         .          // Dirties may contain duplicates so check here if a variable is already cleaned:
        418,959     0    0        279,306       110,498       0              0          0         0          if (dirty[toInt(dirties[i])])
              .     .    .              .             .       .              .          .         .              clean(dirties[i]);
              .     .    .              .             .       .              .          .         .      dirties.clear();
          1,272     0    0          1,272           253       0              0          0         0  }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  template<class Idx, class Vec, class Deleted>
              .     .    .              .             .       .              .          .         .  void OccLists<Idx,Vec,Deleted>::clean(const Idx& idx)
              .     .    .              .             .       .              .          .         .  {
              .     .    .              .             .       .              .          .         .      Vec& vec = occs[toInt(idx)];
              .     .    .              .             .       .              .          .         .      int  i, j;
     73,328,947     2    2        529,483       139,659       0              0          0         0      for (i = j = 0; i < vec.size(); i++)
     45,258,476     0    0         71,746         3,768       0              0          0         0          if (!deleted(vec[i]))
    127,219,155     4    3     36,362,206            71       0     18,202,969    236,214         0              vec[j++] = vec[i];
        135,046   172    4              0             0       0              0          0         0      vec.shrink(i - j);
        561,929     1    0        279,306         8,272       0        140,145      8,319         0      dirty[toInt(idx)] = 0;
              .     .    .              .             .       .              .          .         .  }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  //=================================================================================================
              .     .    .              .             .       .              .          .         .  // CMap -- a class for mapping clauses to values:
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .  template<class T>
-- line 377 ----------------------------------------
-- line 426 ----------------------------------------
              .     .    .              .             .       .              .          .         .  |       p          - The literal p can be deleted from 'other'
              .     .    .              .             .       .              .          .         .  |________________________________________________________________________________________________@*/
              .     .    .              .             .       .              .          .         .  inline Lit Clause::subsumes(const Clause& other) const
              .     .    .              .             .       .              .          .         .  {
              .     .    .              .             .       .              .          .         .      //if (other.size() < size() || (extra.abst & ~other.extra.abst) != 0)
              .     .    .              .             .       .              .          .         .      //if (other.size() < size() || (!learnt() && !other.learnt() && (extra.abst & ~other.extra.abst) != 0))
              .     .    .              .             .       .              .          .         .      assert(!header.learnt);   assert(!other.header.learnt);
              .     .    .              .             .       .              .          .         .      assert(header.has_extra); assert(other.header.has_extra);
        905,454     0    0        301,818         3,863     120              0          0         0      if (other.header.size < header.size || (data[header.size].abs & ~other.data[other.header.size].abs) != 0)
              .     .    .              .             .       .              .          .         .          return lit_Error;
              .     .    .              .             .       .              .          .         .  
         30,415     0    0              0             0       0              0          0         0      Lit        ret = lit_Undef;
              .     .    .              .             .       .              .          .         .      const Lit* c   = (const Lit*)(*this);
              .     .    .              .             .       .              .          .         .      const Lit* d   = (const Lit*)other;
              .     .    .              .             .       .              .          .         .  
        264,864     1    1         51,224             0       0              0          0         0      for (unsigned i = 0; i < header.size; i++) {
              .     .    .              .             .       .              .          .         .          // search for c[i] or ~c[i]
        726,586     2    2         30,415             0       0         30,415          0         0          for (unsigned j = 0; j < other.header.size; j++)
        924,659     0    0        194,107             9       0              0          0         0              if (c[i] == d[j])
              .     .    .              .             .       .              .          .         .                  goto ok;
        137,119     0    0              0             0       0              0          0         0              else if (ret == lit_Undef && c[i] == ~d[j]){
              .     .    .              .             .       .              .          .         .                  ret = c[i];
              .     .    .              .             .       .              .          .         .                  goto ok;
              .     .    .              .             .       .              .          .         .              }
              .     .    .              .             .       .              .          .         .  
              .     .    .              .             .       .              .          .         .          // did not find it
              .     .    .              .             .       .              .          .         .          return lit_Error;
              .     .    .              .             .       .              .          .         .  ok:;
              .     .    .              .             .       .              .          .         .      }
-- line 454 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Alg.h
--------------------------------------------------------------------------------
Ir            I1mr ILmr Dr          D1mr       DLmr Dw          D1mw DLmw 

-- line 30 ----------------------------------------
            .    .    .           .          .    .           .    .    .  
            .    .    .           .          .    .           .    .    .  //=================================================================================================
            .    .    .           .          .    .           .    .    .  // Removing and searching for elements:
            .    .    .           .          .    .           .    .    .  //
            .    .    .           .          .    .           .    .    .  
            .    .    .           .          .    .           .    .    .  template<class V, class T>
            .    .    .           .          .    .           .    .    .  static inline void remove(V& ts, const T& t)
            .    .    .           .          .    .           .    .    .  {
       12,810  172    1           0          0    0           0    0    0      int j = 0;
1,963,162,118  100   24 327,855,036 41,569,577    0           0    0    0      for (; j < ts.size() && ts[j] != t; j++);
            .    .    .           .          .    .           .    .    .      assert(j < ts.size());
2,721,710,037   98   24 777,545,130 48,340,739    0 388,497,302    0    0      for (; j < ts.size()-1; j++) ts[j] = ts[j+1];
            .    .    .           .          .    .           .    .    .      ts.pop();
            .    .    .           .          .    .           .    .    .  }
            .    .    .           .          .    .           .    .    .  
            .    .    .           .          .    .           .    .    .  
            .    .    .           .          .    .           .    .    .  template<class V, class T>
            .    .    .           .          .    .           .    .    .  static inline bool find(V& ts, const T& t)
            .    .    .           .          .    .           .    .    .  {
            .    .    .           .          .    .           .    .    .      int j = 0;
      332,392    1    1      58,682      3,005  208           0    0    0      for (; j < ts.size() && ts[j] != t; j++);
            .    .    .           .          .    .           .    .    .      return j < ts.size();
            .    .    .           .          .    .           .    .    .  }
            .    .    .           .          .    .           .    .    .  
            .    .    .           .          .    .           .    .    .  
            .    .    .           .          .    .           .    .    .  //=================================================================================================
            .    .    .           .          .    .           .    .    .  // Copying vectors with support for nested vector types:
            .    .    .           .          .    .           .    .    .  //
            .    .    .           .          .    .           .    .    .  
-- line 58 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Alloc.h
--------------------------------------------------------------------------------
Ir             I1mr  ILmr Dr            D1mr      DLmr   Dw         D1mw DLmw 

-- line 40 ----------------------------------------
             .     .    .             .         .      .          .    .    .      void capacity(uint32_t min_cap);
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .   public:
             .     .    .             .         .      .          .    .    .      // TODO: make this a class for better type-checking?
             .     .    .             .         .      .          .    .    .      typedef uint32_t Ref;
             .     .    .             .         .      .          .    .    .      enum { Ref_Undef = UINT32_MAX };
             .     .    .             .         .      .          .    .    .      enum { Unit_Size = sizeof(uint32_t) };
             .     .    .             .         .      .          .    .    .  
           756     1    1             0         0      0        604  145    0      explicit RegionAllocator(uint32_t start_cap = 1024*1024) : memory(NULL), sz(0), cap(0), wasted_(0){ capacity(start_cap); }
             .     .    .             .         .      .          .    .    .      ~RegionAllocator()
             .     .    .             .         .      .          .    .    .      {
             .     .    .             .         .      .          .    .    .          if (memory != NULL)
             .     .    .             .         .      .          .    .    .              ::free(memory);
             .     .    .             .         .      .          .    .    .      }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .      uint32_t size      () const      { return sz; }
             .     .    .             .         .      .          .    .    .      uint32_t wasted    () const      { return wasted_; }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .      Ref      alloc     (int size); 
     6,527,118     0    0     2,175,705         0      0  2,175,705    0    0      void     free      (int size)    { wasted_ += size; }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .      // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
16,053,253,810   465   47 8,011,661,841 3,299,662 16,389    379,917    0    0      T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    22,503,446     0    0    22,503,446 2,919,006  3,024          0    0    0      const T& operator[](Ref r) const { assert(r >= 0 && r < sz); return memory[r]; }
             .     .    .             .         .      .          .    .    .  
    37,135,665 6,865   14     2,290,083         0      0          0    0    0      T*       lea       (Ref r)       { assert(r >= 0 && r < sz); return &memory[r]; }
     3,606,893     0    0             0         0      0          0    0    0      const T* lea       (Ref r) const { assert(r >= 0 && r < sz); return &memory[r]; }
             .     .    .             .         .      .          .    .    .      Ref      ael       (const T* t)  { assert((void*)t >= (void*)&memory[0] && (void*)t < (void*)&memory[sz-1]);
             .     .    .             .         .      .          .    .    .          return  (Ref)(t - &memory[0]); }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .      void     moveTo(RegionAllocator& to) {
           600     0    0           150         0      0        150    0    0          if (to.memory != NULL) ::free(to.memory);
           300     0    0           150         0      0        150    0    0          to.memory = memory;
           300     0    0           150         0      0        150    0    0          to.sz = sz;
             .     .    .             .         .      .          .    .    .          to.cap = cap;
           300     0    0           150         0      0        150    0    0          to.wasted_ = wasted_;
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .          memory = NULL;
             .     .    .             .         .      .          .    .    .          sz = cap = wasted_ = 0;
             .     .    .             .         .      .          .    .    .      }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  };
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  template<class T>
         1,488    55   14             0         0      0        496    1    0  void RegionAllocator<T>::capacity(uint32_t min_cap)
             .     .    .             .         .      .          .    .    .  {
    34,859,103     2    0    11,619,700         0      0          0    0    0      if (cap >= min_cap) return;
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .      uint32_t prev_cap = cap;
         8,649     0    0             0         0      0        249    0    0      while (cap < min_cap){
             .     .    .             .         .      .          .    .    .          // NOTE: Multiply by a factor (13/8) without causing overflow, then add 2 and make the
             .     .    .             .         .      .          .    .    .          // result even by clearing the least significant bit. The resulting sequence of capacities
             .     .    .             .         .      .          .    .    .          // is carefully chosen to hit a maximum capacity that is close to the '2^32-1' limit when
             .     .    .             .         .      .          .    .    .          // using 'uint32_t' as indices so that as much as possible of this space can be used.
        25,200     0    0             0         0      0          0    0    0          uint32_t delta = ((cap >> 1) + (cap >> 3) + 2) & ~1;
         4,200     0    0             0         0      0          0    0    0          cap += delta;
             .     .    .             .         .      .          .    .    .  
         8,400     0    0             0         0      0          0    0    0          if (cap <= prev_cap)
             .     .    .             .         .      .          .    .    .              throw OutOfMemoryException();
             .     .    .             .         .      .          .    .    .      }
             .     .    .             .         .      .          .    .    .      // printf(" .. (%p) cap = %u\n", this, cap);
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .      assert(cap > 0);
           499     2    1             0         0      0        249   93    0      memory = (T*)xrealloc(memory, sizeof(T)*cap);
           992     0    0           744         0      0          0    0    0  }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  template<class T>
             .     .    .             .         .      .          .    .    .  typename RegionAllocator<T>::Ref
        52,256     2    1             0         0      0     39,192    0    0  RegionAllocator<T>::alloc(int size)
             .     .    .             .         .      .          .    .    .  { 
             .     .    .             .         .      .          .    .    .      // printf("ALLOC called (this = %p, size = %d)\n", this, size); fflush(stdout);
             .     .    .             .         .      .          .    .    .      assert(size > 0);
    62,833,979     0    0    11,619,549 1,526,203      0 30,265,216  368    0      capacity(sz + size);
             .     .    .             .         .      .          .    .    .  
    37,096,281     0    0    20,935,753         0      0          0    0    0      uint32_t prev_sz = sz;
    11,619,549     2    1             0         0      0 11,619,549    0    0      sz += size;
             .     .    .             .         .      .          .    .    .      
             .     .    .             .         .      .          .    .    .      // Handle overflow:
    51,227,486   140   29     9,329,463         0      0          0    0    0      if (sz < prev_sz)
             2     1    1             1         1      0          0    0    0          throw OutOfMemoryException();
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .      return prev_sz;
        52,256     0    0        52,256         0      0          0    0    0  }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  //=================================================================================================
             .     .    .             .         .      .          .    .    .  }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/..//core/Solver.cc
--------------------------------------------------------------------------------
Ir             I1mr    ILmr Dr             D1mr          DLmr    Dw             D1mw        DLmw 

-- line 51 ----------------------------------------
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  //=================================================================================================
             .       .    .              .             .       .              .           .    .  // Options:
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  static const char* _cat = "CORE";
             .       .    .              .             .       .              .           .    .  
             4       0    0              0             0       0              1           0    0  static DoubleOption  opt_step_size         (_cat, "step-size",   "Initial step size",                             0.40,     DoubleRange(0, false, 1, false));
             4       0    0              0             0       0              1           0    0  static DoubleOption  opt_step_size_dec     (_cat, "step-size-dec","Step size decrement",                          0.000001, DoubleRange(0, false, 1, false));
             4       0    0              0             0       0              1           0    0  static DoubleOption  opt_min_step_size     (_cat, "min-step-size","Minimal step size",                            0.06,     DoubleRange(0, false, 1, false));
             4       1    1              0             0       0              1           0    0  static DoubleOption  opt_var_decay         (_cat, "var-decay",   "The variable activity decay factor",            0.80,     DoubleRange(0, false, 1, false));
             4       0    0              0             0       0              1           0    0  static DoubleOption  opt_clause_decay      (_cat, "cla-decay",   "The clause activity decay factor",              0.999,    DoubleRange(0, false, 1, false));
             4       0    0              0             0       0              1           0    0  static DoubleOption  opt_random_var_freq   (_cat, "rnd-freq",    "The frequency with which the decision heuristic tries to choose a random variable", 0, DoubleRange(0, true, 1, true));
             4       0    0              0             0       0              1           0    0  static DoubleOption  opt_random_seed       (_cat, "rnd-seed",    "Used by the random variable selection",         91648253, DoubleRange(0, false, HUGE_VAL, false));
             4       0    0              0             0       0              1           0    0  static IntOption     opt_ccmin_mode        (_cat, "ccmin-mode",  "Controls conflict clause minimization (0=none, 1=basic, 2=deep)", 2, IntRange(0, 2));
             4       0    0              0             0       0              1           0    0  static IntOption     opt_phase_saving      (_cat, "phase-saving", "Controls the level of phase saving (0=none, 1=limited, 2=full)", 2, IntRange(0, 2));
             4       1    1              0             0       0              1           0    0  static BoolOption    opt_rnd_init_act      (_cat, "rnd-init",    "Randomize the initial activity", false);
             4       0    0              0             0       0              1           0    0  static IntOption     opt_restart_first     (_cat, "rfirst",      "The base restart interval", 100, IntRange(1, INT32_MAX));
             4       1    1              0             0       0              1           0    0  static DoubleOption  opt_restart_inc       (_cat, "rinc",        "Restart interval increase factor", 2, DoubleRange(1, false, HUGE_VAL, false));
             4       1    1              0             0       0              1           0    0  static DoubleOption  opt_garbage_frac      (_cat, "gc-frac",     "The fraction of wasted memory allowed before a garbage collection is triggered",  0.20, DoubleRange(0, false, HUGE_VAL, false));
             4       1    1              0             0       0              1           0    0  static IntOption     opt_chrono            (_cat, "chrono",  "Controls if to perform chrono backtrack", 100, IntRange(-1, INT32_MAX));
             4       1    1              0             0       0              1           0    0  static IntOption     opt_conf_to_chrono    (_cat, "confl-to-chrono",  "Controls number of conflicts to perform chrono backtrack", 4000, IntRange(-1, INT32_MAX));
             .       .    .              .             .       .              .           .    .  
             4       1    1              0             0       0              1           0    0  static IntOption     opt_max_lbd_dup       ("DUP-LEARNTS", "lbd-limit",  "specifies the maximum lbd of learnts to be screened for duplicates.", 12, IntRange(0, INT32_MAX));
             1       1    1              0             0       0              1           0    0  static IntOption     opt_min_dupl_app      ("DUP-LEARNTS", "min-dup-app",  "specifies the minimum number of learnts to be included into db.", 3, IntRange(2, INT32_MAX));
             4       0    0              0             0       0              1           0    0  static IntOption     opt_dupl_db_init_size ("DUP-LEARNTS", "dupdb-init",  "specifies the initial maximal duplicates DB size.", 500000, IntRange(1, INT32_MAX));
             .       .    .              .             .       .              .           .    .  
             4       1    1              0             0       0              1           0    0  static IntOption     opt_VSIDS_props_limit ("DUP-LEARNTS", "VSIDS-lim",  "specifies the number of propagations after which the solver switches between LRB and VSIDS(in millions).", 30, IntRange(1, INT32_MAX));
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  //VSIDS_props_limit
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  //=================================================================================================
             .       .    .              .             .       .              .           .    .  // Constructor/Destructor:
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             4       1    1              0             0       0              2           0    0  Solver::Solver() :
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // Parameters (user settable):
             .       .    .              .             .       .              .           .    .      //
             .       .    .              .             .       .              .           .    .      drup_file        (NULL)
             .       .    .              .             .       .              .           .    .    , verbosity        (0)
             .       .    .              .             .       .              .           .    .    , step_size        (opt_step_size)
             .       .    .              .             .       .              .           .    .    , step_size_dec    (opt_step_size_dec)
             .       .    .              .             .       .              .           .    .    , min_step_size    (opt_min_step_size)
-- line 95 ----------------------------------------
-- line 106 ----------------------------------------
             .       .    .              .             .       .              .           .    .    , garbage_frac     (opt_garbage_frac)
             .       .    .              .             .       .              .           .    .    , restart_first    (opt_restart_first)
             .       .    .              .             .       .              .           .    .    , restart_inc      (opt_restart_inc)
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .    , min_number_of_learnts_copies(opt_min_dupl_app)  
             .       .    .              .             .       .              .           .    .    , max_lbd_dup(opt_max_lbd_dup)
             .       .    .              .             .       .              .           .    .    , dupl_db_init_size(opt_dupl_db_init_size)
             3       1    1              1             0       0              1           0    0    , VSIDS_props_limit(opt_VSIDS_props_limit*1000000)
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .    // Parameters (the rest):
             .       .    .              .             .       .              .           .    .    //
             .       .    .              .             .       .              .           .    .    , learntsize_factor((double)1/(double)3), learntsize_inc(1.1)
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .    // Parameters (experimental):
             .       .    .              .             .       .              .           .    .    //
             .       .    .              .             .       .              .           .    .    , learntsize_adjust_start_confl (100)
-- line 122 ----------------------------------------
-- line 126 ----------------------------------------
             .       .    .              .             .       .              .           .    .    //
             .       .    .              .             .       .              .           .    .    , solves(0), starts(0), decisions(0), rnd_decisions(0), propagations(0), conflicts(0), conflicts_VSIDS(0)
             .       .    .              .             .       .              .           .    .    , dec_vars(0), clauses_literals(0), learnts_literals(0), max_literals(0), tot_literals(0)
             .       .    .              .             .       .              .           .    .    , chrono_backtrack(0), non_chrono_backtrack(0)
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .    , ok                 (true)
             .       .    .              .             .       .              .           .    .    , cla_inc            (1)
             .       .    .              .             .       .              .           .    .    , var_inc            (1)
             1       0    0              0             0       0              0           0    0    , watches_bin        (WatcherDeleted(ca))
             .       .    .              .             .       .              .           .    .    , watches            (WatcherDeleted(ca))
             .       .    .              .             .       .              .           .    .    , qhead              (0)
             .       .    .              .             .       .              .           .    .    , simpDB_assigns     (-1)
             .       .    .              .             .       .              .           .    .    , simpDB_props       (0)
             .       .    .              .             .       .              .           .    .    , order_heap_CHB     (VarOrderLt(activity_CHB))
             .       .    .              .             .       .              .           .    .    , order_heap_VSIDS   (VarOrderLt(activity_VSIDS))
             .       .    .              .             .       .              .           .    .    , progress_estimate  (0)
             .       .    .              .             .       .              .           .    .    , remove_satisfied   (true)
-- line 142 ----------------------------------------
-- line 164 ----------------------------------------
             .       .    .              .             .       .              .           .    .    // simplifyAll adjust occasion
             .       .    .              .             .       .              .           .    .    , curSimplify(1)
             .       .    .              .             .       .              .           .    .    , nbconfbeforesimplify(1000)
             .       .    .              .             .       .              .           .    .    , incSimplify(1000)
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .    , my_var_decay       (0.6)
             .       .    .              .             .       .              .           .    .    , DISTANCE           (true)
             .       .    .              .             .       .              .           .    .    , var_iLevel_inc     (1)
            94       8    8             25             2       2             63           1    0    , order_heap_distance(VarOrderLt(activity_distance))
             .       .    .              .             .       .              .           .    .  
             4       0    0              3             0       0              0           0    0  {}
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  Solver::~Solver()
             .       .    .              .             .       .              .           .    .  {
             .       .    .              .             .       .              .           .    .  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  // simplify All
             .       .    .              .             .       .              .           .    .  //
             .       .    .              .             .       .              .           .    .  CRef Solver::simplePropagate()
    24,191,760       9    4              0             0       0     18,143,820      44,928    0  {
     3,023,970       0    0              0             0       0      3,023,970           0    0      CRef    confl = CRef_Undef;
     3,023,970       0    0              0             0       0      3,023,970           0    0      int     num_props = 0;
     6,047,940       0    0              0             0       0      3,023,970      42,692    0      watches.cleanAll();
     9,071,910      44   11      3,023,970            77       0      3,023,970           0    0      watches_bin.cleanAll();
    75,763,678       0    0     37,881,839           267       0              0           0    0      while (qhead < trail.size())
             .       .    .              .             .       .              .           .    .      {
   174,320,160       1    1     69,728,064     1,581,824       0     69,728,064           0    0          Lit            p = trail[qhead++];     // 'p' is enqueued fact to propagate.
             .       .    .              .             .       .              .           .    .          vec<Watcher>&  ws = watches[p];
             .       .    .              .             .       .              .           .    .          Watcher        *i, *j, *end;
    34,857,869       0    0     34,857,869             0       0              0           0    0          num_props++;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .          // First, Propagate binary clauses
             .       .    .              .             .       .              .           .    .          vec<Watcher>&  wbin = watches_bin[p];
             .       .    .              .             .       .              .           .    .  
   225,735,189       0    0     34,864,032    34,343,904       1              0           0    0          for (int k = 0; k<wbin.size(); k++)
             .       .    .              .             .       .              .           .    .          {
             .       .    .              .             .       .              .           .    .  
    67,524,644       0    0     43,702,725    12,402,523       3              0           0    0              Lit imp = wbin[k].blocker;
             .       .    .              .             .       .              .           .    .  
    67,524,644       0    0              0             0       0              0           0    0              if (value(imp) == l_False)
             .       .    .              .             .       .              .           .    .              {
        12,326       0    0          6,163             0       0          6,163           0    0                  return wbin[k].cref;
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .  
    67,512,318       7    6              0             0       0              0           0    0              if (value(imp) == l_Undef)
             .       .    .              .             .       .              .           .    .              {
    14,030,587       0    0     14,030,587             0       0              0           0    0                  simpleUncheckEnqueue(imp, wbin[k].cref);
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .          }
 7,041,327,861      36   10  3,417,645,030    25,883,814       0     67,622,971           0    0          for (i = j = (Watcher*)ws, end = i + ws.size(); i != end;)
             .       .    .              .             .       .              .           .    .          {
             .       .    .              .             .       .              .           .    .              // Try to avoid inspecting the clause:
 3,347,929,292      41   10  3,347,929,292   435,941,240       0              0           0    0              Lit blocker = i->blocker;
 6,695,858,584       0    0  3,347,929,292    34,745,153       0              0           0    0              if (value(blocker) == l_True)
             .       .    .              .             .       .              .           .    .              {
             .       .    .              .             .       .              .           .    .                  *j++ = *i++; continue;
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .              // Make sure the false literal is data[1]:
 4,242,845,222       0    0  2,121,422,611             0       0              0           0    0              CRef     cr = i->cref;
             .       .    .              .             .       .              .           .    .              Clause&  c = ca[cr];
             .       .    .              .             .       .              .           .    .              Lit      false_lit = ~p;
 6,364,267,833       0    0  2,121,422,611 2,027,099,224       0              0           0    0              if (c[0] == false_lit)
 2,371,945,398       0    0    790,648,466    47,038,785       0  1,581,296,932           0    0                  c[0] = c[1], c[1] = false_lit;
             .       .    .              .             .       .              .           .    .              assert(c[1] == false_lit);
             .       .    .              .             .       .              .           .    .              //  i++;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .              // If 0th watch is true, then clause is already satisfied.
             .       .    .              .             .       .              .           .    .              // However, 0th watch is not the blocker, make it blocker using a new watcher w
             .       .    .              .             .       .              .           .    .              // why not simply do i->blocker=first in this case?
             .       .    .              .             .       .              .           .    .              Lit     first = c[0];
             .       .    .              .             .       .              .           .    .              //  Watcher w     = Watcher(cr, first);
 5,312,673,014       0    0    534,913,896     3,457,635       0              0           0    0              if (first != blocker && value(first) == l_True)
             .       .    .              .             .       .              .           .    .              {
   180,750,357       0    0              0             0       0    180,750,357           0    0                  i->blocker = first;
 5,629,028,152       0    0  1,407,257,038             0       0  1,407,257,038   9,151,163    0                  *j++ = *i++; continue;
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .              // Look for new watch:
             .       .    .              .             .       .              .           .    .              //if (incremental)
             .       .    .              .             .       .              .           .    .              //{ // ----------------- INCREMENTAL MODE
             .       .    .              .             .       .              .           .    .              //	int choosenPos = -1;
             .       .    .              .             .       .              .           .    .              //	for (int k = 2; k < c.size(); k++)
             .       .    .              .             .       .              .           .    .              //	{
-- line 250 ----------------------------------------
-- line 274 ----------------------------------------
             .       .    .              .             .       .              .           .    .              //		Watcher w = Watcher(cr, first); i++;
             .       .    .              .             .       .              .           .    .              //		c[1] = c[choosenPos]; c[choosenPos] = false_lit;
             .       .    .              .             .       .              .           .    .              //		watches[~c[1]].push(w);
             .       .    .              .             .       .              .           .    .              //		goto NextClause;
             .       .    .              .             .       .              .           .    .              //	}
             .       .    .              .             .       .              .           .    .              //}
             .       .    .              .             .       .              .           .    .              else
             .       .    .              .             .       .              .           .    .              {  // ----------------- DEFAULT  MODE (NOT INCREMENTAL)
 6,286,910,030      45   12              0             0       0              0           0    0                  for (int k = 2; k < c.size(); k++)
             .       .    .              .             .       .              .           .    .                  {
             .       .    .              .             .       .              .           .    .  
11,667,826,478       0    0              0             0       0              0           0    0                      if (value(c[k]) != l_False)
             .       .    .              .             .       .              .           .    .                      {
             .       .    .              .             .       .              .           .    .                          // watcher i is abandonned using i++, because cr watches now ~c[k] instead of p
             .       .    .              .             .       .              .           .    .                          // the blocker is first in the watcher. However,
             .       .    .              .             .       .              .           .    .                          // the blocker in the corresponding watcher in ~first is not c[1]
             .       .    .              .             .       .              .           .    .                          Watcher w = Watcher(cr, first); i++;
 7,681,718,528       0    0  1,920,429,632             0       0  3,840,859,264           0    0                          c[1] = c[k]; c[k] = false_lit;
             .       .    .              .             .       .              .           .    .                          watches[~c[1]].push(w);
 1,920,429,632       0    0              0             0       0              0           0    0                          goto NextClause;
             .       .    .              .             .       .              .           .    .                      }
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .              // Did not find watch -- clause is unit under assignment:
    20,242,622       0    0              0             0       0     20,242,622           0    0              i->blocker = first;
    80,970,488       0    0     20,242,622             0       0     20,242,622     193,088    0              *j++ = *i++;
    40,485,244      45   11              0             0       0              0           0    0              if (value(first) == l_False)
             .       .    .              .             .       .              .           .    .              {
       857,098       6    1              0             0       0        128,919         190    0                  confl = cr;
       257,838      35   11        128,919             0       0        128,919       2,562    0                  qhead = trail.size();
             .       .    .              .             .       .              .           .    .                  // Copy the remaining watches:
    24,811,990       2    0        248,771        11,379       0              0           0    0                  while (i < end)
    12,028,305       0    0     12,028,305     1,495,450       0     12,028,305     121,097    0                      *j++ = *i++;
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .              else
             .       .    .              .             .       .              .           .    .              {
             .       .    .              .             .       .              .           .    .                  simpleUncheckEnqueue(first, cr);
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .  NextClause:;
             .       .    .              .             .       .              .           .    .          }
    65,530,204      45   14              0             0       0              0           0    0          ws.shrink(i - j);
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
     6,035,614       0    0      6,035,614     1,548,152       0              0           0    0      s_propagations += num_props;
             .       .    .              .             .       .              .           .    .  
     3,017,807       0    0      3,017,807             0       0              0           0    0      return confl;
 1,451,719,964      52   12     21,167,790     1,535,585       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  void Solver::simpleUncheckEnqueue(Lit p, CRef from){
             .       .    .              .             .       .              .           .    .      assert(value(p) == l_Undef);
    34,144,290       0    0              0             0       0     34,144,290           0    0      assigns[var(p)] = lbool(!sign(p)); // this makes a lbool object whose value is sign(p)
    74,336,520      45   12     37,168,260       573,289       0     37,168,260  33,926,501    0      vardata[var(p)].reason = from;
    23,137,673       0    0     23,137,673             0       0              0           0    0      trail.push_(p);
             .       .    .              .             .       .              .           .    .  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  void Solver::cancelUntilTrailRecord()
             .       .    .              .             .       .              .           .    .  {
    75,745,915       0    0        563,758         2,748       0              0           0    0      for (int c = trail.size() - 1; c >= trailRecord; c--)
             .       .    .              .             .       .              .           .    .      {
       281,879      45   11        281,879             0       0              0           0    0          Var x = var(trail[c]);
    38,013,897       0    0        281,879             0       0     37,168,260   1,270,553    0          assigns[x] = l_Undef;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      }
       281,879       0    0              0             0       0        281,879           0    0      qhead = trailRecord;
       563,758       0    0              0             0       0              0           0    0      trail.shrink(trail.size() - trailRecord);
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  void Solver::litsEnqueue(int cutP, Clause& c)
             .       .    .              .             .       .              .           .    .  {
             .       .    .              .             .       .              .           .    .      for (int i = cutP; i < c.size(); i++)
             .       .    .              .             .       .              .           .    .      {
             .       .    .              .             .       .              .           .    .          simpleUncheckEnqueue(~c[i]);
-- line 347 ----------------------------------------
-- line 348 ----------------------------------------
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  bool Solver::removed(CRef cr) {
             .       .    .              .             .       .              .           .    .      return ca[cr].mark() == 1;
             .       .    .              .             .       .              .           .    .  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  void Solver::simpleAnalyze(CRef confl, vec<Lit>& out_learnt, vec<CRef>& reason_clause, bool True_confl)
     3,070,441      43   12              0             0       0      1,674,786           0    0  {
       279,131       0    0              0             0       0              0           0    0      int pathC = 0;
       279,131       0    0              0             0       0              0           0    0      Lit p = lit_Undef;
       837,393       0    0        279,131             0       0              0           0    0      int index = trail.size() - 1;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      do{
    14,633,476      45   10              0             0       0              0           0    0          if (confl != CRef_Undef){
             .       .    .              .             .       .              .           .    .              reason_clause.push(confl);
             .       .    .              .             .       .              .           .    .              Clause& c = ca[confl];
             .       .    .              .             .       .              .           .    .              // Special case for binary clauses
             .       .    .              .             .       .              .           .    .              // The first one has to be SAT
    20,006,022      46   11              0             0       0              0           0    0              if (p != lit_Undef && c.size() == 2 && value(c[0]) == l_False) {
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .                  assert(value(c[1]) == l_True);
             .       .    .              .             .       .              .           .    .                  Lit tmp = c[0];
       582,822       0    0        194,274        10,010       0        388,548           0    0                  c[0] = c[1], c[1] = tmp;
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .              // if True_confl==true, then choose p begin with the 1th index of c;
    44,358,127       0    0      9,481,775       276,600       0              0           0    0              for (int j = (p == lit_Undef && True_confl == false) ? 0 : 1; j < c.size(); j++){
             .       .    .              .             .       .              .           .    .                  Lit q = c[j];
    25,692,766       0    0     12,846,383     1,568,523       0              0           0    0                  if (!seen[var(q)]){
     7,037,618       0    0              0             0       0      7,037,618           0    0                      seen[var(q)] = 1;
    21,112,854       0    0      7,037,618             0       0              0           0    0                      pathC++;
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .          else if (confl == CRef_Undef){
             .       .    .              .             .       .              .           .    .              out_learnt.push(~p);
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .          // if not break, while() will come to the index of trail blow 0, and fatal error occur;
    24,413,440      45   12      7,037,618             0       0              0           0    0          if (pathC == 0) break;
             .       .    .              .             .       .              .           .    .          // Select next clause to look at:
   240,350,899       0    0     80,116,970     7,993,646       0              0           0    0          while (!seen[var(trail[index--])]);
             .       .    .              .             .       .              .           .    .          // if the reason cr from the 0-level assigned var, we must break avoid move forth further;
             .       .    .              .             .       .              .           .    .          // but attention that maybe seen[x]=1 and never be clear. However makes no matter;
    14,075,236       0    0      7,037,618       276,036       0              0           0    0          if (trailRecord > index + 1) break;
             .       .    .              .             .       .              .           .    .          p = trail[index + 1];
             .       .    .              .             .       .              .           .    .          confl = reason(var(p));
     7,037,607       0    0              0             0       0      7,037,607           0    0          seen[var(p)] = 0;
     7,037,607       0    0              0             0       0              0           0    0          pathC--;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      } while (pathC >= 0);
     2,791,310      46   11      1,953,917         1,955       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  void Solver::simplifyLearnt(Clause& c)
     2,536,911      90   24              0             0       0      1,691,274      40,499    0  {
             .       .    .              .             .       .              .           .    .      ////
       281,879       0    0        281,879        49,532       0              0           0    0      original_length_record += c.size();
             .       .    .              .             .       .              .           .    .  
       563,758       0    0        281,879        39,916       0        281,879      61,894    0      trailRecord = trail.size();// record the start pointer
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      vec<Lit> falseLit;
             .       .    .              .             .       .              .           .    .      falseLit.clear();
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      //sort(&c[0], c.size(), VarOrderLevelLt(vardata));
             .       .    .              .             .       .              .           .    .  
       270,164      38    8              0             0       0              0           0    0      bool True_confl = false;
             .       .    .              .             .       .              .           .    .      int beforeSize, afterSize;
             .       .    .              .             .       .              .           .    .      beforeSize = c.size();
             .       .    .              .             .       .              .           .    .      int i, j;
             .       .    .              .             .       .              .           .    .      CRef confl;
             .       .    .              .             .       .              .           .    .  
    11,025,645      45   13              0             0       0              0           0    0      for (i = 0, j = 0; i < c.size(); i++){
     6,781,176       0    0              0             0       0              0           0    0          if (value(c[i]) == l_Undef){
             .       .    .              .             .       .              .           .    .              //printf("///@@@ uncheckedEnqueue:index = %d. l_Undef\n", i);
             .       .    .              .             .       .              .           .    .              simpleUncheckEnqueue(~c[i]);
    11,960,798       0    0      3,023,970             0       0      3,023,970      11,359    0              c[j++] = c[i];
     9,071,910       0    0              0             0       0      3,023,970       1,613    0              confl = simplePropagate();
     9,071,910      45   14      3,023,970     1,473,903       0              0           0    0              if (confl != CRef_Undef){
             .       .    .              .             .       .              .           .    .                  break;
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .          else{
       733,236       0    0              0             0       0              0           0    0              if (value(c[i]) == l_True){
             .       .    .              .             .       .              .           .    .                  //printf("///@@@ uncheckedEnqueue:index = %d. l_True\n", i);
       576,196      35   11        144,049             0       0        144,049       1,581    0                  c[j++] = c[i];
       144,049      26    7              0             0       0              0           0    0                  True_confl = true;
             .       .    .              .             .       .              .           .    .                  confl = reason(var(c[i]));
             .       .    .              .             .       .              .           .    .                  break;
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .              else{
             .       .    .              .             .       .              .           .    .                  //printf("///@@@ uncheckedEnqueue:index = %d. l_False\n", i);
             .       .    .              .             .       .              .           .    .                  falseLit.push(c[i]);
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .      c.shrink(c.size() - j);
             .       .    .              .             .       .              .           .    .      afterSize = c.size();
             .       .    .              .             .       .              .           .    .      //printf("\nbefore : %d, after : %d ", beforeSize, afterSize);
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      if (confl != CRef_Undef || True_confl == true){
       279,131       0    0              0             0       0              0           0    0          simp_learnt_clause.clear();
       279,131       0    0              0             0       0              0           0    0          simp_reason_clause.clear();
       558,262       0    0              0             0       0              0           0    0          if (True_confl == true){
             .       .    .              .             .       .              .           .    .              simp_learnt_clause.push(c.last());
             .       .    .              .             .       .              .           .    .          }
     1,953,917      19    4              0             0       0        279,131           0    0          simpleAnalyze(confl, simp_learnt_clause, simp_reason_clause, True_confl);
             .       .    .              .             .       .              .           .    .  
       837,393       0    0        279,131             0       0              0           0    0          if (simp_learnt_clause.size() < c.size()){
     2,191,446      45   12        943,485             0       0              0           0    0              for (i = 0; i < simp_learnt_clause.size(); i++){
     3,469,464       0    0        867,366            10       0        867,366      11,669    0                  c[i] = simp_learnt_clause[i];
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .              c.shrink(c.size() - i);
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      cancelUntilTrailRecord();
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      ////
       281,879       0    0        281,879             0       0              0           0    0      simplified_length_record += c.size();
             .       .    .              .             .       .              .           .    .  
     2,255,032       0    0      1,973,153       278,375       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  bool Solver::simplifyLearnt_x(vec<CRef>& learnts_x)
             .       .    .              .             .       .              .           .    .  {
             .       .    .              .             .       .              .           .    .      int beforeSize, afterSize;
             .       .    .              .             .       .              .           .    .      int learnts_x_size_before = learnts_x.size();
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      int ci, cj, li, lj;
             .       .    .              .             .       .              .           .    .      bool sat, false_lit;
-- line 476 ----------------------------------------
-- line 574 ----------------------------------------
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      //   printf("c nbLearnts_x %d / %d, nbSimplified: %d, nbSimplifing: %d\n",
             .       .    .              .             .       .              .           .    .      //          learnts_x_size_before, learnts_x.size(), nbSimplified, nbSimplifing);
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      return true;
             .       .    .              .             .       .              .           .    .  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  bool Solver::simplifyLearnt_core()
           495       0    0              0             0       0            270           0    0  {
             .       .    .              .             .       .              .           .    .      int beforeSize, afterSize;
             .       .    .              .             .       .              .           .    .      int learnts_core_size_before = learnts_core.size();
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      int ci, cj, li, lj;
             .       .    .              .             .       .              .           .    .      bool sat, false_lit;
             .       .    .              .             .       .              .           .    .      unsigned int nblevels;
             .       .    .              .             .       .              .           .    .      ////
             .       .    .              .             .       .              .           .    .      //printf("learnts_x size : %d\n", learnts_x.size());
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      ////
             .       .    .              .             .       .              .           .    .      int nbSimplified = 0;
             .       .    .              .             .       .              .           .    .      int nbSimplifing = 0;
             .       .    .              .             .       .              .           .    .  
     2,526,242      45   13             45             0       0              0           0    0      for (ci = 0, cj = 0; ci < learnts_core.size(); ci++){
     3,789,108      45   12      2,526,072        78,984     670              0           0    0          CRef cr = learnts_core[ci];
             .       .    .              .             .       .              .           .    .          Clause& c = ca[cr];
             .       .    .              .             .       .              .           .    .  
     2,526,072       0    0              0             0       0              0           0    0          if (removed(cr)) continue;
     2,526,072       0    0      1,263,036       153,416       0              0           0    0          else if (c.simplified()){
     2,470,372       0    0              0             0       0      1,235,186           0    0              learnts_core[cj++] = learnts_core[ci];
             .       .    .              .             .       .              .           .    .              ////
     3,705,578       0    0      1,235,186             0       0              0           0    0              nbSimplified++;
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .          else{
             .       .    .              .             .       .              .           .    .              int saved_size=c.size();
             .       .    .              .             .       .              .           .    .              //         if (drup_file){
             .       .    .              .             .       .              .           .    .              //                 add_oc.clear();
             .       .    .              .             .       .              .           .    .              //                 for (int i = 0; i < c.size(); i++) add_oc.push(c[i]); }
             .       .    .              .             .       .              .           .    .              ////
             .       .    .              .             .       .              .           .    .              nbSimplifing++;
        27,849       0    0              0             0       0              0           0    0              sat = false_lit = false;
       525,208       0    0              0             0       0              0           0    0              for (int i = 0; i < c.size(); i++){
       525,220       0    0              0             0       0              0           0    0                  if (value(c[i]) == l_True){
             .       .    .              .             .       .              .           .    .                      sat = true;
             .       .    .              .             .       .              .           .    .                      break;
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .                  else if (value(c[i]) == l_False){
       580,904      45    9              0             0       0         27,849           0    0                      false_lit = true;
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .              if (sat){
            49       2    1             14             0       0             14           0    0                  removeClause(cr);
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .              else{
       167,058       0    0              0             0       0         83,529           0    0                  detachClause(cr, true);
             .       .    .              .             .       .              .           .    .  
       111,372      45   12         55,686             0       0              0           0    0                  if (false_lit){
         2,704       0    0            128             2       0              0           0    0                      for (li = lj = 0; li < c.size(); li++){
         2,128       0    0              0             0       0              0           0    0                          if (value(c[li]) != l_False){
         2,985       0    0              0             0       0            995           0    0                              c[lj++] = c[li];
             .       .    .              .             .       .              .           .    .                          }
             .       .    .              .             .       .              .           .    .                      }
             .       .    .              .             .       .              .           .    .                      c.shrink(li - lj);
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .                  beforeSize = c.size();
             .       .    .              .             .       .              .           .    .                  assert(c.size() > 1);
             .       .    .              .             .       .              .           .    .                  // simplify a learnt clause c
       111,372       0    0              0             0       0         55,686           0    0                  simplifyLearnt(c);
             .       .    .              .             .       .              .           .    .                  assert(c.size() > 0);
             .       .    .              .             .       .              .           .    .                  afterSize = c.size();
             .       .    .              .             .       .              .           .    .                  
       138,212       0    0         83,529        26,732       0              0           0    0                  if(drup_file && saved_size !=c.size()){
             .       .    .              .             .       .              .           .    .  #ifdef BIN_DRUP
             .       .    .              .             .       .              .           .    .                      binDRUP('a', c , drup_file);
             .       .    .              .             .       .              .           .    .                      //                    binDRUP('d', add_oc, drup_file);
             .       .    .              .             .       .              .           .    .  #else
             .       .    .              .             .       .              .           .    .                      for (int i = 0; i < c.size(); i++)
             .       .    .              .             .       .              .           .    .                          fprintf(drup_file, "%i ", (var(c[i]) + 1) * (-2 * sign(c[i]) + 1));
             .       .    .              .             .       .              .           .    .                      fprintf(drup_file, "0\n");
             .       .    .              .             .       .              .           .    .  
-- line 653 ----------------------------------------
-- line 655 ----------------------------------------
             .       .    .              .             .       .              .           .    .                      //                    for (int i = 0; i < add_oc.size(); i++)
             .       .    .              .             .       .              .           .    .                      //                        fprintf(drup_file, "%i ", (var(add_oc[i]) + 1) * (-2 * sign(add_oc[i]) + 1));
             .       .    .              .             .       .              .           .    .                      //                    fprintf(drup_file, "0\n");
             .       .    .              .             .       .              .           .    .  #endif
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .                  //printf("beforeSize: %2d, afterSize: %2d\n", beforeSize, afterSize);
             .       .    .              .             .       .              .           .    .  
        55,686       0    0              0             0       0              0           0    0                  if (c.size() == 1){
             .       .    .              .             .       .              .           .    .                      // when unit clause occur, enqueue and propagate
            15       2    2              3             0       0              3           0    0                      uncheckedEnqueue(c[0]);
             9       0    0              3             0       0              0           0    0                      if (propagate() != CRef_Undef){
             .       .    .              .             .       .              .           .    .                          ok = false;
             .       .    .              .             .       .              .           .    .                          return false;
             .       .    .              .             .       .              .           .    .                      }
             .       .    .              .             .       .              .           .    .                      // delete the clause memory in logic
             .       .    .              .             .       .              .           .    .                      c.mark(1);
             .       .    .              .             .       .              .           .    .                      ca.free(cr);
             .       .    .              .             .       .              .           .    .  //#ifdef BIN_DRUP
             .       .    .              .             .       .              .           .    .  //                    binDRUP('d', c, drup_file);
-- line 674 ----------------------------------------
-- line 675 ----------------------------------------
             .       .    .              .             .       .              .           .    .  //#else
             .       .    .              .             .       .              .           .    .  //                    fprintf(drup_file, "d ");
             .       .    .              .             .       .              .           .    .  //                    for (int i = 0; i < c.size(); i++)
             .       .    .              .             .       .              .           .    .  //                        fprintf(drup_file, "%i ", (var(c[i]) + 1) * (-2 * sign(c[i]) + 1));
             .       .    .              .             .       .              .           .    .  //                    fprintf(drup_file, "0\n");
             .       .    .              .             .       .              .           .    .  //#endif
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .                  else{
        83,520       0    0              0             0       0         27,840           0    0                      attachClause(cr);
       167,040      45   12         83,520        53,401       0         27,840         139    0                      learnts_core[cj++] = learnts_core[ci];
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .                      nblevels = computeLBD(c);
        55,680      38   11              0             0       0              0           0    0                      if (nblevels < c.lbd()){
             .       .    .              .             .       .              .           .    .                          //printf("lbd-before: %d, lbd-after: %d\n", c.lbd(), nblevels);
             .       .    .              .             .       .              .           .    .                          c.set_lbd(nblevels);
             .       .    .              .             .       .              .           .    .                      }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .                      c.setSimplified(true);
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .      }
            45       0    0              0             0       0              0           0    0      learnts_core.shrink(ci - cj);
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      //    printf("c nbLearnts_core %d / %d, nbSimplified: %d, nbSimplifing: %d\n",
             .       .    .              .             .       .              .           .    .      //           learnts_core_size_before, learnts_core.size(), nbSimplified, nbSimplifing);
             .       .    .              .             .       .              .           .    .  
            45      30   10              0             0       0              0           0    0      return true;
             .       .    .              .             .       .              .           .    .  
           360       0    0            315            45       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
    18,755,352       2    2              0             0       0     12,503,568           0    0  int Solver::is_duplicate(std::vector<uint32_t>&c){
     4,167,856       0    0              0             0       0      4,167,856       5,132    0     auto time_point_0 = std::chrono::high_resolution_clock::now();
     2,083,928       0    0      2,083,928     1,175,499       0              0           0    0      dupl_db_size++;
     5,161,151     147    8      1,171,015             0       0              0           0    0      int res = 0;    
             .       .    .              .             .       .              .           .    .      
     4,167,856       0    0      4,167,856             0       0              0           0    0      int sz = c.size();
             .       .    .              .             .       .              .           .    .      std::vector<uint32_t> tmp(c);    
             .       .    .              .             .       .              .           .    .      sort(tmp.begin(),tmp.end());
             .       .    .              .             .       .              .           .    .      
     2,083,928 367,597    2              0             0       0      2,083,928           0    0      uint64_t hash = 0;    
             .       .    .              .             .       .              .           .    .      
    93,764,486   4,819    4              0             0       0      2,083,928           0    0      for (int i =0; i<sz; i++) {
   385,465,310       0    0     38,546,531             0       0              0           0    0          hash ^= tmp[i] + 0x9e3779b9 + (hash << 6) + (hash>> 2);     
             .       .    .              .             .       .              .           .    .      }    
             .       .    .              .             .       .              .           .    .      
     2,083,928       0    0              0             0       0      2,083,928           0    0      int32_t head = tmp[0];
             .       .    .              .             .       .              .           .    .      auto it0 = ht.find(head);
    10,415,548       0    0      2,083,922             0       0              0           0    0      if (it0 != ht.end()){
             .       .    .              .             .       .              .           .    .          auto it1=ht[head].find(sz);
     4,165,136       0    0              0             0       0              0           0    0          if (it1 != ht[head].end()){
     2,071,017       0    0              0             0       0      2,071,017           0    0              auto it2 = ht[head][sz].find(hash);
     6,213,051       0    0              0             0       0      2,071,017           0    0              if (it2 != ht[head][sz].end()){
       266,580       0    0         88,860        25,313     302         88,860           0    0                  it2->second++;
        88,860       0    0              0             0       0              0           0    0                  res = it2->second;            
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .              else{
     1,982,157       0    0              0             0       0      1,982,157           0    0                  ht[head][sz][hash]=1;
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .          else{            
        23,102       1    1              0             0       0         11,551           0    0              ht[head][sz][hash]=1;
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .      }else{        
     1,996,428     994    5              0             0       0      1,996,428         370    0          ht[head][sz][hash]=1;
             .       .    .              .             .       .              .           .    .      } 
     2,083,928      18    1              0             0       0      2,083,928           0    0      auto time_point_1 = std::chrono::high_resolution_clock::now();
             .       .    .              .             .       .              .           .    .      duptime += std::chrono::duration_cast<std::chrono::microseconds>(time_point_1-time_point_0);    
             .       .    .              .             .       .              .           .    .      return res;
    18,755,352       0    0     14,587,496         3,497       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  bool Solver::simplifyLearnt_tier2()
           495      45   13              0             0       0            270           0    0  {
             .       .    .              .             .       .              .           .    .      int beforeSize, afterSize;
             .       .    .              .             .       .              .           .    .      int learnts_tier2_size_before = learnts_tier2.size();
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      int ci, cj, li, lj;
             .       .    .              .             .       .              .           .    .      bool sat, false_lit;
             .       .    .              .             .       .              .           .    .      unsigned int nblevels;
             .       .    .              .             .       .              .           .    .      ////
             .       .    .              .             .       .              .           .    .      //printf("learnts_x size : %d\n", learnts_x.size());
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      ////
             .       .    .              .             .       .              .           .    .      int nbSimplified = 0;
             .       .    .              .             .       .              .           .    .      int nbSimplifing = 0;
             .       .    .              .             .       .              .           .    .  
       759,963      34    2             45             0       0              0           0    0      for (ci = 0, cj = 0; ci < learnts_tier2.size(); ci++){
     1,139,742       0    0        759,828        64,448       0              0           0    0          CRef cr = learnts_tier2[ci];
             .       .    .              .             .       .              .           .    .          Clause& c = ca[cr];
             .       .    .              .             .       .              .           .    .  
       759,828       0    0              0             0       0              0           0    0          if (removed(cr)) continue;
       759,826       0    0        379,913        45,842       0              0           0    0          else if (c.simplified()){
       251,486       0    0              0             0       0        125,743         985    0              learnts_tier2[cj++] = learnts_tier2[ci];
             .       .    .              .             .       .              .           .    .              ////
       885,571       0    0        125,743             0       0              0           0    0              nbSimplified++;
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .          else{
             .       .    .              .             .       .              .           .    .              int saved_size=c.size();
             .       .    .              .             .       .              .           .    .              //            if (drup_file){
             .       .    .              .             .       .              .           .    .              //                    add_oc.clear();
             .       .    .              .             .       .              .           .    .              //                    for (int i = 0; i < c.size(); i++) add_oc.push(c[i]); }
             .       .    .              .             .       .              .           .    .              ////
             .       .    .              .             .       .              .           .    .              nbSimplifing++;
       254,160       0    0              0             0       0              0           0    0              sat = false_lit = false;
     8,113,828       0    0              0             0       0              0           0    0              for (int i = 0; i < c.size(); i++){
     8,114,076       0    0              0             0       0              0           0    0                  if (value(c[i]) == l_True){
             .       .    .              .             .       .              .           .    .                      sat = true;
             .       .    .              .             .       .              .           .    .                      break;
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .                  else if (value(c[i]) == l_False){
     8,622,128      14    6              0             0       0        254,160           0    0                      false_lit = true;
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .              if (sat){
           670       0    0            134             0       0            134           0    0                  removeClause(cr);
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .              else{
     1,524,216      32    9              0             0       0        762,108          43    0                  detachClause(cr, true);
             .       .    .              .             .       .              .           .    .  
     1,016,144       0    0        508,072        39,234       0              0           0    0                  if (false_lit){
        86,717      10    7          2,662           164       0              0           0    0                      for (li = lj = 0; li < c.size(); li++){
        74,738       0    0              0             0       0              0           0    0                          if (value(c[li]) != l_False){
       108,045       0    0              0             0       0         36,015           0    0                              c[lj++] = c[li];
             .       .    .              .             .       .              .           .    .                          }
             .       .    .              .             .       .              .           .    .                      }
             .       .    .              .             .       .              .           .    .                      c.shrink(li - lj);
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .                  beforeSize = c.size();
             .       .    .              .             .       .              .           .    .                  assert(c.size() > 1);
             .       .    .              .             .       .              .           .    .                  // simplify a learnt clause c
     1,270,180       0    0              0             0       0        762,108           0    0                  simplifyLearnt(c);
             .       .    .              .             .       .              .           .    .                  assert(c.size() > 0);
             .       .    .              .             .       .              .           .    .                  afterSize = c.size();
             .       .    .              .             .       .              .           .    .                  
     1,016,144      45   15        508,072       252,452       0              0           0    0                  if(drup_file && saved_size!=c.size()){
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  #ifdef BIN_DRUP
             .       .    .              .             .       .              .           .    .                      binDRUP('a', c , drup_file);
             .       .    .              .             .       .              .           .    .                      //                    binDRUP('d', add_oc, drup_file);
             .       .    .              .             .       .              .           .    .  #else
             .       .    .              .             .       .              .           .    .                      for (int i = 0; i < c.size(); i++)
             .       .    .              .             .       .              .           .    .                          fprintf(drup_file, "%i ", (var(c[i]) + 1) * (-2 * sign(c[i]) + 1));
             .       .    .              .             .       .              .           .    .                      fprintf(drup_file, "0\n");
-- line 819 ----------------------------------------
-- line 822 ----------------------------------------
             .       .    .              .             .       .              .           .    .                      //                    for (int i = 0; i < add_oc.size(); i++)
             .       .    .              .             .       .              .           .    .                      //                        fprintf(drup_file, "%i ", (var(add_oc[i]) + 1) * (-2 * sign(add_oc[i]) + 1));
             .       .    .              .             .       .              .           .    .                      //                    fprintf(drup_file, "0\n");
             .       .    .              .             .       .              .           .    .  #endif
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .                  //printf("beforeSize: %2d, afterSize: %2d\n", beforeSize, afterSize);
             .       .    .              .             .       .              .           .    .  
       508,072       0    0              0             0       0              0           0    0                  if (c.size() == 1){
             .       .    .              .             .       .              .           .    .                      // when unit clause occur, enqueue and propagate
             .       .    .              .             .       .              .           .    .                      uncheckedEnqueue(c[0]);
             .       .    .              .             .       .              .           .    .                      if (propagate() != CRef_Undef){
             .       .    .              .             .       .              .           .    .                          ok = false;
             .       .    .              .             .       .              .           .    .                          return false;
             .       .    .              .             .       .              .           .    .                      }
             .       .    .              .             .       .              .           .    .                      // delete the clause memory in logic
             .       .    .              .             .       .              .           .    .                      c.mark(1);
-- line 838 ----------------------------------------
-- line 845 ----------------------------------------
             .       .    .              .             .       .              .           .    .  //                        fprintf(drup_file, "%i ", (var(c[i]) + 1) * (-2 * sign(c[i]) + 1));
             .       .    .              .             .       .              .           .    .  //                    fprintf(drup_file, "0\n");
             .       .    .              .             .       .              .           .    .  //#endif
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .                  else{
             .       .    .              .             .       .              .           .    .                      
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .                      nblevels = computeLBD(c);
       508,072       0    0              0             0       0              0           0    0                      if (nblevels < c.lbd()){
             .       .    .              .             .       .              .           .    .                          //printf("lbd-before: %d, lbd-after: %d\n", c.lbd(), nblevels);
             .       .    .              .             .       .              .           .    .                          c.set_lbd(nblevels);
             .       .    .              .             .       .              .           .    .                      }
             .       .    .              .             .       .              .           .    .                       //duplicate learnts 
             .       .    .              .             .       .              .           .    .                      int id = 0;                    
             .       .    .              .             .       .              .           .    .                      
             .       .    .              .             .       .              .           .    .                      std::vector<uint32_t> tmp;
    10,369,103       0    0      7,594,814             0       0              0           0    0                      for (int i = 0; i < c.size(); i++)                           
     5,401,924       0    0      2,700,962             0       0      2,700,962           0    0                          tmp.push_back(c[i].x);
     1,016,144       0    0              0             0       0        254,036           0    0                      id = is_duplicate(tmp);
             .       .    .              .             .       .              .           .    .                       
             .       .    .              .             .       .              .           .    .                                          
             .       .    .              .             .       .              .           .    .                      //duplicate learnts 
             .       .    .              .             .       .              .           .    .  
     1,016,144       6    4        254,036             0       0              0           0    0                      if (id < min_number_of_learnts_copies+2){
       629,472      11    7              0             0       0        209,824           0    0                          attachClause(cr);
     1,045,174       0    0        629,472       418,541       0        209,824     181,703    0                          learnts_tier2[cj++] = learnts_tier2[ci];                    
       839,296      44   12        209,824             0       0              0           0    0                          if (id == min_number_of_learnts_copies+1){                            
           812       2    2            812             0       0              0           0    0                              duplicates_added_minimization++;                                  
             .       .    .              .             .       .              .           .    .                          }
       418,024       0    0        209,012       208,725       0              0           0    0                          if ((c.lbd() <= core_lbd_cut)||(id == min_number_of_learnts_copies+1)){
             .       .    .              .             .       .              .           .    .                          //if (id == min_number_of_learnts_copies+1){
             .       .    .              .             .       .              .           .    .                              cj--;
             2       2    2              0             0       0              0           0    0                              learnts_core.push(cr);
             .       .    .              .             .       .              .           .    .                              c.mark(CORE);
             .       .    .              .             .       .              .           .    .                          }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .                          c.setSimplified(true);
             .       .    .              .             .       .              .           .    .                      }
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .      }
            45      31   14              0             0       0              0           0    0      learnts_tier2.shrink(ci - cj);
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      //    printf("c nbLearnts_tier2 %d / %d, nbSimplified: %d, nbSimplifing: %d\n",
             .       .    .              .             .       .              .           .    .      //           learnts_tier2_size_before, learnts_tier2.size(), nbSimplified, nbSimplifing);
             .       .    .              .             .       .              .           .    .  
            45       0    0              0             0       0              0           0    0      return true;
             .       .    .              .             .       .              .           .    .  
           360       0    0            315            45       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  bool Solver::simplifyAll()
           225      12    7              0             0       0            135           0    0  {
             .       .    .              .             .       .              .           .    .      ////
            90       0    0              0             0       0             45           0    0      simplified_length_record = original_length_record = 0;
             .       .    .              .             .       .              .           .    .  
           180       0    0             45            44       0              0           0    0      if (!ok || propagate() != CRef_Undef)
             .       .    .              .             .       .              .           .    .          return ok = false;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      //// cleanLearnts(also can delete these code), here just for analyzing
             .       .    .              .             .       .              .           .    .      //if (local_learnts_dirty) cleanLearnts(learnts_local, LOCAL);
             .       .    .              .             .       .              .           .    .      //if (tier2_learnts_dirty) cleanLearnts(learnts_tier2, TIER2);
             .       .    .              .             .       .              .           .    .      //local_learnts_dirty = tier2_learnts_dirty = false;
             .       .    .              .             .       .              .           .    .  
           180       0    0              0             0       0             45           0    0      if (!simplifyLearnt_core()) return ok = false;
           180      45   13              0             0       0             45           0    0      if (!simplifyLearnt_tier2()) return ok = false;
             .       .    .              .             .       .              .           .    .      //if (!simplifyLearnt_x(learnts_local)) return ok = false;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      checkGarbage();
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      ////
             .       .    .              .             .       .              .           .    .      //  printf("c size_reduce_ratio     : %4.2f%%\n",
             .       .    .              .             .       .              .           .    .      //         original_length_record == 0 ? 0 : (original_length_record - simplified_length_record) * 100 / (double)original_length_record);
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      return true;
           225       0    0            180            45       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  //=================================================================================================
             .       .    .              .             .       .              .           .    .  // Minor methods:
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  // Creates a new SAT variable in the solver. If 'decision' is cleared, variable will not be
             .       .    .              .             .       .              .           .    .  // used as a decision variable (NOTE! This has effects on the meaning of a SATISFIABLE result).
             .       .    .              .             .       .              .           .    .  //
             .       .    .              .             .       .              .           .    .  Var Solver::newVar(bool sign, bool dvar)
        22,750       1    1              0             0       0         18,200           0    0  {
             .       .    .              .             .       .              .           .    .      int v = nVars();
             .       .    .              .             .       .              .           .    .      watches_bin.init(mkLit(v, false));
             .       .    .              .             .       .              .           .    .      watches_bin.init(mkLit(v, true ));
             .       .    .              .             .       .              .           .    .      watches  .init(mkLit(v, false));
             .       .    .              .             .       .              .           .    .      watches  .init(mkLit(v, true ));
            17       1    1              0             0       0              0           0    0      assigns  .push(l_Undef);
            17       1    1              0             0       0              0           0    0      vardata  .push(mkVarData(CRef_Undef, 0));
            17       0    0              0             0       0              0           0    0      activity_CHB  .push(0);
         6,859       0    0          2,275            30       0             17           0    0      activity_VSIDS.push(rnd_init_act ? drand(random_seed) * 0.00001 : 0);
             .       .    .              .             .       .              .           .    .  
            17       1    1              0             0       0              0           0    0      picked.push(0);
            17       0    0              0             0       0              0           0    0      conflicted.push(0);
            17       0    0              0             0       0              0           0    0      almost_conflicted.push(0);
             .       .    .              .             .       .              .           .    .  #ifdef ANTI_EXPLORATION
            17       0    0              0             0       0              0           0    0      canceled.push(0);
             .       .    .              .             .       .              .           .    .  #endif
             .       .    .              .             .       .              .           .    .  
            17       0    0              0             0       0              0           0    0      seen     .push(0);
            17       0    0              0             0       0              0           0    0      seen2    .push(0);
            17       0    0              0             0       0              0           0    0      polarity .push(sign);
            17       0    0              0             0       0              0           0    0      decision .push();
        11,375       1    1              0             0       0          4,550          67    0      trail    .capacity(v+1);
             .       .    .              .             .       .              .           .    .      setDecisionVar(v, dvar);
             .       .    .              .             .       .              .           .    .  
            17       0    0              0             0       0              0           0    0      activity_distance.push(0);
            17       1    1              0             0       0              0           0    0      var_iLevel.push(0);
            17       0    0              0             0       0              0           0    0      var_iLevel_tmp.push(0);
            17       0    0              0             0       0              0           0    0      pathCs.push(0);
             .       .    .              .             .       .              .           .    .      return v;
        20,475       0    0         15,925            13       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  bool Solver::addClause_(vec<Lit>& ps)
        91,462       2    1              0             0       0         78,396           0    0  {
             .       .    .              .             .       .              .           .    .      assert(decisionLevel() == 0);
        39,198       1    1         13,066             0       0              0           0    0      if (!ok) return false;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // Check if clause is satisfied and remove false/duplicate literals:
             .       .    .              .             .       .              .           .    .      sort(ps);
             .       .    .              .             .       .              .           .    .      Lit p; int i, j;
             .       .    .              .             .       .              .           .    .  
        26,132       0    0         13,066            20       0              0           0    0      if (drup_file){
             .       .    .              .             .       .              .           .    .          add_oc.clear();
        13,066       2    1         13,066             0       0              0           0    0          for (int i = 0; i < ps.size(); i++) add_oc.push(ps[i]); }
             .       .    .              .             .       .              .           .    .  
       135,191       0    0              0             0       0              0           0    0      for (i = j = 0, p = lit_Undef; i < ps.size(); i++)
       234,032       0    0         36,354             0       0              0           0    0          if (value(ps[i]) == l_True || ps[i] == ~p)
             .       .    .              .             .       .              .           .    .              return true;
       145,412       4    2              0             0       0              0           0    0          else if (value(ps[i]) != l_False && ps[i] != p)
       109,059       0    0         36,353             0       0         36,353           0    0              ps[j++] = p = ps[i];
       104,520       0    0         13,065             0       0              0           0    0      ps.shrink(i - j);
             .       .    .              .             .       .              .           .    .  
        26,130       2    1              0             0       0              0           0    0      if (drup_file && i != j){
             .       .    .              .             .       .              .           .    .  #ifdef BIN_DRUP
             .       .    .              .             .       .              .           .    .          binDRUP('a', ps, drup_file);
        13,065       0    0         13,065             0       0              0           0    0          binDRUP('d', add_oc, drup_file);
             .       .    .              .             .       .              .           .    .  #else
             .       .    .              .             .       .              .           .    .          for (int i = 0; i < ps.size(); i++)
             .       .    .              .             .       .              .           .    .              fprintf(drup_file, "%i ", (var(ps[i]) + 1) * (-2 * sign(ps[i]) + 1));
             .       .    .              .             .       .              .           .    .          fprintf(drup_file, "0\n");
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .          fprintf(drup_file, "d ");
             .       .    .              .             .       .              .           .    .          for (int i = 0; i < add_oc.size(); i++)
             .       .    .              .             .       .              .           .    .              fprintf(drup_file, "%i ", (var(add_oc[i]) + 1) * (-2 * sign(add_oc[i]) + 1));
             .       .    .              .             .       .              .           .    .          fprintf(drup_file, "0\n");
             .       .    .              .             .       .              .           .    .  #endif
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .      
        26,130       0    0              0             0       0              0           0    0      if (ps.size() == 0)
             .       .    .              .             .       .              .           .    .          return ok = false;
        26,130       2    1              0             0       0              0           0    0      else if (ps.size() == 1){
             6       0    0              2             0       0              1           0    0          uncheckedEnqueue(ps[0]);
             4       0    0              0             0       0              1           0    0          return ok = (propagate() == CRef_Undef);
             .       .    .              .             .       .              .           .    .      }else{
        13,064       0    0              0             0       0         13,064           0    0          CRef cr = ca.alloc(ps, false);
             .       .    .              .             .       .              .           .    .          //auto ca_size=ca.size();
             .       .    .              .             .       .              .           .    .          //printf("ca size:%d\n",ca_size);
        39,192       0    0              0             0       0         13,064           0    0          clauses.push(cr);
        39,192       2    1         13,064             0       0         13,064           0    0          attachClause(cr);
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
        13,064       0    0              0             0       0              0           0    0      return true;
       143,726       0    0         91,462             2       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
    25,277,690       6    4              0             0       0     15,166,614           4    0  void Solver::attachClause(CRef cr) {
             .       .    .              .             .       .              .           .    .      const Clause& c = ca[cr];
             .       .    .              .             .       .              .           .    .      assert(c.size() > 1);
    10,105,380       0    0      2,527,769           179       0              0           0    0      OccLists<Lit, vec<Watcher>, WatcherDeleted>& ws = c.size() == 2 ? watches_bin : watches;
             .       .    .              .             .       .              .           .    .      ws[~c[0]].push(Watcher(cr, c[1]));
             .       .    .              .             .       .              .           .    .      ws[~c[1]].push(Watcher(cr, c[0]));
     7,570,220       0    0      5,042,451     1,411,250       0              0           0    0      if (c.learnt()) learnts_literals += c.size();
    20,235,239       2    0     17,707,470             8       0              0           0    0      else            clauses_literals += c.size(); }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
    14,745,624     206    4              0             0       0      9,830,416         611    0  void Solver::detachClause(CRef cr, bool strict) {
             .       .    .              .             .       .              .           .    .      const Clause& c = ca[cr];
             .       .    .              .             .       .              .           .    .      assert(c.size() > 1);
     9,830,416       0    0              0             0       0              0           0    0      OccLists<Lit, vec<Watcher>, WatcherDeleted>& ws = c.size() == 2 ? watches_bin : watches;
             .       .    .              .             .       .              .           .    .      
     9,830,416       0    0              0             0       0              0           0    0      if (strict){
             .       .    .              .             .       .              .           .    .          remove(ws[~c[0]], Watcher(cr, c[1]));
             .       .    .              .             .       .              .           .    .          remove(ws[~c[1]], Watcher(cr, c[0]));
             .       .    .              .             .       .              .           .    .      }else{
             .       .    .              .             .       .              .           .    .          // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
             .       .    .              .             .       .              .           .    .          ws.smudge(~c[0]);
             .       .    .              .             .       .              .           .    .          ws.smudge(~c[1]);
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
     7,362,797      11    0      4,905,193        99,034      32              0           0    0      if (c.learnt()) learnts_literals -= c.size();
    14,755,639       0    0     12,298,035        41,395       0              0           0    0      else            clauses_literals -= c.size(); }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
    17,405,616     376    8              0             0       0      8,702,808         564    0  void Solver::removeClause(CRef cr) {
             .       .    .              .             .       .              .           .    .      Clause& c = ca[cr];
             .       .    .              .             .       .              .           .    .  
     6,527,106       0    0      2,175,702           648       0              0           0    0      if (drup_file){
             .       .    .              .             .       .              .           .    .          if (c.mark() != 1){
             .       .    .              .             .       .              .           .    .  #ifdef BIN_DRUP
             .       .    .              .             .       .              .           .    .              binDRUP('d', c, drup_file);
             .       .    .              .             .       .              .           .    .  #else
             .       .    .              .             .       .              .           .    .              fprintf(drup_file, "d ");
             .       .    .              .             .       .              .           .    .              for (int i = 0; i < c.size(); i++)
             .       .    .              .             .       .              .           .    .                  fprintf(drup_file, "%i ", (var(c[i]) + 1) * (-2 * sign(c[i]) + 1));
             .       .    .              .             .       .              .           .    .              fprintf(drup_file, "0\n");
             .       .    .              .             .       .              .           .    .  #endif
             .       .    .              .             .       .              .           .    .          }else
             .       .    .              .             .       .              .           .    .              printf("c Bug. I don't expect this to happen.\n");
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
     8,702,808     155    4              0             0       0      2,175,702           0    0      detachClause(cr);
             .       .    .              .             .       .              .           .    .      // Don't leave pointers to free'd memory!
             .       .    .              .             .       .              .           .    .      if (locked(c)){
            64       0    0             16             0       0              0           0    0          Lit implied = c.size() != 2 ? c[0] : (value(c[0]) == l_True ? c[0] : c[1]);
            32       0    0              0             0       0             16           0    0          vardata[var(implied)].reason = CRef_Undef; }
             .       .    .              .             .       .              .           .    .      c.mark(1);
             .       .    .              .             .       .              .           .    .      ca.free(cr);
    13,054,212       0    0     10,878,510             0       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  bool Solver::satisfied(const Clause& c) const {
    20,219,144      33   18              0             0       0              0           0    0      for (int i = 0; i < c.size(); i++)
    21,945,126       0    0      9,359,039         4,988       0              0           0    0          if (value(c[i]) == l_True)
             1       1    1              0             0       0              0           0    0              return true;
        13,527       0    0          6,764             0       0              0           0    0      return false; }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  // Revert to the state at given level (keeping all assignment at 'level' but not beyond).
             .       .    .              .             .       .              .           .    .  //
    20,537,424   2,229    7              0             0       0     13,691,616           0    0  void Solver::cancelUntil(int bLevel) {
             .       .    .              .             .       .              .           .    .  	
     9,137,543       6    2          4,899             0       0      2,281,936           0    0      if (decisionLevel() > bLevel){
             .       .    .              .             .       .              .           .    .  #ifdef PRINT_OUT
             .       .    .              .             .       .              .           .    .  		std::cout << "bt " << bLevel << "\n";
             .       .    .              .             .       .              .           .    .  #endif				
     4,563,872       0    0              0             0       0      2,281,936           0    0  		add_tmp.clear();
 1,888,775,264   4,213    3    382,775,312     3,373,147       0              0           0    0          for (int c = trail.size()-1; c >= trail_lim[bLevel]; c--)
             .       .    .              .             .       .              .           .    .          {
             .       .    .              .             .       .              .           .    .              Var      x  = var(trail[c]);
             .       .    .              .             .       .              .           .    .  
   742,731,264       0    0    371,365,632   207,214,166       0              0           0    0  			if (level(x) <= bLevel)
             .       .    .              .             .       .              .           .    .  			{
             .       .    .              .             .       .              .           .    .  				add_tmp.push(trail[c]);
             .       .    .              .             .       .              .           .    .  			}
             .       .    .              .             .       .              .           .    .  			else
             .       .    .              .             .       .              .           .    .  			{
   742,731,264       0    0    371,365,632        19,943       0              0           0    0  				 if (!VSIDS){
   608,939,964       0    0    405,959,976        75,312       0              0           0    0  					uint32_t age = conflicts - picked[x];
   405,959,976       0    0    202,979,988   108,647,284       0              0           0    0  					if (age > 0){
 2,028,652,050      72    7    811,460,820   206,373,262       0              0           0    0  						double adjusted_reward = ((double) (conflicted[x] + almost_conflicted[x])) / ((double) age);
   202,865,205       0    0    202,865,205   109,455,978       6              0           0    0  						double old_activity = activity_CHB[x];
 1,420,056,435      28    6    405,730,410     1,336,919       0    202,865,205           0    0  						activity_CHB[x] = step_size * adjusted_reward + ((1 - step_size) * old_activity);
             .       .    .              .             .       .              .           .    .  						if (order_heap_CHB.inHeap(x)){
 1,199,642,028      38    5              0             0       0    599,821,014          83    0  							if (activity_CHB[x] > old_activity)
             .       .    .              .             .       .              .           .    .  								order_heap_CHB.decrease(x);
             .       .    .              .             .       .              .           .    .  							else
             .       .    .              .             .       .              .           .    .  								order_heap_CHB.increase(x);
             .       .    .              .             .       .              .           .    .  						}
             .       .    .              .             .       .              .           .    .  					}
             .       .    .              .             .       .              .           .    .  #ifdef ANTI_EXPLORATION
   405,959,976       0    0    202,979,988             0       0    202,979,988 110,644,060    0  					canceled[x] = conflicts;
             .       .    .              .             .       .              .           .    .  #endif
             .       .    .              .             .       .              .           .    .  				}
             .       .    .              .             .       .              .           .    .  				
   742,731,264      86   21    371,365,632             0       0    371,365,632  47,858,033    0  				assigns [x] = l_Undef;
             .       .    .              .             .       .              .           .    .  #ifdef PRINT_OUT
             .       .    .              .             .       .              .           .    .  				std::cout << "undo " << x << "\n";
             .       .    .              .             .       .              .           .    .  #endif				
   742,731,264       0    0    371,365,632             0       0              0           0    0  	            if (phase_saving > 1 || (phase_saving == 1) && c > trail_lim.last())
   371,365,632       0    0    371,365,632             0       0              0           0    0  					polarity[x] = sign(trail[c]);
             .       .    .              .             .       .              .           .    .  				insertVarOrder(x);
             .       .    .              .             .       .              .           .    .  			}
             .       .    .              .             .       .              .           .    .          }
     2,281,936       0    0              0             0       0      2,281,936           0    0          qhead = trail_lim[bLevel];
     4,563,872       0    0              0             0       0              0           0    0          trail.shrink(trail.size() - trail_lim[bLevel]);
     6,845,808       0    0      2,281,936             0       0              0           0    0          trail_lim.shrink(trail_lim.size() - bLevel);
     6,845,808       1    1      2,281,936             0       0              0           0    0          for (int nLitId = add_tmp.size() - 1; nLitId >= 0; --nLitId)
             .       .    .              .             .       .              .           .    .  		{
             .       .    .              .             .       .              .           .    .  			trail.push_(add_tmp[nLitId]);
             .       .    .              .             .       .              .           .    .  		}
             .       .    .              .             .       .              .           .    .  		
             .       .    .              .             .       .              .           .    .  		add_tmp.clear();
    18,255,488       0    0     15,973,552       990,744       0              0           0    0      } }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  //=================================================================================================
             .       .    .              .             .       .              .           .    .  // Major methods:
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  Lit Solver::pickBranchLit()
    20,960,032     173    5              0             0       0     15,720,024         233    0  {
             .       .    .              .             .       .              .           .    .      Var next = var_Undef;
             .       .    .              .             .       .              .           .    .      //    Heap<VarOrderLt>& order_heap = VSIDS ? order_heap_VSIDS : order_heap_CHB;
    17,880,198     143    9      5,122,674     1,970,924       0              0           0    0      Heap<VarOrderLt>& order_heap = DISTANCE ? order_heap_distance : ((!VSIDS)? order_heap_CHB:order_heap_VSIDS);
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // Random decision:
             .       .    .              .             .       .              .           .    .      /*if (drand(random_seed) < random_var_freq && !order_heap.empty()){
             .       .    .              .             .       .              .           .    .          next = order_heap[irand(random_seed,order_heap.size())];
             .       .    .              .             .       .              .           .    .          if (value(next) == l_Undef && decision[next])
             .       .    .              .             .       .              .           .    .              rnd_decisions++; }*/
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // Activity based decision:
    46,318,924     100    1     20,539,458     2,622,833      12              0           0    0      while (next == var_Undef || value(next) != l_Undef || !decision[next])
    12,679,446       0    0              0             0       0              0           0    0          if (order_heap.empty())
             .       .    .              .             .       .              .           .    .              return lit_Undef;
             .       .    .              .             .       .              .           .    .          else{
             .       .    .              .             .       .              .           .    .  #ifdef ANTI_EXPLORATION
    12,679,446       0    0      6,339,723             6       0              0           0    0              if (!VSIDS){
             .       .    .              .             .       .              .           .    .                  Var v = order_heap_CHB[0];
     6,045,744       0    0      6,045,744        92,108       0              0           0    0                  uint32_t age = conflicts - canceled[v];
     8,849,842       0    0      3,984,353     2,837,703     427        440,568           0    0                  while (age > 0){
             .       .    .              .             .       .              .           .    .                      double decay = pow(0.95, age);
     1,922,962       0    0        961,481        41,745       2        961,481           0    0                      activity_CHB[v] *= decay;
             .       .    .              .             .       .              .           .    .                      if (order_heap_CHB.inHeap(v))
             .       .    .              .             .       .              .           .    .                          order_heap_CHB.increase(v);
     2,884,443       0    0      1,922,962             0       0        961,481           0    0                      canceled[v] = conflicts;
             .       .    .              .             .       .              .           .    .                      v = order_heap_CHB[0];
             .       .    .              .             .       .              .           .    .                      age = conflicts - canceled[v];
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .  #endif
             .       .    .              .             .       .              .           .    .              next = order_heap.removeMin();
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .  
    10,480,016       0    0      5,240,008     2,345,191       3              0           0    0      return mkLit(next, polarity[next]);
    23,580,036       0    0     18,340,028         2,286       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  inline Solver::ConflictData Solver::FindConflictLevel(CRef cind)
             .       .    .              .             .       .              .           .    .  {
             .       .    .              .             .       .              .           .    .  	ConflictData data;
             .       .    .              .             .       .              .           .    .  	Clause& conflCls = ca[cind];
             .       .    .              .             .       .              .           .    .  	data.nHighestLevel = level(var(conflCls[0]));
     9,108,156       0    0      4,554,078        58,679       0              0           0    0  	if (data.nHighestLevel == decisionLevel() && level(var(conflCls[1])) == decisionLevel())
             .       .    .              .             .       .              .           .    .  	{
             .       .    .              .             .       .              .           .    .  		return data;
             .       .    .              .             .       .              .           .    .  	}
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  	int highestId = 0;
             .       .    .              .             .       .              .           .    .      data.bOnlyOneLitFromHighest = true;
             .       .    .              .             .       .              .           .    .  	// find the largest decision level in the clause
             .       .    .              .             .       .              .           .    .  	for (int nLitId = 1; nLitId < conflCls.size(); ++nLitId)
-- line 1190 ----------------------------------------
-- line 1231 ----------------------------------------
             .       .    .              .             .       .              .           .    .  |  
             .       .    .              .             .       .              .           .    .  |    Post-conditions:
             .       .    .              .             .       .              .           .    .  |      * 'out_learnt[0]' is the asserting literal at level 'out_btlevel'.
             .       .    .              .             .       .              .           .    .  |      * If out_learnt.size() > 1 then 'out_learnt[1]' has the greatest decision level of the 
             .       .    .              .             .       .              .           .    .  |        rest of literals. There may be others from the same level though.
             .       .    .              .             .       .              .           .    .  |  
             .       .    .              .             .       .              .           .    .  |________________________________________________________________________________________________@*/
             .       .    .              .             .       .              .           .    .  void Solver::analyze(CRef confl, vec<Lit>& out_learnt, int& out_btlevel, int& out_lbd)
    29,601,494      57   15              0             0       0     20,493,342           0    0  {
     2,277,038       0    0              0             0       0      2,277,038           0    0      int pathC = 0;
     2,277,038       0    0              0             0       0              0           0    0      Lit p     = lit_Undef;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // Generate conflict clause:
             .       .    .              .             .       .              .           .    .      //
             .       .    .              .             .       .              .           .    .      out_learnt.push();      // (leave room for the asserting literal)
     4,554,076       0    0      2,277,038           288       0              0           0    0      int index   = trail.size() - 1;
     2,277,038       0    0      2,277,038             0       0              0           0    0      int nDecisionLevel = level(var(ca[confl][0]));
             .       .    .              .             .       .              .           .    .      assert(nDecisionLevel == level(var(ca[confl][0])));
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      do{
             .       .    .              .             .       .              .           .    .          assert(confl != CRef_Undef); // (otherwise should be UIP)
             .       .    .              .             .       .              .           .    .          Clause& c = ca[confl];
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .          // For binary clauses, we don't rearrange literals in propagate(), so check and make sure the first is an implied lit.
   380,718,864       0    0              0             0       0              0           0    0          if (p != lit_Undef && c.size() == 2 && value(c[0]) == l_False){
             .       .    .              .             .       .              .           .    .              assert(value(c[1]) == l_True);
             .       .    .              .             .       .              .           .    .              Lit tmp = c[0];
     1,314,240       0    0        438,080        26,058       0        876,160           0    0              c[0] = c[1], c[1] = tmp; }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .          // Update LBD if improved.
   303,305,030       1    1     13,257,008             0       0              0           0    0          if (c.learnt() && c.mark() != CORE){
             .       .    .              .             .       .              .           .    .              int lbd = computeLBD(c);
    15,498,958       0    0              0             0       0              0           0    0              if (lbd < c.lbd()){
     1,223,162       0    0              0             0       0              0           0    0                  if (c.lbd() <= 30) c.removable(false); // Protect once from reduction.
             .       .    .              .             .       .              .           .    .                  c.set_lbd(lbd);
     1,223,162       0    0        611,581       435,062       0              0           0    0                  if (lbd <= core_lbd_cut){
            20       1    0              0             0       0             10           0    0                      learnts_core.push(confl);
             .       .    .              .             .       .              .           .    .                      c.mark(CORE);
     1,882,184       0    0        294,150             0       0              0           0    0                  }else if (lbd <= 6 && c.mark() == LOCAL){
             .       .    .              .             .       .              .           .    .                      // Bug: 'cr' may already be in 'learnts_tier2', e.g., if 'cr' was demoted from TIER2
             .       .    .              .             .       .              .           .    .                      // to LOCAL previously and if that 'cr' is not cleaned from 'learnts_tier2' yet.
    16,427,282       7    5              0             0       0      4,798,084   2,218,086    0                      learnts_tier2.push(confl);
             .       .    .              .             .       .              .           .    .                      c.mark(TIER2); }
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .  
    15,153,526       0    0      7,576,763             0       0              0           0    0              if (c.mark() == TIER2)
    17,326,948      48   10      4,331,737        20,523       0      4,331,737     514,911   20                  c.touched() = conflicts;
     6,734,060       0    0      3,367,030             0       0              0           0    0              else if (c.mark() == LOCAL)
             .       .    .              .             .       .              .           .    .                  claBumpActivity(c);
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .  
 1,803,797,157      13    4    502,856,239             5       0     92,569,522          49    0          for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
   410,286,717       0    0    410,286,717    25,897,697       2              0           0    0              Lit q = c[j];
             .       .    .              .             .       .              .           .    .  
 1,456,709,868       1    1    622,332,195   124,614,450      10              0           0    0              if (!seen[var(q)] && level(var(q)) > 0){
   423,823,098       0    0    211,911,549         2,455       0              0           0    0                  if (VSIDS){
             .       .    .              .             .       .              .           .    .                      varBumpActivity(var(q), .5);
            16       0    0              0             0       0              8           0    0                      add_tmp.push(q);
             .       .    .              .             .       .              .           .    .                  }else
   130,863,700       0    0    130,863,700    59,088,740       0              0           0    0                      conflicted[var(q)]++;
   211,911,549       0    0              0             0       0    211,911,549           0    0                  seen[var(q)] = 1;
   423,823,098       0    0    211,911,549             0       0              0           0    0                  if (level(var(q)) >= nDecisionLevel){
   185,139,044       0    0    185,139,044             0       0              0           0    0                      pathC++;
             .       .    .              .             .       .              .           .    .                  }else
             .       .    .              .             .       .              .           .    .                      out_learnt.push(q);
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .          
             .       .    .              .             .       .              .           .    .          // Select next clause to look at:
             .       .    .              .             .       .              .           .    .  		do {
 1,997,290,434       0    0    817,430,078    56,872,928      10              0           0    0  			while (!seen[var(trail[index--])]);
             .       .    .              .             .       .              .           .    .  			p  = trail[index+1];
   185,139,044       0    0     92,569,522     1,845,950       0              0           0    0  		} while (level(var(p)) < nDecisionLevel);
             .       .    .              .             .       .              .           .    .  		
   185,139,044       0    0     92,569,522             0       0     92,569,522          31    0          confl = reason(var(p));
    92,569,522       0    0              0             0       0     92,569,522           0    0          seen[var(p)] = 0;
   185,139,044       0    0    185,139,044             0       0              0           0    0          pathC--;
             .       .    .              .             .       .              .           .    .  
   546,308,980       0    0    180,584,968           611       0              0           0    0      }while (pathC > 0);
     2,277,038       0    0      2,277,038            76       0              0           0    0      out_learnt[0] = ~p;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // Simplify conflict clause:
             .       .    .              .             .       .              .           .    .      //
             .       .    .              .             .       .              .           .    .      int i, j;
     4,554,076       0    0              0             0       0      2,277,038           0    0      out_learnt.copyTo(analyze_toclear);
     6,831,114       0    0      2,277,038             3       0              0           0    0      if (ccmin_mode == 2){
     2,277,018     418    6              0             0       0              0           0    0          uint32_t abstract_level = 0;
   243,238,130     438    5              0             0       0              0           0    0          for (i = 1; i < out_learnt.size(); i++)
   123,896,063       0    0      2,277,018             0       0              0           0    0              abstract_level |= abstractLevel(var(out_learnt[i])); // (maintain an abstraction of levels involved in conflict)
             .       .    .              .             .       .              .           .    .  
   858,164,369      55    5    355,749,063            34       0      2,277,018           0    0          for (i = j = 1; i < out_learnt.size(); i++)
   800,103,884      42    7    147,659,877     3,149,454       0    100,956,826           0    0              if (reason(var(out_learnt[i])) == CRef_Undef || !litRedundant(out_learnt[i], abstract_level))
   140,109,153      11    1     46,703,051            11       0     46,703,051       6,654    0                  out_learnt[j++] = out_learnt[i];
             .       .    .              .             .       .              .           .    .          
             .       .    .              .             .       .              .           .    .      }else if (ccmin_mode == 1){
             .       .    .              .             .       .              .           .    .          for (i = j = 1; i < out_learnt.size(); i++){
             .       .    .              .             .       .              .           .    .              Var x = var(out_learnt[i]);
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .              if (reason(x) == CRef_Undef)
             .       .    .              .             .       .              .           .    .                  out_learnt[j++] = out_learnt[i];
             .       .    .              .             .       .              .           .    .              else{
-- line 1331 ----------------------------------------
-- line 1334 ----------------------------------------
             .       .    .              .             .       .              .           .    .                      if (!seen[var(c[k])] && level(var(c[k])) > 0){
             .       .    .              .             .       .              .           .    .                          out_learnt[j++] = out_learnt[i];
             .       .    .              .             .       .              .           .    .                          break; }
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .      }else
             .       .    .              .             .       .              .           .    .          i = j = out_learnt.size();
             .       .    .              .             .       .              .           .    .  
     4,554,076       0    0      2,277,038     2,244,243       0              0           0    0      max_literals += out_learnt.size();
    62,605,862       2    1     15,082,206             0       0              0           0    0      out_learnt.shrink(i - j);
     2,277,038      79    1      2,277,038             0       0              0           0    0      tot_literals += out_learnt.size();
             .       .    .              .             .       .              .           .    .  
     4,554,076       0    0      2,277,038       156,514       0      2,277,038           0    0      out_lbd = computeLBD(out_learnt);
    25,571,430   4,582   19     11,555,420             0       0              0           0    0      if (out_lbd <= 6 && out_learnt.size() <= 30) // Try further minimization?
     1,192,170   1,903    3        170,310             0       0        340,620           0    0          if (binResMinimize(out_learnt))
        10,317       0    0          3,439             0       0          3,439           0    0              out_lbd = computeLBD(out_learnt); // Recompute LBD if minimized.
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // Find correct backtrack level:
             .       .    .              .             .       .              .           .    .      //
     4,540,834       0    0              0             0       0              0           0    0      if (out_learnt.size() == 1)
            60       0    0             20             0       0             20           0    0          out_btlevel = 0;
             .       .    .              .             .       .              .           .    .      else{
     4,553,594       0    0              0             0       0              0           0    0          int max_i = 1;
             .       .    .              .             .       .              .           .    .          // Find the first literal assigned at the next-highest level:
   182,826,496       0    0              0             0       0              0           0    0          for (int i = 2; i < out_learnt.size(); i++)
   149,147,590       0    0     44,422,266             0       0              0           0    0              if (level(var(out_learnt[i])) > level(var(out_learnt[max_i])))
             .       .    .              .             .       .              .           .    .                  max_i = i;
             .       .    .              .             .       .              .           .    .          // Swap-in this literal at index 1:
             .       .    .              .             .       .              .           .    .          Lit p             = out_learnt[max_i];
     4,554,036       1    1      2,277,018             0       0      2,277,018           0    0          out_learnt[max_i] = out_learnt[1];
     2,277,018       0    0              0             0       0      2,277,018           0    0          out_learnt[1]     = p;
     4,554,036       0    0      2,277,018             0       0      2,277,018           0    0          out_btlevel       = level(var(p));
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
     4,554,076     185   14      2,277,038       133,820       0              0           0    0      if (VSIDS){
   284,622,788   7,180   13     84,380,387       361,812       0              0           0    0          for (int i = 0; i < add_tmp.size(); i++){
             .       .    .              .             .       .              .           .    .              Var v = var(add_tmp[i]);
   243,143,547       0    0     81,047,849    10,096,258       0              0           0    0              if (level(v) >= out_btlevel - 1)
             .       .    .              .             .       .              .           .    .                  varBumpActivity(v, 1);
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .          add_tmp.clear();
             .       .    .              .             .       .              .           .    .      }else{
     2,332,384       0    0      1,166,192             0       0      1,166,192       5,440    0          seen[var(p)] = true;
    90,647,581       0    0      1,166,192             0       0              0           0    0          for(int i = out_learnt.size() - 1; i >= 0; i--){
             .       .    .              .             .       .              .           .    .              Var v = var(out_learnt[i]);
             .       .    .              .             .       .              .           .    .              CRef rea = reason(v);
    51,879,646       0    0              0             0       0              0           0    0              if (rea != CRef_Undef){
             .       .    .              .             .       .              .           .    .                  const Clause& reaC = ca[rea];
   227,094,918       0    0              0             0       0              0           0    0                  for (int i = 0; i < reaC.size(); i++){
             .       .    .              .             .       .              .           .    .                      Lit l = reaC[i];
   167,761,442       0    0     83,880,721       611,005       0              0           0    0                      if (!seen[var(l)]){
    25,294,427       0    0              0             0       0     25,294,427           0    0                          seen[var(l)] = true;
    25,294,427       0    0     25,294,427    17,713,557       0              0           0    0                          almost_conflicted[var(l)]++;
             .       .    .              .             .       .              .           .    .                          analyze_toclear.push(l); } } } } }
             .       .    .              .             .       .              .           .    .  
   801,886,054   1,631    1    397,527,470             0       0    197,625,216   3,416,118    0      for (int j = 0; j < analyze_toclear.size(); j++) seen[var(analyze_toclear[j])] = 0;    // ('seen[]' is now cleared)
    18,216,304       0    0     15,939,266       985,363       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  // Try further learnt clause minimization by means of binary clause resolution.
             .       .    .              .             .       .              .           .    .  bool Solver::binResMinimize(vec<Lit>& out_learnt)
       361,680       0    0              0             0       0        289,344         128    0  {
             .       .    .              .             .       .              .           .    .      // Preparation: remember which false variables we have in 'out_learnt'.
       510,930      22   11        170,310             0       0        170,310           0    0      counter++;
     5,096,646       0    0        340,620             0       0              0           0    0      for (int i = 1; i < out_learnt.size(); i++)
     2,037,847       0    0        170,290             0       0      1,867,557   1,386,183  620          seen2[var(out_learnt[i])] = counter;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // Get the list of binary clauses containing 'out_learnt[0]'.
             .       .    .              .             .       .              .           .    .      const vec<Watcher>& ws = watches_bin[~out_learnt[0]];
             .       .    .              .             .       .              .           .    .  
        72,336       0    0              0             0       0              0           0    0      int to_remove = 0;
     2,406,478       4    3        170,310       143,398       0          3,439           0    0      for (int i = 0; i < ws.size(); i++){
       967,541       0    0        967,541       151,462       0              0           0    0          Lit the_other = ws[i].blocker;
             .       .    .              .             .       .              .           .    .          // Does 'the_other' appear negatively in 'out_learnt'?
     3,877,698      12    5      1,870,280       570,965     206              0           0    0          if (seen2[var(the_other)] == counter && value(the_other) == l_True){
         3,767       0    0              0             0       0              0           0    0              to_remove++;
        11,301       0    0              0             0       0          3,767           0    0              seen2[var(the_other)] = counter - 1; // Remember to remove this variable.
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // Shrink.
       217,008      16    3              0             0       0              0           0    0      if (to_remove > 0){
         3,439       0    0              0             0       0              0           0    0          int last = out_learnt.size() - 1;
       361,234      87   11          3,439             0       0              0           0    0          for (int i = 1; i < out_learnt.size() - to_remove; i++)
       100,376       0    0         50,188             0       0              0           0    0              if (seen2[var(out_learnt[i])] != counter)
        17,860       0    0          7,144             0       0          3,572           0    0                  out_learnt[i--] = out_learnt[last--];
             .       .    .              .             .       .              .           .    .          out_learnt.shrink(to_remove);
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .      return to_remove != 0;
       459,654       2    1        459,654             0       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  // Check if 'p' can be removed. 'abstract_levels' is used to abort early if the algorithm is
             .       .    .              .             .       .              .           .    .  // visiting literals at levels that cannot be removed later.
             .       .    .              .             .       .              .           .    .  bool Solver::litRedundant(Lit p, uint32_t abstract_levels)
 1,009,568,260   4,254    2              0             0       0    605,740,956   1,630,617    0  {
   201,913,652       0    0              0             0       0    100,956,826           0    0      analyze_stack.clear(); analyze_stack.push(p);
   302,870,478       0    0    201,913,652             0       0    100,956,826           0    0      int top = analyze_toclear.size();
   536,931,534       0    0              0             0       0              0           0    0      while (analyze_stack.size() > 0){
             .       .    .              .             .       .              .           .    .          assert(reason(var(analyze_stack.last())) != CRef_Undef);
             .       .    .              .             .       .              .           .    .          Clause& c = ca[reason(var(analyze_stack.last()))]; analyze_stack.pop();
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .          // Special handling for binary clauses like in 'analyze()'.
   509,224,742      54   11              0             0       0              0           0    0          if (c.size() == 2 && value(c[0]) == l_False){
             .       .    .              .             .       .              .           .    .              assert(value(c[1]) == l_True);
             .       .    .              .             .       .              .           .    .              Lit tmp = c[0];
       454,464       0    0        151,488         9,346       1        302,976           0    0              c[0] = c[1], c[1] = tmp; }
             .       .    .              .             .       .              .           .    .  
 1,150,088,766       0    0              0             0       0              0           0    0          for (int i = 1; i < c.size(); i++){
   466,321,022      46   11    466,321,022    40,159,396       2              0           0    0              Lit p  = c[i];
 1,713,005,542       0    0    932,642,044     5,181,872       2              0           0    0              if (!seen[var(p)] && level(var(p)) > 0){
   575,447,948       0    0    156,831,687             0       0              0           0    0                  if (reason(var(p)) != CRef_Undef && (abstractLevel(var(p)) & abstract_levels) != 0){
   128,513,837       0    0              0             0       0    128,513,837           0    0                      seen[var(p)] = 1;
             .       .    .              .             .       .              .           .    .                      analyze_stack.push(p);
             5       0    0              0             0       0              0           0    0                      analyze_toclear.push(p);
             .       .    .              .             .       .              .           .    .                  }else{
   409,570,316   1,312    4    134,437,813             8       0              0           0    0                      for (int j = top; j < analyze_toclear.size(); j++)
   136,750,148       0    0     58,948,035             0       0     77,802,113          13    0                          seen[var(analyze_toclear[j])] = 0;
    56,635,700      47    1     28,317,850             0       0              0           0    0                      analyze_toclear.shrink(analyze_toclear.size() - top);
    28,317,850       0    0              0             0       0              0           0    0                      return false;
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
   145,277,952       0    0              0             0       0              0           0    0      return true;
   807,654,608      21    1    706,697,782           171       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  /*_________________________________________________________________________________________________
             .       .    .              .             .       .              .           .    .  |
             .       .    .              .             .       .              .           .    .  |  analyzeFinal : (p : Lit)  ->  [void]
             .       .    .              .             .       .              .           .    .  |  
             .       .    .              .             .       .              .           .    .  |  Description:
             .       .    .              .             .       .              .           .    .  |    Specialized analysis procedure to express the final conflict in terms of assumptions.
-- line 1468 ----------------------------------------
-- line 1495 ----------------------------------------
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      seen[var(p)] = 0;
             .       .    .              .             .       .              .           .    .  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  void Solver::uncheckedEnqueue(Lit p, int level, CRef from)
 3,713,660,700       4    2              0             0       0  1,856,830,350           0    0  {
             .       .    .              .             .       .              .           .    .      assert(value(p) == l_Undef);
             .       .    .              .             .       .              .           .    .      Var x = var(p);
   742,732,140       0    0    371,366,070     2,908,098       0              0           0    0      if (!VSIDS){
   608,939,973       0    0    405,959,982     1,514,601       0    202,979,991 148,972,130  522          picked[x] = conflicts;
   405,959,982       0    0    202,979,991             0       0    202,979,991 148,288,432  574          conflicted[x] = 0;
   405,959,982       1    1    202,979,991             0       0    202,979,991 148,921,702  423          almost_conflicted[x] = 0;
             .       .    .              .             .       .              .           .    .  #ifdef ANTI_EXPLORATION
   202,979,991       0    0    202,979,991             0       0              0           0    0          uint32_t age = conflicts - canceled[var(p)];
   405,959,982       0    0    202,979,991   147,788,981     136              0           0    0          if (age > 0){
             .       .    .              .             .       .              .           .    .              double decay = pow(0.95, age);
    89,482,676       0    0     44,741,338    38,410,455       0     44,741,338           0    0              activity_CHB[var(p)] *= decay;
             .       .    .              .             .       .              .           .    .              if (order_heap_CHB.inHeap(var(p)))
    44,741,338       0    0              0             0       0              0           0    0                  order_heap_CHB.increase(var(p));
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .  #endif
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
   371,366,070       1    0    371,366,070         1,930       0              0           0    0      assigns[x] = lbool(!sign(p));
   742,732,140       0    0              0             0       0    742,732,140 282,966,791  195      vardata[x] = mkVarData(from, level);
   371,366,070       2    1    371,366,070             0       0              0           0    0      trail.push_(p);
 2,599,562,490       0    0  2,228,196,420             0       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  unsigned number_watch_changed_total=0;
             .       .    .              .             .       .              .           .    .  unsigned number_clause_read_total=0;
             .       .    .              .             .       .              .           .    .  unsigned times_only_access_watch=0;
             .       .    .              .             .       .              .           .    .  /*_________________________________________________________________________________________________
             .       .    .              .             .       .              .           .    .  |
             .       .    .              .             .       .              .           .    .  |  propagate : [void]  ->  [Clause*]
             .       .    .              .             .       .              .           .    .  |  
-- line 1532 ----------------------------------------
-- line 1533 ----------------------------------------
             .       .    .              .             .       .              .           .    .  |  Description:
             .       .    .              .             .       .              .           .    .  |    Propagates all enqueued facts. If a conflict arises, the conflicting clause is returned,
             .       .    .              .             .       .              .           .    .  |    otherwise CRef_Undef.
             .       .    .              .             .       .              .           .    .  |  
             .       .    .              .             .       .              .           .    .  |    Post-conditions:
             .       .    .              .             .       .              .           .    .  |      * the propagation queue is empty, even if there was a conflict.
             .       .    .              .             .       .              .           .    .  |________________________________________________________________________________________________@*/
             .       .    .              .             .       .              .           .    .  CRef Solver::propagate_()
    39,255,272       6    4              0             0       0     29,441,454           0    0  {
             .       .    .              .             .       .              .           .    .      //auto start_time=std::chrono::steady_clock::now();
     4,906,909       0    0              0             0       0      4,906,909           0    0      CRef    confl     = CRef_Undef;
     4,906,909       0    0              0             0       0      4,906,909          16    0      int     num_props = 0;
     9,813,818       0    0              0             0       0      4,906,909      17,011    0      watches.cleanAll();
     9,813,818       4    2              0             0       0      4,906,909           0    0      watches_bin.cleanAll();
             .       .    .              .             .       .              .           .    .      
 1,211,068,667       1    1    884,120,890     1,043,773       1              0           0    0      while (qhead < trail.size()){
 1,602,861,540       0    0    641,144,616    10,004,281       0    320,572,308           0    0          Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
             .       .    .              .             .       .              .           .    .          int currLevel = level(var(p));
             .       .    .              .             .       .              .           .    .          vec<Watcher>&  ws  = watches[p];
             .       .    .              .             .       .              .           .    .          //std::cout<<"size of ws: "<<watches.size()<<"\n";
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .          Watcher        *i, *j, *end;
   553,811,638       0    0    553,811,638     2,615,075       0              0           0    0          num_props++;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .          vec<Watcher>& ws_bin = watches_bin[p];  // Propagate binary clauses first.
             .       .    .              .             .       .              .           .    .          //std::cout<<"size of ws_bin: "<<watches_bin.size()<<"\n";
 1,685,073,132       2    1    320,572,308   313,492,716     391              0           0    0          for (int k = 0; k < ws_bin.size(); k++){
   304,431,276       0    0    304,431,276   106,330,600     101              0           0    0              Lit the_other = ws_bin[k].blocker;
23,110,776,697       0    0 22,217,712,854             0       0              0           0    0              if (value(the_other) == l_False){
       153,748       0    0         76,874             0       0         76,874           0    0                  confl = ws_bin[k].cref;
             .       .    .              .             .       .              .           .    .                  //auto end_time=std::chrono::steady_clock::now();
             .       .    .              .             .       .              .           .    .                  //auto duration=end_time-start_time;
             .       .    .              .             .       .              .           .    .  #ifdef LOOSE_PROP_STAT
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .                  return confl;
             .       .    .              .             .       .              .           .    .  #else
             .       .    .              .             .       .              .           .    .                  goto ExitProp;
             .       .    .              .             .       .              .           .    .  #endif
   419,078,680       3    1              0             0       0              0           0    0              }else if(value(the_other) == l_Undef)
             .       .    .              .             .       .              .           .    .              {
   274,651,210       1    0    164,790,726             0       0     54,930,242           0    0                  uncheckedEnqueue(the_other, currLevel, ws_bin[k].cref);
             .       .    .              .             .       .              .           .    .  #ifdef  PRINT_OUT                
             .       .    .              .             .       .              .           .    .                  std::cout << "i " << the_other << " l " << currLevel << "\n";
             .       .    .              .             .       .              .           .    .  #endif                
             .       .    .              .             .       .              .           .    .  			}
             .       .    .              .             .       .              .           .    .          }
   640,990,868       0    0    640,990,868   252,630,624     402              0           0    0          total_Watchers+=ws.size();
   320,495,434       0    0    320,495,434             0       0              0           0    0          total_indexs++;//number of rounds
             .       .    .              .             .       .              .           .    .          //int count=0;
   317,001,799       0    0              0             0       0              0           0    0          bool no_clause_access=true;
   317,001,799       0    0              0             0       0    317,001,799           0    0          bool no_implication_added=true;
   317,001,799       0    0              0             0       0    317,001,799           0    0          bool no_change_other_watch=true;
55,005,281,753       6    4 26,863,396,826             0       0    320,495,434           0    0          for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
             .       .    .              .             .       .              .           .    .              // Try to avoid inspecting the clause:
             .       .    .              .             .       .              .           .    .              //count++;
26,542,901,392       1    1 26,542,901,392 3,567,620,631  17,067              0           0    0              Lit blocker = i->blocker;
53,085,802,784       0    0 26,542,901,392     1,820,926       0              0           0    0              total_access_watches++;
53,085,802,784       0    0 26,542,901,392   116,789,335       0              0           0    0              if (value(blocker) == l_True){
             .       .    .              .             .       .              .           .    .                  
84,499,472,116       0    0 21,124,868,029             0       0 21,124,868,029   5,546,561    0                  *j++ = *i++; continue; }//no clause accessed
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .              // Make sure the false literal is data[1]:
 5,430,465,333       0    0      2,046,361           679       0              0           0    0              no_clause_access=false;
16,254,100,089       2    2 10,836,066,726     1,729,413       1  5,418,033,363           0    0              total_clause_access_times++;
10,836,066,726       0    0  5,418,033,363             0       0              0           0    0              CRef     cr        = i->cref;
             .       .    .              .             .       .              .           .    .              //std::cout<<"cr: "<<cr<<"\n";
             .       .    .              .             .       .              .           .    .              Clause&  c         = ca[cr];
             .       .    .              .             .       .              .           .    .              Lit      false_lit = ~p;
 5,418,033,363       0    0  5,418,033,363             0       0              0           0    0              total_clause_access_size+=2;
16,254,100,089       0    0 10,836,066,726 5,051,216,034  37,696              0           0    0              if (c[0] == false_lit)
 9,780,150,936       0    0  4,890,075,468   140,532,381   1,418  4,890,075,468           0    0                  c[0] = c[1], c[1] = false_lit;
             .       .    .              .             .       .              .           .    .              assert(c[1] == false_lit);
             .       .    .              .             .       .              .           .    .              i++;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .              // If 0th watch is true, then clause is already satisfied.
             .       .    .              .             .       .              .           .    .              Lit     first = c[0];
             .       .    .              .             .       .              .           .    .              Watcher w     = Watcher(cr, first);
13,702,643,388       0    0  1,433,288,331     7,393,637       0              0           0    0              if (first != blocker && value(first) == l_True){
 3,278,534,475       0    0              0             0       0  2,185,689,650   1,611,633    0                  *j++ = w; continue; }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .              // Look for new watch:
28,527,254,311       1    1              0             0       0              0           0    0              for (int k = 2; k < c.size(); k++)
             .       .    .              .             .       .              .           .    .              {
51,475,396,890       0    0              0             0       0 10,637,075,336           0    0                  total_clause_access_size++;
32,740,924,204       0    0  2,816,396,456             0       0              0           0    0                  if (value(c[k]) != l_False){
16,045,798,364     866    1  8,022,899,182             0       0  8,022,899,182           0    0                      c[1] = c[k]; c[k] = false_lit;
 4,011,449,591       0    0  4,011,449,591             0       0              0           0    0                      total_change_other_watch++;
 4,011,449,591       0    0              0             0       0  4,011,449,591         326    0                      no_change_other_watch=false;
             .       .    .              .             .       .              .           .    .                      watches[~c[1]].push(w);
             .       .    .              .             .       .              .           .    .                      goto NextClause; }
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .              // Did not find watch -- clause is unit under assignment:
   943,417,006       0    0              0             0       0    627,477,894     238,475    0              *j++ = w;
   627,477,894       0    0              0             0       0              0           0    0              if (value(first) == l_False){
     2,200,165       0    0      2,200,165        37,228       0              0           0    0                  time_find_conflict++;
    13,200,990       2    1      8,800,660        35,117       0              0           0    0                  total_find_conflict_length+=i-(Watcher*)ws;
     4,400,330       0    0      4,400,330             0       0              0           0    0                  total_find_conflict_allsize+=ws.size();
             .       .    .              .             .       .              .           .    .                  //std::cout<<"count: "<<count<<", length: "<<i-ws<<"\n";
     2,200,165       0    0              0             0       0      2,200,165           0    0                  confl = cr;
     4,400,330       0    0      2,200,165             0       0      2,200,165       5,681    0                  qhead = trail.size();
             .       .    .              .             .       .              .           .    .                  // Copy the remaining watches:
             .       .    .              .             .       .              .           .    .  
   245,595,841       7    3      4,246,526           681       0              0           0    0                  while (i < end)
   117,451,312       0    0    117,451,312    14,581,627      34    117,451,312     272,723    0                      *j++ = *i++;
             .       .    .              .             .       .              .           .    .              }else
             .       .    .              .             .       .              .           .    .              {//new implecate
   311,538,782       0    0              0             0       0    311,538,782           0    0                  no_implication_added=false;
   311,538,782       0    0    311,538,782     2,563,295       0              0           0    0                  total_push_new_implication++;
   934,616,346       0    0    623,077,564       560,370       0              0           0    0  				if (currLevel == decisionLevel())
             .       .    .              .             .       .              .           .    .  				{
   623,077,564       0    0              0             0       0              0           0    0  					uncheckedEnqueue(first, currLevel, cr);
             .       .    .              .             .       .              .           .    .  #ifdef PRINT_OUT					
             .       .    .              .             .       .              .           .    .  					std::cout << "i " << first << " l " << currLevel << "\n";
             .       .    .              .             .       .              .           .    .  #endif					
             .       .    .              .             .       .              .           .    .  				}
             .       .    .              .             .       .              .           .    .  				else
             .       .    .              .             .       .              .           .    .  				{
             .       .    .              .             .       .              .           .    .  					int nMaxLevel = currLevel;
             .       .    .              .             .       .              .           .    .  					int nMaxInd = 1;
-- line 1652 ----------------------------------------
-- line 1665 ----------------------------------------
             .       .    .              .             .       .              .           .    .  					{
             .       .    .              .             .       .              .           .    .  						std::swap(c[1], c[nMaxInd]);
             .       .    .              .             .       .              .           .    .  						*j--; // undo last watch
             .       .    .              .             .       .              .           .    .                          total_change_other_watch++;
             .       .    .              .             .       .              .           .    .                          no_change_other_watch=false;
             .       .    .              .             .       .              .           .    .  						watches[~c[1]].push(w);
             .       .    .              .             .       .              .           .    .  					}
             .       .    .              .             .       .              .           .    .  					
 1,557,693,910       0    0    311,538,782             0       0    311,538,782           0    0  					uncheckedEnqueue(first, nMaxLevel, cr);
             .       .    .              .             .       .              .           .    .  #ifdef PRINT_OUT					
             .       .    .              .             .       .              .           .    .  					std::cout << "i " << first << " l " << nMaxLevel << "\n";
             .       .    .              .             .       .              .           .    .  #endif	
             .       .    .              .             .       .              .           .    .  				}
             .       .    .              .             .       .              .           .    .  			}
             .       .    .              .             .       .              .           .    .  
     2,046,361     100    5              0             0       0              0           0    0  NextClause:;
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .          //after process all watches, I need to decide if this round of propagation change the assignment queue, or access clause.
 1,585,008,995       0    0    317,001,799             0       0              0           0    0          if(no_clause_access==true){
    47,199,457     242    5     47,199,457        21,693       0              0           0    0              total_no_clause_access++;
             .       .    .              .             .       .              .           .    .          }
   677,709,420      19    7    317,001,799             0       0              0           0    0          if(no_implication_added==true){
   177,379,824       2    0    173,886,189       961,690       0              0           0    0              total_no_implication_added++;
             .       .    .              .             .       .              .           .    .          }
   687,158,978       0    0    317,001,799             0       0              0           0    0          if(no_change_other_watch==true){
    87,179,230     358    3     87,179,230           109       0              0           0    0              total_no_change_other_watch++;
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .          ws.shrink(i - j);
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  ExitProp:;
     9,660,070       4    2      9,660,070     2,007,007       0              0           0    0      propagations += num_props;
     4,830,035       0    0      4,830,035             0       0              0           0    0      simpDB_props -= num_props;
             .       .    .              .             .       .              .           .    .  
     4,830,035       0    0      4,830,035             0       0              0           0    0      return confl;
 1,548,047,354     358    2     34,348,363     3,992,750       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  /*_________________________________________________________________________________________________
             .       .    .              .             .       .              .           .    .  |
             .       .    .              .             .       .              .           .    .  |  reduceDB : ()  ->  [void]
             .       .    .              .             .       .              .           .    .  |  
             .       .    .              .             .       .              .           .    .  |  Description:
             .       .    .              .             .       .              .           .    .  |    Remove half of the learnt clauses, minus the clauses locked by the current assignment. Locked
             .       .    .              .             .       .              .           .    .  |    clauses are clauses that are reason to some assignment. Binary clauses are never removed.
             .       .    .              .             .       .              .           .    .  |________________________________________________________________________________________________@*/
             .       .    .              .             .       .              .           .    .  struct reduceDB_lt { 
             .       .    .              .             .       .              .           .    .      ClauseAllocator& ca;
             .       .    .              .             .       .              .           .    .      reduceDB_lt(ClauseAllocator& ca_) : ca(ca_) {}
   108,911,237     302    8    106,752,131    36,303,449     129              0           0    0      bool operator () (CRef x, CRef y) const { return ca[x].activity() < ca[y].activity(); }
             .       .    .              .             .       .              .           .    .  };
             .       .    .              .             .       .              .           .    .  void Solver::reduceDB()
           906     136    4              0             0       0            604           0    0  {
             .       .    .              .             .       .              .           .    .      int     i, j;
             .       .    .              .             .       .              .           .    .      //if (local_learnts_dirty) cleanLearnts(learnts_local, LOCAL);
             .       .    .              .             .       .              .           .    .      //local_learnts_dirty = false;
             .       .    .              .             .       .              .           .    .  
           151       0    0              0             0       0              0           0    0      sort(learnts_local, reduceDB_lt(ca));
             .       .    .              .             .       .              .           .    .  
           755       0    0            151           151       0              0           0    0      int limit = learnts_local.size() / 2;
     8,579,255     151    4              0             0       0              0           0    0      for (i = j = 0; i < learnts_local.size(); i++){
    12,867,750     151    4      8,578,500       268,151       0              0           0    0          Clause& c = ca[learnts_local[i]];
     8,578,500       0    0      4,289,250     4,191,040      13              0           0    0          if (c.mark() == LOCAL)
    15,958,210       0    0      4,165,827             0       0              0           0    0              if (c.removable() && !locked(c) && i < limit)
    10,530,675       0    0      2,106,135             0       0      2,106,135           0    0                  removeClause(learnts_local[i]);
             .       .    .              .             .       .              .           .    .              else{
       351,924       0    0              0             0       0              0           0    0                  if (!c.removable()) limit++;
             .       .    .              .             .       .              .           .    .                  c.removable(true);
    10,545,306       0    0      2,059,692             0       0      2,059,692     128,853    0                  learnts_local[j++] = learnts_local[i]; }
             .       .    .              .             .       .              .           .    .      }
           151       0    0              0             0       0              0           0    0      learnts_local.shrink(i - j);
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      checkGarbage();
           762       0    0            611           151       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  void Solver::reduceDB_Tier2()
         1,362     154    4              0             0       0          1,135           0    0  {
             .       .    .              .             .       .              .           .    .      int i, j;
     5,006,622      46    2            227           222       0              0           0    0      for (i = j = 0; i < learnts_tier2.size(); i++){
     6,428,598     119    5      4,285,732       134,129     620              0           0    0          Clause& c = ca[learnts_tier2[i]];
     4,285,732       0    0              0             0       0              0           0    0          if (c.mark() == TIER2)
    10,503,675      64    1      4,201,470     1,676,927   1,762              0           0    0              if (!locked(c) && c.touched() + 30000 < conflicts){
             .       .    .              .             .       .              .           .    .                  learnts_local.push(learnts_tier2[i]);
             .       .    .              .             .       .              .           .    .                  c.mark(LOCAL);
             .       .    .              .             .       .              .           .    .                  //c.removable(true);
             .       .    .              .             .       .              .           .    .                  c.activity() = 0;
             .       .    .              .             .       .              .           .    .                  claBumpActivity(c);
             .       .    .              .             .       .              .           .    .              }else
     8,915,510       0    0      1,783,102             0       0      1,783,102      74,947    0                  learnts_tier2[j++] = learnts_tier2[i];
             .       .    .              .             .       .              .           .    .      }
           227       0    0              0             0       0              0           0    0      learnts_tier2.shrink(i - j);
         1,362       0    0          1,362           227       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  void Solver::removeSatisfied(vec<CRef>& cs)
           198       0    0              0             0       0             88           0    0  {
             .       .    .              .             .       .              .           .    .      int i, j;
     2,372,359       9    6        474,481            11       0              0           0    0      for (i = j = 0; i < cs.size(); i++){
     1,423,374       0    0        948,916        29,670     107              0           0    0          Clause& c = ca[cs[i]];
             .       .    .              .             .       .              .           .    .          if (satisfied(c))
        32,800      12    6              1             0       0         10,933         348    0              removeClause(cs[i]);
             .       .    .              .             .       .              .           .    .          else
       927,050       0    0              0             0       0        463,525       9,306    0              cs[j++] = cs[i];
             .       .    .              .             .       .              .           .    .      }
            22       0    0              0             0       0              0           0    0      cs.shrink(i - j);
           132       0    0            110             7       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  void Solver::safeRemoveSatisfied(vec<CRef>& cs, unsigned valid_mark)
           144       0    0              0             0       0            120           0    0  {
             .       .    .              .             .       .              .           .    .      int i, j;
       786,133      11    6             24            12       0              0           0    0      for (i = j = 0; i < cs.size(); i++){
     1,009,824       0    0        673,216        21,053       0              0           0    0          Clause& c = ca[cs[i]];
       673,216       0    0              0             0       0              0           0    0          if (c.mark() == valid_mark)
             .       .    .              .             .       .              .           .    .              if (satisfied(c))
       194,924       3    1         48,731             0       0         48,731         198    0                  removeClause(cs[i]);
             .       .    .              .             .       .              .           .    .              else
     1,401,225       0    0        280,245             0       0        280,245       7,900    0                  cs[j++] = cs[i];
             .       .    .              .             .       .              .           .    .      }
            22       0    0              0             0       0              0           0    0      cs.shrink(i - j);
           144       2    2            144             6       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  void Solver::rebuildOrderHeap()
           117       6    5              0             0       0             78           0    0  {
             .       .    .              .             .       .              .           .    .      vec<Var> vs;
        59,202       0    0             13             0       0             13           0    0      for (Var v = 0; v < nVars(); v++)
       138,498       0    0         69,249           732       8              0           0    0          if (decision[v] && value(v) == l_Undef)
             .       .    .              .             .       .              .           .    .              vs.push(v);
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      order_heap_CHB  .build(vs);
             .       .    .              .             .       .              .           .    .      order_heap_VSIDS.build(vs);
             .       .    .              .             .       .              .           .    .      order_heap_distance.build(vs);
           104      13    6             91            13       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  /*_________________________________________________________________________________________________
             .       .    .              .             .       .              .           .    .  |
             .       .    .              .             .       .              .           .    .  |  simplify : [void]  ->  [bool]
             .       .    .              .             .       .              .           .    .  |  
             .       .    .              .             .       .              .           .    .  |  Description:
             .       .    .              .             .       .              .           .    .  |    Simplify the clause database according to the current top-level assigment. Currently, the only
             .       .    .              .             .       .              .           .    .  |    thing done here is the removal of satisfied clauses, but more things can be put here.
             .       .    .              .             .       .              .           .    .  |________________________________________________________________________________________________@*/
             .       .    .              .             .       .              .           .    .  bool Solver::simplify()
        29,514     753    2              0             0       0         19,676           0    0  {
             .       .    .              .             .       .              .           .    .      assert(decisionLevel() == 0);
             .       .    .              .             .       .              .           .    .  
        24,595       0    0          4,919         4,864       0              0           0    0      if (!ok || propagate() != CRef_Undef)
             .       .    .              .             .       .              .           .    .          return ok = false;
             .       .    .              .             .       .              .           .    .  
        14,845     240    5          9,882             0       0              0           0    0      if (nAssigns() == simpDB_assigns || (simpDB_props > 0))
             .       .    .              .             .       .              .           .    .          return true;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // Remove satisfied clauses:
            36       0    0              0             0       0             12           0    0      removeSatisfied(learnts_core); // Should clean core first.
            48       0    0              0             0       0             12           0    0      safeRemoveSatisfied(learnts_tier2, TIER2);
            48      12    6              0             0       0             12           0    0      safeRemoveSatisfied(learnts_local, LOCAL);
            24       0    0             12            12       0              0           0    0      if (remove_satisfied)        // Can be turned off.
            44      22   11              0             0       0             11           0    0          removeSatisfied(clauses);
             .       .    .              .             .       .              .           .    .      checkGarbage();
            24       1    1              0             0       0             12           0    0      rebuildOrderHeap();
             .       .    .              .             .       .              .           .    .  
            24       0    0             12            12       0             12          12    0      simpDB_assigns = nAssigns();
            36       0    0             24            24       0             12           0    0      simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
             .       .    .              .             .       .              .           .    .  
            12       0    0              0             0       0              0           0    0      return true;
        34,433       0    0         24,595            12       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  // pathCs[k] is the number of variables assigned at level k,
             .       .    .              .             .       .              .           .    .  // it is initialized to 0 at the begining and reset to 0 after the function execution
        83,344       4    1              0             0       0         62,508           0    0  bool Solver::collectFirstUIP(CRef confl){
        20,836       0    0              0             0       0         10,418           0    0      involved_lits.clear();
       722,542       3    1              0             0       0              0           0    0      int max_level=1;
             .       .    .              .             .       .              .           .    .      Clause& c=ca[confl]; int minLevel=decisionLevel();
       132,152       0    0         10,418             0       0              0           0    0      for(int i=0; i<c.size(); i++) {
             .       .    .              .             .       .              .           .    .          Var v=var(c[i]);
             .       .    .              .             .       .              .           .    .          //        assert(!seen[v]);
       120,093      16    1         40,031        10,670       0              0           0    0          if (level(v)>0) {
        80,062       0    0         40,031         9,655       0         40,031      25,782    0              seen[v]=1;
        90,480       0    0         50,449        19,506       0         40,031      35,978    0              var_iLevel_tmp[v]=1;
        40,031       0    0         40,031        16,193       0              0           0    0              pathCs[level(v)]++;
             .       .    .              .             .       .              .           .    .              if (minLevel>level(v)) {
             .       .    .              .             .       .              .           .    .                  minLevel=level(v);
             .       .    .              .             .       .              .           .    .                  assert(minLevel>0);
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .              //    varBumpActivity(v);
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
        31,254       0    0         20,836         9,016       0              0           0    0      int limit=trail_lim[minLevel-1];
    12,069,840       0    0         10,418             0       0              0           0    0      for(int i=trail.size()-1; i>=limit; i--) {
     6,014,084     135    1      6,014,084       159,106       0              0           0    0          Lit p=trail[i]; Var v=var(p);
     6,014,084       0    0      3,007,042       294,557       0              0           0    0          if (seen[v]) {
             .       .    .              .             .       .              .           .    .              int currentDecLevel=level(v);
             .       .    .              .             .       .              .           .    .              //      if (currentDecLevel==decisionLevel())
             .       .    .              .             .       .              .           .    .              //      	varBumpActivity(v);
       520,930       0    0              0             0       0        520,930           0    0              seen[v]=0;
     1,041,860       0    0        520,930             6       0              0           0    0              if (--pathCs[currentDecLevel]!=0) {
             .       .    .              .             .       .              .           .    .                  Clause& rc=ca[reason(v)];
     1,372,158       5    1        990,051           174       0              0           0    0                  int reasonVarLevel=var_iLevel_tmp[v]+1;
       660,034       0    0              0             0       0              0           0    0                  if(reasonVarLevel>max_level) max_level=reasonVarLevel;
       827,988       0    0              0             0       0              0           0    0                  if (rc.size()==2 && value(rc[0])==l_False) {
             .       .    .              .             .       .              .           .    .                      // Special case for binary clauses
             .       .    .              .             .       .              .           .    .                      // The first one has to be SAT
             .       .    .              .             .       .              .           .    .                      assert(value(rc[1]) != l_False);
             .       .    .              .             .       .              .           .    .                      Lit tmp = rc[0];
        22,191       0    0          7,397           380       0         14,794           0    0                      rc[0] =  rc[1], rc[1] = tmp;
             .       .    .              .             .       .              .           .    .                  }
     2,234,982       0    0              0             0       0              0           0    0                  for (int j = 1; j < rc.size(); j++){
             .       .    .              .             .       .              .           .    .                      Lit q = rc[j]; Var v1=var(q);
     1,742,902       0    0              0             0       0              0           0    0                      if (level(v1) > 0) {
     1,742,902       0    0              0             0       0              0           0    0                          if (minLevel>level(v1)) {
       132,320       0    0         66,160        21,575       0              0           0    0                              minLevel=level(v1); limit=trail_lim[minLevel-1]; 	assert(minLevel>0);
             .       .    .              .             .       .              .           .    .                          }
     2,614,353       0    0      1,742,902        33,669       0              0           0    0                          if (seen[v1]) {
       781,104       0    0        390,552           188       0              0           0    0                              if (var_iLevel_tmp[v1]<reasonVarLevel)
       500,752       0    0              0             0       0        250,376           0    0                                  var_iLevel_tmp[v1]=reasonVarLevel;
             .       .    .              .             .       .              .           .    .                          }
             .       .    .              .             .       .              .           .    .                          else {
       480,899       0    0              0             0       0        480,899     344,330    0                              var_iLevel_tmp[v1]=reasonVarLevel;
             .       .    .              .             .       .              .           .    .                              //   varBumpActivity(v1);
       480,899       0    0              0             0       0        480,899           0    0                              seen[v1] = 1;
     1,442,697       5    1        961,798        31,430       0              0           0    0                              pathCs[level(v1)]++;
             .       .    .              .             .       .              .           .    .                          }
             .       .    .              .             .       .              .           .    .                      }
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .              involved_lits.push(p);
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .      }
        31,254     181    1         10,418             0       0         10,418           0    0      double inc=var_iLevel_inc;
             .       .    .              .             .       .              .           .    .      vec<int> level_incs; level_incs.clear();
       621,559       0    0        236,122             0       0              0           0    0      for(int i=0;i<max_level;i++){
       256,958       4    1        128,479             0       0              0           0    0          level_incs.push(inc);
       385,437       0    0        256,958             0       0        128,479           0    0          inc = inc/my_var_decay;
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
     1,083,532       0    0        531,348             0       0              0           0    0      for(int i=0;i<involved_lits.size();i++){
        10,418       0    0         10,418             0       0              0           0    0          Var v =var(involved_lits[i]);
             .       .    .              .             .       .              .           .    .          //        double old_act=activity_distance[v];
             .       .    .              .             .       .              .           .    .          //        activity_distance[v] +=var_iLevel_inc * var_iLevel_tmp[v];
     4,855,058   3,228    2      1,604,462       391,237       0        531,348           0    0          activity_distance[v]+=var_iLevel_tmp[v]*level_incs[var_iLevel_tmp[v]-1];
             .       .    .              .             .       .              .           .    .  
     1,041,860       0    0              0             0       0              0           0    0          if(activity_distance[v]>1e100){
             .       .    .              .             .       .              .           .    .              for(int vv=0;vv<nVars();vv++)
        52,090     260    1         20,836        19,231       0         20,836           0    0                  activity_distance[vv] *= 1e-100;
             .       .    .              .             .       .              .           .    .              var_iLevel_inc*=1e-100;
        13,452       4    1              0             0       0              0           0    0              for(int j=0; j<max_level; j++) level_incs[j]*=1e-100;
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .          if (order_heap_distance.inHeap(v))
             .       .    .              .             .       .              .           .    .              order_heap_distance.decrease(v);
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .          //        var_iLevel_inc *= (1 / my_var_decay);
             .       .    .              .             .       .              .           .    .      }
        52,090      22    1         20,836             0       0         10,418         282    0      var_iLevel_inc=level_incs[level_incs.size()-1];
             .       .    .              .             .       .              .           .    .      return true;
        93,762       0    0         72,926         1,186       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  struct UIPOrderByILevel_Lt {
             .       .    .              .             .       .              .           .    .      Solver& solver;
             .       .    .              .             .       .              .           .    .      const vec<double>&  var_iLevel;
             .       .    .              .             .       .              .           .    .      bool operator () (Lit x, Lit y) const
             .       .    .              .             .       .              .           .    .      {
             .       .    .              .             .       .              .           .    .          return var_iLevel[var(x)] < var_iLevel[var(y)] ||
             .       .    .              .             .       .              .           .    .                  (var_iLevel[var(x)]==var_iLevel[var(y)]&& solver.level(var(x))>solver.level(var(y)));
-- line 1927 ----------------------------------------
-- line 1954 ----------------------------------------
             .       .    .              .             .       .              .           .    .  |    Search for a model the specified number of conflicts. 
             .       .    .              .             .       .              .           .    .  |  
             .       .    .              .             .       .              .           .    .  |  Output:
             .       .    .              .             .       .              .           .    .  |    'l_True' if a partial assigment that is consistent with respect to the clauseset is found. If
             .       .    .              .             .       .              .           .    .  |    all variables are decision variables, this means that the clause set is satisfiable. 'l_False'
             .       .    .              .             .       .              .           .    .  |    if the clause set is unsatisfiable. 'l_Undef' if the bound on number of conflicts is reached.
             .       .    .              .             .       .              .           .    .  |________________________________________________________________________________________________@*/
             .       .    .              .             .       .              .           .    .  lbool Solver::search(int& nof_conflicts)
        53,889   2,967    8              0             0       0         34,293           0    0  {
             .       .    .              .             .       .              .           .    .      assert(ok);
             .       .    .              .             .       .              .           .    .      int         backtrack_level;
             .       .    .              .             .       .              .           .    .      int         lbd;
             .       .    .              .             .       .              .           .    .      vec<Lit>    learnt_clause;
             .       .    .              .             .       .              .           .    .      bool        cached = false;
         4,899       0    0          4,899            68       0              0           0    0      starts++;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // simplify
             .       .    .              .             .       .              .           .    .      //
        19,596       4    3         14,697         4,899       2              0           0    0      if (conflicts >= curSimplify * nbconfbeforesimplify){
             .       .    .              .             .       .              .           .    .          //        printf("c ### simplifyAll on conflict : %lld\n", conflicts);
             .       .    .              .             .       .              .           .    .          //printf("nbClauses: %d, nbLearnts_core: %d, nbLearnts_tier2: %d, nbLearnts_local: %d, nbLearnts: %d\n",
             .       .    .              .             .       .              .           .    .          //	clauses.size(), learnts_core.size(), learnts_tier2.size(), learnts_local.size(),
             .       .    .              .             .       .              .           .    .          //	learnts_core.size() + learnts_tier2.size() + learnts_local.size());
            45      28    9             45            45      11              0           0    0          nbSimplifyAll++;
           135      45   11              0             0       0             45           0    0          if (!simplifyAll()){
             .       .    .              .             .       .              .           .    .              return l_False;
             .       .    .              .             .       .              .           .    .          }
           315       0    0             90            90       0             45           0    0          curSimplify = (conflicts / nbconfbeforesimplify) + 1;
           135       0    0             45             0       0             45           0    0          nbconfbeforesimplify += incSimplify;
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      for (;;){
             .       .    .              .             .       .              .           .    .          CRef confl = propagate();
             .       .    .              .             .       .              .           .    .  
     9,803,882       0    0              0             0       0              0           0    0          if (confl != CRef_Undef){
             .       .    .              .             .       .              .           .    .              // CONFLICT
     6,831,117       0    0      2,277,039        24,890       0              0           0    0              if (VSIDS){
     2,221,818       0    0      1,110,894     1,075,817       0             30           0    0                  if (--timer == 0 && var_decay < 0.95) timer = 5000, var_decay += 0.01;
             .       .    .              .             .       .              .           .    .              }else
     4,518,579      13    0      2,672,385     1,137,119       0        340,001           0    0                  if (step_size > min_step_size) step_size -= step_size_dec;
             .       .    .              .             .       .              .           .    .  
     9,108,156     101   26      4,554,078     2,260,698       0      2,277,039           0    0              conflicts++; nof_conflicts--;
             .       .    .              .             .       .              .           .    .              //if (conflicts == 100000 && learnts_core.size() < 100) core_lbd_cut = 5;
             .       .    .              .             .       .              .           .    .              ConflictData data = FindConflictLevel(confl);
     4,554,080       0    0              0             0       0              0           0    0              if (data.nHighestLevel == 0) return l_False;
             .       .    .              .             .       .              .           .    .              if (data.bOnlyOneLitFromHighest)
             .       .    .              .             .       .              .           .    .              {
             .       .    .              .             .       .              .           .    .  				cancelUntil(data.nHighestLevel - 1);
             .       .    .              .             .       .              .           .    .  				continue;
             .       .    .              .             .       .              .           .    .  			}
             .       .    .              .             .       .              .           .    .  			
             .       .    .              .             .       .              .           .    .              learnt_clause.clear();
     4,554,076       0    0              0             0       0      2,277,038   2,189,925    0              if(conflicts>50000) DISTANCE=0;
             .       .    .              .             .       .              .           .    .              else DISTANCE=1;
     6,775,768       0    0              0             0       0              0           0    0              if(VSIDS && DISTANCE)
        41,672       4    1              0             0       0         10,418           0    0                  collectFirstUIP(confl);
             .       .    .              .             .       .              .           .    .  
    13,662,228     151    6              0             0       0      2,277,038           0    0              analyze(confl, learnt_clause, backtrack_level, lbd);
             .       .    .              .             .       .              .           .    .              // check chrono backtrack condition
    31,850,539      57   11     11,381,191       301,724       0              0           0    0              if ((confl_to_chrono < 0 || confl_to_chrono <= conflicts) && chrono > -1 && (decisionLevel() - backtrack_level) >= chrono)
             .       .    .              .             .       .              .           .    .              {
             .       .    .              .             .       .              .           .    .  				++chrono_backtrack;
             .       .    .              .             .       .              .           .    .  				cancelUntil(data.nHighestLevel -1);
             .       .    .              .             .       .              .           .    .  			}
             .       .    .              .             .       .              .           .    .  			else // default behavior
             .       .    .              .             .       .              .           .    .  			{
     2,277,038     239   12      2,277,038         7,195       0              0           0    0  				++non_chrono_backtrack;
             .       .    .              .             .       .              .           .    .  				cancelUntil(backtrack_level);
             .       .    .              .             .       .              .           .    .  			}
             .       .    .              .             .       .              .           .    .  
     6,831,114       0    0      2,277,038       941,188       0      2,277,038           0    0              lbd--;
     4,554,076       0    0      2,277,038             0       0              0           0    0              if (VSIDS){
     1,110,846      21    7              0             0       0      1,110,846           0    0                  cached = false;
     3,332,538      38   10      3,332,538     1,088,900       0              0           0    0                  conflicts_VSIDS++;
             .       .    .              .             .       .              .           .    .                  lbd_queue.push(lbd);
     8,886,768       0    0      3,332,538             0       0      1,110,846           0    0                  global_lbd_sum += (lbd > 50 ? 50 : lbd); }
             .       .    .              .             .       .              .           .    .  
     6,831,114      48   10      2,277,038             0       0              0           0    0              if (learnt_clause.size() == 1){
           140       0    0             40            15       0             20           0    0                  uncheckedEnqueue(learnt_clause[0]);
             .       .    .              .             .       .              .           .    .              }else{
             .       .    .              .             .       .              .           .    .                  CRef cr = ca.alloc(learnt_clause, true);
     2,277,018       0    0      2,277,018             0       0              0           0    0                  ca[cr].set_lbd(lbd);
             .       .    .              .             .       .              .           .    .                  //duplicate learnts 
             .       .    .              .             .       .              .           .    .                  int  id = 0;
     4,554,036       0    0      2,277,018     2,264,581       0              0           0    0                  if (lbd <= max_lbd_dup){                        
             .       .    .              .             .       .              .           .    .                      std::vector<uint32_t> tmp;
   154,559,959       0    0    103,876,923             0       0      1,829,892           0    0                      for (int i = 0; i < learnt_clause.size(); i++)
   107,536,707       7    3     71,691,138             0       0     35,845,569           0    0                          tmp.push_back(learnt_clause[i].x);
     5,489,676       2    1      1,829,892             0       0      1,829,892           0    0                      id = is_duplicate(tmp);             
     9,149,460       0    0      1,829,892             0       0              0           0    0                      if (id == min_number_of_learnts_copies +1){
            33       0    0             33             6       0              0           0    0                          duplicates_added_conflicts++;                        
             .       .    .              .             .       .              .           .    .                      }                    
     3,659,784       0    0              0             0       0              0           0    0                      if (id == min_number_of_learnts_copies){
           449       0    0            449           109       0              0           0    0                          duplicates_added_tier2++;
             .       .    .              .             .       .              .           .    .                      }                                        
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .                  //duplicate learnts
             .       .    .              .             .       .              .           .    .  
    13,629,212       0    0      4,545,812     1,159,229       0              0           0    0                  if ((lbd <= core_lbd_cut) || (id == min_number_of_learnts_copies+1)){
            13       2    1              0             0       0              0           0    0                      learnts_core.push(cr);
             .       .    .              .             .       .              .           .    .                      ca[cr].mark(CORE);
     8,432,908     809   13              0             0       0              0           0    0                  }else if ((lbd <= 6)||(id == min_number_of_learnts_copies)){
            22       1    1              0             0       0              0           0    0                      learnts_tier2.push(cr);
             .       .    .              .             .       .              .           .    .                      ca[cr].mark(TIER2);
     1,284,672       0    0        321,168           379       0        321,168         270    0                      ca[cr].touched() = conflicts;
             .       .    .              .             .       .              .           .    .                  }else{
            23      16    1              0             0       0              0           0    0                      learnts_local.push(cr);
             .       .    .              .             .       .              .           .    .                      claBumpActivity(ca[cr]); }
     6,831,054   1,670   12              0             0       0      2,277,018           0    0                  attachClause(cr);
             .       .    .              .             .       .              .           .    .  
    13,662,108       0    0      6,831,054         2,039       0      2,277,018           0    0                  uncheckedEnqueue(learnt_clause[0], backtrack_level, cr);
             .       .    .              .             .       .              .           .    .  #ifdef PRINT_OUT
             .       .    .              .             .       .              .           .    .                  std::cout << "new " << ca[cr] << "\n";
             .       .    .              .             .       .              .           .    .                  std::cout << "ci " << learnt_clause[0] << " l " << backtrack_level << "\n";
             .       .    .              .             .       .              .           .    .  #endif                
             .       .    .              .             .       .              .           .    .              }
     6,831,114       0    0      2,277,038       681,332       0              0           0    0              if (drup_file){
             .       .    .              .             .       .              .           .    .  #ifdef BIN_DRUP
             .       .    .              .             .       .              .           .    .                  binDRUP('a', learnt_clause, drup_file);
             .       .    .              .             .       .              .           .    .  #else
             .       .    .              .             .       .              .           .    .                  for (int i = 0; i < learnt_clause.size(); i++)
             .       .    .              .             .       .              .           .    .                      fprintf(drup_file, "%i ", (var(learnt_clause[i]) + 1) * (-2 * sign(learnt_clause[i]) + 1));
             .       .    .              .             .       .              .           .    .                  fprintf(drup_file, "0\n");
             .       .    .              .             .       .              .           .    .  #endif
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .  
     6,831,114     195   11      4,554,076     1,104,881       0              0           0    0              if (VSIDS) varDecayActivity();
             .       .    .              .             .       .              .           .    .              claDecayActivity();
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .              /*if (--learntsize_adjust_cnt == 0){
             .       .    .              .             .       .              .           .    .                  learntsize_adjust_confl *= learntsize_adjust_inc;
             .       .    .              .             .       .              .           .    .                  learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
             .       .    .              .             .       .              .           .    .                  max_learnts             *= learntsize_inc;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .                  if (verbosity >= 1)
-- line 2088 ----------------------------------------
-- line 2090 ----------------------------------------
             .       .    .              .             .       .              .           .    .                             (int)conflicts,
             .       .    .              .             .       .              .           .    .                             (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals,
             .       .    .              .             .       .              .           .    .                             (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
             .       .    .              .             .       .              .           .    .              }*/
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .          }else{
             .       .    .              .             .       .              .           .    .              // NO CONFLICT
             .       .    .              .             .       .              .           .    .              bool restart = false;
     7,874,706      46   11      2,624,902       227,983       0              0           0    0              if (!VSIDS)
             .       .    .              .             .       .              .           .    .                  restart = nof_conflicts <= 0;
     2,625,934       1    1      1,312,967             0       0              0           0    0              else if (!cached){
     9,010,798       3    0      2,563,923       946,120       0        553,908           0    0                  restart = lbd_queue.full() && (lbd_queue.avg() * 0.8 > global_lbd_sum / conflicts_VSIDS);
             .       .    .              .             .       .              .           .    .                  cached = true;
             .       .    .              .             .       .              .           .    .              }
     3,935,805       0    0      1,311,935       989,462       0              0           0    0              if (restart /*|| !withinBudget()*/){
             .       .    .              .             .       .              .           .    .                  lbd_queue.clear();
             .       .    .              .             .       .              .           .    .                  cached = false;
             .       .    .              .             .       .              .           .    .                  // Reached bound on number of conflicts:
        14,694       0    0              0             0       0          9,796       4,518    1                  progress_estimate = progressEstimate();
             .       .    .              .             .       .              .           .    .                  cancelUntil(0);
         9,796       0    0              0             0       0              0           0    0                  return l_Undef; }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .              // Simplify the set of problem clauses:
     8,362,347      68    8      2,620,004             0       0        487,562           0    0              if (decisionLevel() == 0 && !simplify())
             .       .    .              .             .       .              .           .    .                  return l_False;
             .       .    .              .             .       .              .           .    .  
     7,860,012       5    1      5,240,008     1,450,383       0              0           0    0              if (conflicts >= next_T2_reduce){
           454       0    0              0             0       0            227           0    0                  next_T2_reduce = conflicts + 10000;
           908       0    0            227             0       0            227           0    0                  reduceDB_Tier2(); }
     5,240,008      30    5      2,620,004         4,872       0              0           0    0              if (conflicts >= next_L_reduce){
           302       0    0              0             0       0            151           0    0                  next_L_reduce = conflicts + 15000;
           302       0    0              0             0       0            151           0    0                  reduceDB(); }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .              Lit next = lit_Undef;
             .       .    .              .             .       .              .           .    .              /*while (decisionLevel() < assumptions.size()){
             .       .    .              .             .       .              .           .    .                  // Perform user provided assumption:
             .       .    .              .             .       .              .           .    .                  Lit p = assumptions[decisionLevel()];
             .       .    .              .             .       .              .           .    .                  if (value(p) == l_True){
             .       .    .              .             .       .              .           .    .                      // Dummy decision level:
             .       .    .              .             .       .              .           .    .                      newDecisionLevel();
-- line 2129 ----------------------------------------
-- line 2133 ----------------------------------------
             .       .    .              .             .       .              .           .    .                  }else{
             .       .    .              .             .       .              .           .    .                      next = p;
             .       .    .              .             .       .              .           .    .                      break;
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .              if (next == lit_Undef)*/{
             .       .    .              .             .       .              .           .    .                  // New variable decision:
     2,620,004       0    0      2,620,004           151       0              0           0    0                  decisions++;
     7,860,012     135   13              0             0       0      2,620,004           0    0                  next = pickBranchLit();
             .       .    .              .             .       .              .           .    .  
     5,240,008       0    0              0             0       0              0           0    0                  if (next == lit_Undef)
             .       .    .              .             .       .              .           .    .                      // Model found:
             .       .    .              .             .       .              .           .    .                      return l_True;
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .              // Increase decision level and enqueue 'next'
             .       .    .              .             .       .              .           .    .              newDecisionLevel();
    15,720,024      45   14      2,620,004             0       0      2,620,004           0    0              uncheckedEnqueue(next, decisionLevel());
             .       .    .              .             .       .              .           .    .  #ifdef PRINT_OUT            
             .       .    .              .             .       .              .           .    .              std::cout << "d " << next << " l " << decisionLevel() << "\n";
             .       .    .              .             .       .              .           .    .  #endif            
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .      }
        44,091      20    6         34,293         4,899       4              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  double Solver::progressEstimate() const
        29,388       5    3              0             0       0         24,490           0    0  {
         9,796       0    0              0             0       0              0           0    0      double  progress = 0;
        24,490       0    0          9,796         3,587       0          4,898           0    0      double  F = 1.0 / nVars();
             .       .    .              .             .       .              .           .    .  
       313,093       4    3              0             0       0              0           0    0      for (int i = 0; i <= decisionLevel(); i++){
       283,705       0    0        182,606             0       0              0           0    0          int beg = i == 0 ? 0 : trail_lim[i - 1];
       379,906       0    0        187,504         8,623       0              0           0    0          int end = i == decisionLevel() ? trail.size() : trail_lim[i];
       591,900      36   11        101,099             0       0              0           0    0          progress += pow(F, i) * (end - beg);
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
         9,796       0    0              0             0       0              0           0    0      return progress / nVars();
        34,286       0    0         29,388             0       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  /*
             .       .    .              .             .       .              .           .    .    Finite subsequences of the Luby-sequence:
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .    0: 1
             .       .    .              .             .       .              .           .    .    1: 1 1 2
             .       .    .              .             .       .              .           .    .    2: 1 1 2 1 1 2 4
             .       .    .              .             .       .              .           .    .    3: 1 1 2 1 1 2 4 1 1 2 1 1 2 4 8
-- line 2180 ----------------------------------------
-- line 2183 ----------------------------------------
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .   */
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  static double luby(double y, int x){
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // Find the finite subsequence that contains index 'x', and the
             .       .    .              .             .       .              .           .    .      // size of that subsequence:
             .       .    .              .             .       .              .           .    .      int size, seq;
       109,963       0    0              0             0       0              0           0    0      for (size = 1, seq = 0; size < x+1; seq++, size = 2*size+1);
             .       .    .              .             .       .              .           .    .  
        61,678       3    3              0             0       0              0           0    0      while (size-1 != x){
        35,340       0    0              0             0       0              0           0    0          size = (size-1)>>1;
        17,670       0    0              0             0       0              0           0    0          seq--;
        53,010       0    0              0             0       0              0           0    0          x = x % size;
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      return pow(y, seq);
             .       .    .              .             .       .              .           .    .  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  static bool switch_mode = false;
             .       .    .              .             .       .              .           .    .  //static void SIGALRM_switch(int signum) { switch_mode = true; }
             .       .    .              .             .       .              .           .    .  
            24       3    3              0             0       0             18           0    0  uint32_t Solver::reduceduplicates(){
             .       .    .              .             .       .              .           .    .      uint32_t removed_duplicates = 0;
             .       .    .              .             .       .              .           .    .      std::vector<std::vector<uint64_t>> tmp;
             .       .    .              .             .       .              .           .    .      //std::map<int32_t,std::map<uint32_t,std::unordered_map<uint64_t,uint32_t>>>  ht;
         4,549       0    0              6             0       0              0           0    0      for (auto & outer_mp: ht){//variables
        37,036       0    0              0             0       0              0           0    0          for (auto &inner_mp:outer_mp.second){//sizes
     3,242,028       0    0              0             0       0              0           0    0              for (auto &in_in_mp: inner_mp.second){
     4,817,676       3    3      1,605,892     1,560,520 422,882              0           0    0                  if (in_in_mp.second >= 2){
             .       .    .              .             .       .              .           .    .                  //min_number_of_learnts_copies
       901,570       3    3        360,628           920     178        360,628         243    0                      tmp.push_back({(uint64_t) outer_mp.first,inner_mp.first,in_in_mp.first,in_in_mp.second});
             .       .    .              .             .       .              .           .    .                  }
             .       .    .              .             .       .              .           .    .              }                    
             .       .    .              .             .       .              .           .    .           }
             .       .    .              .             .       .              .           .    .      }          
             9       0    0              3             3       0              3           0    0      removed_duplicates = dupl_db_size-tmp.size();  
             .       .    .              .             .       .              .           .    .      ht.clear();
       631,114       3    3        270,474            33       0              0           0    0      for (auto i=0;i<tmp.size();i++){
       901,570       0    0        450,785       101,492   8,739        270,471          20    0          ht[tmp[i][0]][tmp[i][1]][tmp[i][2]]=tmp[i][3];
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .      return removed_duplicates;
            27       0    0             24             6       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  // NOTE: assumptions passed in member-variable 'assumptions'.
             .       .    .              .             .       .              .           .    .  lbool Solver::solve_()
             8       0    0              0             0       0              6           0    0  {
             .       .    .              .             .       .              .           .    .      //signal(SIGALRM, SIGALRM_switch);
             .       .    .              .             .       .              .           .    .      //alarm(2500);
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      model.clear();
             .       .    .              .             .       .              .           .    .      conflict.clear();
             2       1    1              1             0       0              0           0    0      if (!ok) return l_False;
             .       .    .              .             .       .              .           .    .  
             1       1    1              1             0       0              0           0    0      solves++;
             .       .    .              .             .       .              .           .    .  
             5       0    0              2             1       0              1           0    0      max_learnts               = nClauses() * learntsize_factor;
             3       0    0              1             1       0              0           0    0      learntsize_adjust_confl   = learntsize_adjust_start_confl;
             1       0    0              0             0       0              1           1    0      learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
             .       .    .              .             .       .              .           .    .      lbool   status            = l_Undef;
             .       .    .              .             .       .              .           .    .  
             3       0    0              1             0       0              0           0    0      if (verbosity >= 1){
             2       0    0              0             0       0              1           0    0          printf("c ============================[ Search Statistics ]==============================\n");
             2       1    1              0             0       0              1           0    0          printf("c | Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
             2       0    0              0             0       0              1           0    0          printf("c |           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
             2       0    0              0             0       0              1           0    0          printf("c ===============================================================================\n");
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      add_tmp.clear();
             .       .    .              .             .       .              .           .    .  
             1       0    0              0             0       0              1           0    0      VSIDS = true;
             1       1    1              0             0       0              1           0    0      int init = 10000;
           340       0    0             68            68       0              0           0    0      while (status == l_Undef && init > 0 /*&& withinBudget()*/)
           272       3    0              0             0       0             68           0    0          status = search(init);
             1       0    0              0             0       0              1           0    0      VSIDS = false;
             .       .    .              .             .       .              .           .    .  
             3       1    1              0             0       0              2           2    0      duplicates_added_conflicts = 0;
             .       .    .              .             .       .              .           .    .      duplicates_added_minimization=0;
             .       .    .              .             .       .              .           .    .      duplicates_added_tier2 =0;    
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      dupl_db_size=0;
             1       0    0              1             1       0              0           0    0      size_t dupl_db_size_limit = dupl_db_init_size;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // Search:
             1       0    0              0             0       0              0           0    0      int curr_restarts = 0;
             1       0    0              0             0       0              0           0    0      uint64_t curr_props = 0;
             .       .    .              .             .       .              .           .    .      uint32_t removed_duplicates =0;
         9,662     547    1              0             0       0              0           0    0      while (status == l_Undef /*&& withinBudget()*/){
         9,662       1    1          4,831         2,653       0              0           0    0          if (dupl_db_size >= dupl_db_size_limit){    
            12       3    3              3             3       0              3           0    0              printf("c Duplicate learnts added (Minimization) %i\n",duplicates_added_minimization);    
            12       0    0              3             0       0              3           0    0              printf("c Duplicate learnts added (conflicts) %i\n",duplicates_added_conflicts);    
            12       0    0              3             0       0              3           0    0              printf("c Duplicate learnts added (tier2) %i\n",duplicates_added_tier2);    
            12       3    3              3             3       0              3           0    0              printf("c Duptime: %i\n",duptime.count());
            12       0    0              3             0       0              3           0    0              printf("c Number of conflicts: %i\n",conflicts);
            12       0    0              3             3       0              3           0    0              printf("c Core size: %i\n",learnts_core.size());
             .       .    .              .             .       .              .           .    .              
             6       0    0              0             0       0              3           0    0              removed_duplicates = reduceduplicates();
            24       3    3              6             6       2              0           0    0              dupl_db_size_limit*=1.1;
             6       0    0              3             3       0              0           0    0              dupl_db_size -= removed_duplicates;
            15       0    0              0             0       0              3           0    0              printf("c removed duplicates %i\n",removed_duplicates);
             .       .    .              .             .       .              .           .    .          }   
        28,986     133    4          9,662         7,342       0              0           0    0          if (propagations - curr_props >  VSIDS_props_limit){
             7       0    0              0             0       0              0           0    0              curr_props = propagations;
             7       0    0              0             0       0              7           0    0              switch_mode = true;
            36       0    0              0             0       0              7           0    0              VSIDS_props_limit = VSIDS_props_limit + VSIDS_props_limit/10;
             .       .    .              .             .       .              .           .    .          }     
         9,662       0    0          4,831             3       0              0           0    0          if (VSIDS){
         2,658       0    0              0             0       0          2,658       2,657    0              int weighted = INT32_MAX;
        10,632   2,658    0              0             0       0          2,658           0    0              status = search(weighted);
             .       .    .              .             .       .              .           .    .          }else{
        13,038   1,435    6          4,346             0       0          2,173       2,154    0              int nof_conflicts = luby(restart_inc, curr_restarts) * restart_first;
         2,173       0    0              0             0       0              0           0    0              curr_restarts++;
        10,865   2,173    3              0             0       0          2,173           0    0              status = search(nof_conflicts);
             .       .    .              .             .       .              .           .    .          }
         9,662   2,173    2          4,831         4,831       5              0           0    0          if (switch_mode){ 
             7       0    0              0             0       0              7           0    0              switch_mode = false;
             .       .    .              .             .       .              .           .    .              VSIDS = !VSIDS;
            14       0    0              7             0       0              0           0    0              if (VSIDS){
             8       4    4              0             0       0              4           0    0                  printf("c Switched to VSIDS.\n");
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .              else{
             9       3    3              0             0       0              3           0    0                 printf("c Switched to LRB.\n");
             .       .    .              .             .       .              .           .    .              }
             .       .    .              .             .       .              .           .    .              //            reduceduplicates();            
            14       3    3              7             7       4              7           0    0              fflush(stdout);
             .       .    .              .             .       .              .           .    .              picked.clear();
             .       .    .              .             .       .              .           .    .              conflicted.clear();
             .       .    .              .             .       .              .           .    .              almost_conflicted.clear();
             .       .    .              .             .       .              .           .    .  #ifdef ANTI_EXPLORATION
             .       .    .              .             .       .              .           .    .              canceled.clear();
             .       .    .              .             .       .              .           .    .  #endif
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
             3       1    1              1             0       0              0           0    0      if (verbosity >= 1)
             2       0    0              0             0       0              1           0    0          printf("c ===============================================================================\n");
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  #ifdef BIN_DRUP
             3       0    0              1             0       0              0           0    0      if (drup_file && status == l_False) binDRUP_flush(drup_file);
             .       .    .              .             .       .              .           .    .  #endif
             .       .    .              .             .       .              .           .    .  
             2       1    1              0             0       0              0           0    0      if (status == l_True){
             .       .    .              .             .       .              .           .    .          // Extend & copy model:
             .       .    .              .             .       .              .           .    .          model.growTo(nVars());
             .       .    .              .             .       .              .           .    .          for (int i = 0; i < nVars(); i++) model[i] = value(i);
             6       1    1              1             0       0              0           0    0      }else if (status == l_False && conflict.size() == 0)
             2       0    0              0             0       0              1           1    0          ok = false;
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      cancelUntil(0);
             1       0    0              0             0       0              0           0    0      return status;
             8       1    1              7             1       1              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  //=================================================================================================
             .       .    .              .             .       .              .           .    .  // Writing CNF to DIMACS:
             .       .    .              .             .       .              .           .    .  // 
             .       .    .              .             .       .              .           .    .  // FIXME: this needs to be rewritten completely.
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  static Var mapVar(Var x, vec<Var>& map, Var& max)
             .       .    .              .             .       .              .           .    .  {
-- line 2341 ----------------------------------------
-- line 2409 ----------------------------------------
             .       .    .              .             .       .              .           .    .          printf("c Wrote %d clauses with %d variables.\n", cnt, max);
             .       .    .              .             .       .              .           .    .  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  //=================================================================================================
             .       .    .              .             .       .              .           .    .  // Garbage Collection methods:
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  void Solver::relocAll(ClauseAllocator& to)
         1,500      98   19              0             0       0          1,200           0    0  {
             .       .    .              .             .       .              .           .    .      // All watchers:
             .       .    .              .             .       .              .           .    .      //
             .       .    .              .             .       .              .           .    .      // for (int i = 0; i < watches.size(); i++)
           300       0    0              0             0       0            150           3    0      watches.cleanAll();
           300       0    0              0             0       0            150           0    0      watches_bin.cleanAll();
     3,413,400      14    5      2,388,900        14,705       0        341,550         149    0      for (int v = 0; v < nVars(); v++)
     1,365,000       0    0        682,500             0       0              0           0    0          for (int s = 0; s < 2; s++){
             .       .    .              .             .       .              .           .    .              Lit p = mkLit(v, s);
             .       .    .              .             .       .              .           .    .              // printf(" >>> RELOCING: %s%d\n", sign(p)?"-":"", var(p)+1);
             .       .    .              .             .       .              .           .    .              vec<Watcher>& ws = watches[p];
    69,075,813      29    9     37,568,580       170,696   2,756              0           0    0              for (int j = 0; j < ws.size(); j++)
             .       .    .              .             .       .              .           .    .                  ca.reloc(ws[j].cref, to);
             .       .    .              .             .       .              .           .    .              vec<Watcher>& ws_bin = watches_bin[p];
     6,275,525       2    1      2,478,480       179,473   1,951              0           0    0              for (int j = 0; j < ws_bin.size(); j++)
             .       .    .              .             .       .              .           .    .                  ca.reloc(ws_bin[j].cref, to);
             .       .    .              .             .       .              .           .    .          }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // All reasons:
             .       .    .              .             .       .              .           .    .      //
        90,684       0    0            450           150       0              0           0    0      for (int i = 0; i < trail.size(); i++){
             .       .    .              .             .       .              .           .    .          Var v = var(trail[i]);
             .       .    .              .             .       .              .           .    .  
       173,890       0    0         42,053        32,543       0              0           0    0          if (reason(v) != CRef_Undef && (ca[reason(v)].reloced() || locked(ca[reason(v)])))
       210,565       0    0         42,053             0       0         42,053           0    0              ca.reloc(vardata[v].reason, to);
             .       .    .              .             .       .              .           .    .      }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // All learnt:
             .       .    .              .             .       .              .           .    .      //
    11,164,368     142    7      5,582,107           214       0              0           0    0      for (int i = 0; i < learnts_core.size(); i++)
             .       .    .              .             .       .              .           .    .          ca.reloc(learnts_core[i], to);
     2,568,064     443   18      1,284,030           294       0              0           0    0      for (int i = 0; i < learnts_tier2.size(); i++)
             .       .    .              .             .       .              .           .    .          ca.reloc(learnts_tier2[i], to);
     3,984,462     150    6      1,991,933           152       0              0           0    0      for (int i = 0; i < learnts_local.size(); i++)
     5,974,899       0    0              0             0       0      1,991,633         144    0          ca.reloc(learnts_local[i], to);
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      // All original:
             .       .    .              .             .       .              .           .    .      //
             .       .    .              .             .       .              .           .    .      int i, j;
     1,001,126     149    6            600           290       0              0           0    0      for (i = j = 0; i < clauses.size(); i++)
       999,776       0    0              0             0       0              0           0    0          if (ca[clauses[i]].mark() != 1){
     1,474,749     149    7        491,483             2       0        491,483           3    0              ca.reloc(clauses[i], to);
     4,914,680     101    7      1,965,782             0       0        491,483         452    0              clauses[j++] = clauses[i]; }
           150     146    5              0             0       0              0           0    0      clauses.shrink(i - j);
         1,200     147    6          1,050           150       0              0           0    0  }
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .  void Solver::garbageCollect()
             .       .    .              .             .       .              .           .    .  {
             .       .    .              .             .       .              .           .    .      // Initialize the next region to a size corresponding to the estimated utilization degree. This
             .       .    .              .             .       .              .           .    .      // is not precise but should avoid some unnecessary reallocations for the new region:
             .       .    .              .             .       .              .           .    .      ClauseAllocator to(ca.size() - ca.wasted());
             .       .    .              .             .       .              .           .    .  
             .       .    .              .             .       .              .           .    .      relocAll(to);
             .       .    .              .             .       .              .           .    .      if (verbosity >= 2)
             .       .    .              .             .       .              .           .    .          printf("c |  Garbage collection:   %12d bytes => %12d bytes             |\n",
             .       .    .              .             .       .              .           .    .                 ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);
             .       .    .              .             .       .              .           .    .      to.moveTo(ca);
           155      18   18             47             4       4             61           0    0  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Vec.h
--------------------------------------------------------------------------------
Ir             I1mr    ILmr Dr             D1mr          DLmr Dw             D1mw          DLmw    

-- line 40 ----------------------------------------
             .       .    .              .             .    .              .             .       .      int sz;
             .       .    .              .             .    .              .             .       .      int cap;
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .      // Don't allow copying (error prone):
             .       .    .              .             .    .              .             .       .      vec<T>&  operator = (vec<T>& other) { assert(0); return *this; }
             .       .    .              .             .    .              .             .       .               vec        (vec<T>& other) { assert(0); }
             .       .    .              .             .    .              .             .       .               
             .       .    .              .             .    .              .             .       .      // Helpers for calculating next capacity:
     2,176,439      11    7              0             0    0              0             0       0      static inline int  imax   (int x, int y) { int mask = (y-x) >> (sizeof(int)*8-1); return (x&mask) + (y&(~mask)); }
             .       .    .              .             .    .              .             .       .      //static inline void nextCap(int& cap){ cap += ((cap >> 1) + 2) & ~1; }
             .       .    .              .             .    .              .             .       .      static inline void nextCap(int& cap){ cap += ((cap >> 1) + 2) & ~1; }
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .  public:
             .       .    .              .             .    .              .             .       .      // Constructors:
       649,662      30   27              2             0    0        638,283         2,979   2,678      vec()                       : data(NULL) , sz(0)   , cap(0)    { }
            44       0    0              0             0    0             44             0       0      explicit vec(int size)      : data(NULL) , sz(0)   , cap(0)    { growTo(size); }
             .       .    .              .             .    .              .             .       .      vec(int size, const T& pad) : data(NULL) , sz(0)   , cap(0)    { growTo(size, pad); }
             .       .    .              .             .    .              .             .       .     ~vec()                                                          { clear(true); }
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .      // Pointer to first element:
             .       .    .              .             .    .              .             .       .      operator T*       (void)           { return data; }
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .      // Size operations:
             .       .    .              .             .    .              .             .       .      int      size     (void) const     { return sz; }
   922,027,709     778    2     90,101,416     4,147,987    0     25,976,628             1       0      void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
             .       .    .              .             .    .              .             .       .      void     shrink_  (int nelems)     { assert(nelems <= sz); sz -= nelems; }
             .       .    .              .             .    .              .             .       .      int      capacity (void) const     { return cap; }
             .       .    .              .             .    .              .             .       .      void     capacity (int min_cap);
             .       .    .              .             .    .              .             .       .      void     growTo   (int size);
             .       .    .              .             .    .              .             .       .      void     growTo   (int size, const T& pad);
             .       .    .              .             .    .              .             .       .      void     clear    (bool dealloc = false);
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .      // Stack interface:
     9,151,613     215    4      4,570,716         1,211    0      2,286,853             0       0      void     push  (void)              { if (sz == cap) capacity(sz+1); new (&data[sz]) T(); sz++; }
68,210,601,998 183,728  170 24,116,151,071 1,611,651,755   93 19,019,579,470 2,511,521,301 395,637      void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
 1,668,281,610       0    0    422,564,917             0    0    817,068,660    28,292,357       1      void     push_ (const T& elem)     { assert(sz < cap); data[sz++] = elem; }
   411,525,701       7    1      6,342,130             0    0    202,732,748            24       0      void     pop   (void)              { assert(sz > 0); sz--, data[sz].~T(); }
             .       .    .              .             .    .              .             .       .      // NOTE: it seems possible that overflow can happen in the 'sz+1' expression of 'push()', but
             .       .    .              .             .    .              .             .       .      // in fact it can not since it requires that 'cap' is equal to INT_MAX. This in turn can not
             .       .    .              .             .    .              .             .       .      // happen given the way capacities are calculated (below). Essentially, all capacities are
             .       .    .              .             .    .              .             .       .      // even, but INT_MAX is odd.
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .      const T& last  (void) const        { return data[sz-1]; }
   195,839,855       0    0              0             0    0              0             0       0      T&       last  (void)              { return data[sz-1]; }
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .      // Vector interface:
48,658,463,324     387   44    157,094,230             0    0      6,418,116             0       0      const T& operator [] (int index) const { return data[index]; }
27,484,977,377     659   84  7,880,675,708     7,116,909  328    486,040,393         6,415       0      T&       operator [] (int index)       { return data[index]; }
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .      // Duplicatation (preferred instead):
   745,653,656      31   11    250,069,244       557,167    0    121,619,065             0       0      void copyTo(vec<T>& copy) const { copy.clear(); copy.growTo(sz); for (int i = 0; i < sz; i++) copy[i] = data[i]; }
        27,319       1    0         27,256             1    0             42             0       0      void moveTo(vec<T>& dest) { dest.clear(true); dest.data = data; dest.sz = sz; dest.cap = cap; data = NULL; sz = 0; cap = 0; }
             .       .    .              .             .    .              .             .       .  };
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .  template<class T>
       543,994       0    0              0             0    0        271,997             0       0  void vec<T>::capacity(int min_cap) {
     7,749,006      42   12      2,583,002             0    0              0             0       0      if (cap >= min_cap) return;
     1,904,437      16   10              0             0    0             30             0       0      int add = imax((min_cap - cap + 1) & ~1, ((cap >> 1) + 2) & ~1);   // NOTE: grow by approximately 3/2
     3,545,168      84   24        272,128             1    0        816,175           922       0      if (add > INT_MAX - cap || ((data = (T*)::realloc(data, (cap += add) * sizeof(T))) == NULL) && errno == ENOMEM)
             .       .    .              .             .    .              .             .       .          throw OutOfMemoryException();
     2,845,899       3    3      2,845,899            21    0              0             0       0   }
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .  template<class T>
             .       .    .              .             .    .              .             .       .  void vec<T>::growTo(int size, const T& pad) {
    19,067,082       9    8      6,353,419            32    0              0             0       0      if (sz >= size) return;
        45,500       4    4          4,550             0    0         20,475             0       0      capacity(size);
       257,077       7    7         40,951             0    0         20,476           259       0      for (int i = sz; i < size; i++) data[i] = pad;
     6,734,030      10    6          2,530             0    0         20,475             0       0      sz = size; }
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .  template<class T>
        45,500       1    1              0             0    0         18,200             0       0  void vec<T>::growTo(int size) {
     4,608,723       1    1         15,927            32    0          9,100             0       0      if (sz >= size) return;
     9,112,771   1,619    6              0             0    0      4,556,375             0       0      capacity(size);
    32,060,795      40   11      9,130,950             0    0      4,554,100             0       0      for (int i = sz; i < size; i++) new (&data[i]) T();
     6,878,977       0    0      2,304,401             8    0      2,288,437             1       0      sz = size; }
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .  template<class T>
             .       .    .              .             .    .              .             .       .  void vec<T>::clear(bool dealloc) {
   359,731,287 700,176   50    108,687,347     2,255,587    0          2,406             0       0      if (data != NULL){
         4,555       0    0              1             0    0              0             0       0          for (int i = 0; i < sz; i++) data[i].~T();
   739,349,682       9    7     15,861,743             2    0    127,636,905       121,242       0          sz = 0;
       154,491       5    5         10,415             0    0        143,407            14       0          if (dealloc) free(data), data = NULL, cap = 0; } }
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .  //=================================================================================================
             .       .    .              .             .    .              .             .       .  }
             .       .    .              .             .    .              .             .       .  
             .       .    .              .             .    .              .             .       .  #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/Solver.h
--------------------------------------------------------------------------------
Ir             I1mr  ILmr Dr             D1mr        DLmr  Dw          D1mw    DLmw 

-- line 77 ----------------------------------------
             .     .    .              .           .     .           .       .    .  private:
             .     .    .              .           .     .           .       .    .      template<typename T>
             .     .    .              .           .     .           .       .    .      class MyQueue {
             .     .    .              .           .     .           .       .    .          int max_sz, q_sz;
             .     .    .              .           .     .           .       .    .          int ptr;
             .     .    .              .           .     .           .       .    .          int64_t sum;
             .     .    .              .           .     .           .       .    .          vec<T> q;
             .     .    .              .           .     .           .       .    .      public:
             4     1    1              0           0     0           3       0    0          MyQueue(int sz) : max_sz(sz), q_sz(0), ptr(0), sum(0) { assert(sz > 0); q.growTo(sz); }
             .     .    .              .           .     .           .       .    .          inline bool   full () const { return q_sz == max_sz; }
             .     .    .              .           .     .           .       .    .  #ifdef INT_QUEUE_AVG
     1,941,476    19    4        485,369           0     0           0       0    0          inline T      avg  () const { assert(full()); return sum / max_sz; }
             .     .    .              .           .     .           .       .    .  #else
             .     .    .              .           .     .           .       .    .          inline double avg  () const { assert(full()); return sum / (double) max_sz; }
             .     .    .              .           .     .           .       .    .  #endif
         9,796    19    8              0           0     0       9,796   1,788    0          inline void   clear()       { sum = 0; q_sz = 0; ptr = 0; }
             .     .    .              .           .     .           .       .    .          void push(T e) {
     6,937,676     0    0      3,332,538           0     0     136,300       0    0              if (q_sz < max_sz) q_sz++;
     2,923,638     5    4        974,546     969,558     0           0       0    0              else sum -= q[ptr];
     3,332,538    25   10              0           0     0   1,110,846       0    0              sum += e;
     3,332,538     0    0              0           0     0   2,221,692 135,756    9              q[ptr++] = e;
     3,354,117     0    0      2,221,692           0     0      21,579       0    0              if (ptr == max_sz) ptr = 0;
             .     .    .              .           .     .           .       .    .          }
             .     .    .              .           .     .           .       .    .      };
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .  public:
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .      // Constructor/Destructor:
             .     .    .              .           .     .           .       .    .      //
             .     .    .              .           .     .           .       .    .      Solver();
             .     .    .              .           .     .           .       .    .      virtual ~Solver();
            10     2    2              0           0     0           4       0    0      void print_size(std::ostream &os)
             .     .    .              .           .     .           .       .    .      {
             4     2    2              0           0     0           4       1    0          program_end_time=std::chrono::steady_clock::now();
             2     0    0              0           0     0           2       0    0          total_work_time=program_end_time-program_start_time;
             4     0    0              2           0     0           0       0    0          os << "clause_allocate_size " << ca.size() * sizeof(int) << "\n";
             2     0    0              2           0     0           0       0    0          os << "model " << model.size() * sizeof(model[0]) << "\n";
             4     0    0              2           0     0           0       0    0          os << "conflict " << conflict.size() * sizeof(conflict[0]) << "\n";
             4     0    0              2           0     0           0       0    0          os << "clauses " << clauses.size() * sizeof(clauses[0]) << "\n";
             4     0    0              2           0     0           0       0    0          os << "learnts_core " << learnts_core.size() * sizeof(learnts_core[0]) << "\n";
             4     0    0              2           1     0           0       0    0          os << "activity_CHB " << activity_CHB.size() * sizeof(activity_CHB[0]) << "\n";
             .     .    .              .           .     .           .       .    .          os << "watches_bin " << watches_bin.size() * sizeof(Watcher) << "\n";
             .     .    .              .           .     .           .       .    .          os << "watches " << watches.size() * sizeof(Watcher) << "\n";
             2     0    0              2           2     0           0       0    0          os << "assigns " << assigns.size() * sizeof(assigns[0]) << "\n";
             2     0    0              2           0     0           0       0    0          os << "polarity " << polarity.size() * sizeof(polarity[0]) << "\n";
             2     0    0              2           0     0           0       0    0          os << "decision " << decision.size() * sizeof(decision[0]) << "\n";
             4     0    0              2           0     0           0       0    0          os << "trail " << trail.size() * sizeof(trail[0]) << "\n";
             4     0    0              2           2     0           0       0    0          os << "trail_lim " << trail_lim.size() * sizeof(trail_lim[0]) << "\n";
             4     0    0              2           0     0           0       0    0          os << "vardata " << vardata.size() * sizeof(vardata[0]) << "\n";
             4     0    0              2           0     0           0       0    0          os << "assumptions " << assumptions.size() * sizeof(assumptions[0]) << "\n";
             .     .    .              .           .     .           .       .    .          os << "total_Watchers: " << total_Watchers << "\n";
             .     .    .              .           .     .           .       .    .          os << "total_act_watchers: " << total_act_watchers << "\n";
             .     .    .              .           .     .           .       .    .          os << "total_indexs: " << total_indexs << "\n";
             .     .    .              .           .     .           .       .    .          os << "time_find_conflict: " << time_find_conflict << "\n";
             .     .    .              .           .     .           .       .    .          os << "total_find_conflict_length: " << total_find_conflict_length << "\n";
             .     .    .              .           .     .           .       .    .          os << "total_find_conflict_allsize: " << total_find_conflict_allsize << "\n";
             .     .    .              .           .     .           .       .    .          os << "total_propagation_time: " << total_duration.count() << "\n";
             .     .    .              .           .     .           .       .    .          os << "total_work_time: "<< total_work_time.count()<<"\n";
-- line 134 ----------------------------------------
-- line 137 ----------------------------------------
             .     .    .              .           .     .           .       .    .          os<<"total_watch_access: "<<total_watch_access<<"\n";
             .     .    .              .           .     .           .       .    .          os<<"total_clause_access_times: "<<total_clause_access_times<<"\n";
             .     .    .              .           .     .           .       .    .          os<<"total_clause_access_size: "<<total_clause_access_size<<"\n";
             .     .    .              .           .     .           .       .    .          os<<"total_change_other_watch: "<<total_change_other_watch<<"\n";
             .     .    .              .           .     .           .       .    .          os<<"total_push_new_implication: "<<total_push_new_implication<<"\n";
             .     .    .              .           .     .           .       .    .          os<<"total_no_clause_access: "<<total_no_clause_access<<"\n";
             .     .    .              .           .     .           .       .    .          os<<"total_no_implication_added: "<<total_no_implication_added<<"\n";
             .     .    .              .           .     .           .       .    .          os<<"total_no_change_other_watch: "<<total_no_change_other_watch<<"\n";
             6     0    0              4           0     0           0       0    0      }
             .     .    .              .           .     .           .       .    .      using ull=unsigned long long;
             .     .    .              .           .     .           .       .    .      ull total_Watchers = 0;
             .     .    .              .           .     .           .       .    .      ull total_act_watchers = 0;
             .     .    .              .           .     .           .       .    .      ull total_indexs = 0;
             .     .    .              .           .     .           .       .    .      ull time_find_conflict = 0;
             .     .    .              .           .     .           .       .    .      ull total_find_conflict_length = 0;
             .     .    .              .           .     .           .       .    .      ull total_find_conflict_allsize = 0;
             .     .    .              .           .     .           .       .    .      ull total_access_clause=0;
-- line 153 ----------------------------------------
-- line 310 ----------------------------------------
             .     .    .              .           .     .           .       .    .      {
             .     .    .              .           .     .           .       .    .          const ClauseAllocator& ca;
             .     .    .              .           .     .           .       .    .          WatcherDeleted(const ClauseAllocator& _ca) : ca(_ca) {}
             .     .    .              .           .     .           .       .    .          bool operator()(const Watcher& w) const { return ca[w.cref].mark() == 1; }
             .     .    .              .           .     .           .       .    .      };
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .      struct VarOrderLt {
             .     .    .              .           .     .           .       .    .          const vec<double>&  activity;
 1,307,824,748   170   32    953,763,921 100,903,744 1,871  60,654,009       0    0          bool operator () (Var x, Var y) const { return activity[x] > activity[y]; }
             .     .    .              .           .     .           .       .    .          VarOrderLt(const vec<double>&  act) : activity(act) { }
             .     .    .              .           .     .           .       .    .      };
             .     .    .              .           .     .           .       .    .      
             .     .    .              .           .     .           .       .    .      struct ConflictData
             .     .    .              .           .     .           .       .    .  	{
             .     .    .              .           .     .           .       .    .  		ConflictData() :
             .     .    .              .           .     .           .       .    .  			nHighestLevel(-1),
             .     .    .              .           .     .           .       .    .  			bOnlyOneLitFromHighest(false)
-- line 326 ----------------------------------------
-- line 404 ----------------------------------------
             .     .    .              .           .     .           .       .    .      Lit      pickBranchLit    ();                                                      // Return the next decision variable.
             .     .    .              .           .     .           .       .    .      void     newDecisionLevel ();                                                      // Begins a new decision level.
             .     .    .              .           .     .           .       .    .      void     uncheckedEnqueue (Lit p, int level = 0, CRef from = CRef_Undef);                         // Enqueue a literal. Assumes value of literal is undefined.
             .     .    .              .           .     .           .       .    .      bool     enqueue          (Lit p, CRef from = CRef_Undef);                         // Test if fact 'p' contradicts current state, enqueue otherwise.
             .     .    .              .           .     .           .       .    .      CRef     propagate_        ();                                                      // Perform unit propagation. Returns possibly conflicting clause.
             .     .    .              .           .     .           .       .    .      std::chrono::nanoseconds total_duration;
             .     .    .              .           .     .           .       .    .      CRef     propagate(){
             .     .    .              .           .     .           .       .    .  
     9,813,818 5,698    9              0           0     0   4,906,909       0    0          auto start_time=std::chrono::steady_clock::now();
    14,720,727     0    0              0           0     0   4,906,909       0    0          auto ref= propagate_();
     4,906,909     0    0              0           0     0   4,906,909       0    0          auto end_time=std::chrono::steady_clock::now();
             .     .    .              .           .     .           .       .    .          auto duration=end_time-start_time;
             .     .    .              .           .     .           .       .    .          total_duration+=duration;
             .     .    .              .           .     .           .       .    .          return ref;
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .      }
             .     .    .              .           .     .           .       .    .      void     cancelUntil      (int level);                                             // Backtrack until a certain level.
             .     .    .              .           .     .           .       .    .      void     analyze          (CRef confl, vec<Lit>& out_learnt, int& out_btlevel, int& out_lbd);    // (bt = backtrack)
             .     .    .              .           .     .           .       .    .      void     analyzeFinal     (Lit p, vec<Lit>& out_conflict);                         // COULD THIS BE IMPLEMENTED BY THE ORDINARIY "analyze" BY SOME REASONABLE GENERALIZATION?
-- line 422 ----------------------------------------
-- line 461 ----------------------------------------
             .     .    .              .           .     .           .       .    .      
             .     .    .              .           .     .           .       .    .  public:
             .     .    .              .           .     .           .       .    .      int      level            (Var x) const;
             .     .    .              .           .     .           .       .    .  protected:
             .     .    .              .           .     .           .       .    .      double   progressEstimate ()      const; // DELETE THIS ?? IT'S NOT VERY USEFUL ...
             .     .    .              .           .     .           .       .    .      bool     withinBudget     ()      const;
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .      template<class V> int computeLBD(const V& c) {
    80,974,906    45   13              0           0     0           0       0    0          int lbd = 0;
             .     .    .              .           .     .           .       .    .  
    14,865,908    48   18     12,588,870   1,497,972     0           0       0    0          counter++;
   378,294,080     0    0      2,283,916           0     0           0       0    0          for (int i = 0; i < c.size(); i++){
             .     .    .              .           .     .           .       .    .              int l = level(var(c[i]));
   862,522,792     0    0    344,983,976   7,156,370    10           0       0    0              if (l != 0 && seen2[l] != counter){
    83,675,533     0    0              0           0     0  83,675,533       0    0                  seen2[l] = counter;
   132,705,677     0    0              0           0     0           0       0    0                  lbd++; } }
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .          return lbd;
             .     .    .              .           .     .           .       .    .      }
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .  #ifdef BIN_DRUP
             .     .    .              .           .     .           .       .    .      static int buf_len;
             .     .    .              .           .     .           .       .    .      static unsigned char drup_buf[];
             .     .    .              .           .     .           .       .    .      static unsigned char* buf_ptr;
-- line 484 ----------------------------------------
-- line 493 ----------------------------------------
             .     .    .              .           .     .           .       .    .      }
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .      template<class V>
             .     .    .              .           .     .           .       .    .      static inline void binDRUP(unsigned char op, const V& c, FILE* drup_file){
             .     .    .              .           .     .           .       .    .          assert(op == 'a' || op == 'd');
             .     .    .              .           .     .           .       .    .          *buf_ptr++ = op; buf_len++;
             .     .    .              .           .     .           .       .    .          for (int i = 0; i < c.size(); i++) byteDRUP(c[i]);
             .     .    .              .           .     .           .       .    .          *buf_ptr++ = 0; buf_len++;
       254,036    41   12              0           0     0     254,036       0    0          if (buf_len > 1048576) binDRUP_flush(drup_file);
             .     .    .              .           .     .           .       .    .      }
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .      static inline void binDRUP_strengthen(const Clause& c, Lit l, FILE* drup_file){
             .     .    .              .           .     .           .       .    .          *buf_ptr++ = 'a'; buf_len++;
             .     .    .              .           .     .           .       .    .          for (int i = 0; i < c.size(); i++)
             .     .    .              .           .     .           .       .    .              if (c[i] != l) byteDRUP(c[i]);
             .     .    .              .           .     .           .       .    .          *buf_ptr++ = 0; buf_len++;
             .     .    .              .           .     .           .       .    .          if (buf_len > 1048576) binDRUP_flush(drup_file);
-- line 509 ----------------------------------------
-- line 571 ----------------------------------------
             .     .    .              .           .     .           .       .    .      double    my_var_decay;
             .     .    .              .           .     .           .       .    .      bool   DISTANCE;
             .     .    .              .           .     .           .       .    .  };
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .  //=================================================================================================
             .     .    .              .           .     .           .       .    .  // Implementation of inline methods:
             .     .    .              .           .     .           .       .    .  
   274,247,254     0    0    274,247,254   5,329,663     4           0       0    0  inline CRef Solver::reason(Var x) const { return vardata[x].reason; }
 2,034,615,512    55   14  1,705,924,909 294,254,015     2 320,572,308       0    0  inline int  Solver::level (Var x) const { return vardata[x].level; }
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .  inline void Solver::insertVarOrder(Var x) {
             .     .    .              .           .     .           .       .    .      //    Heap<VarOrderLt>& order_heap = VSIDS ? order_heap_VSIDS : order_heap_CHB;
 2,370,561,446   100   10    734,438,526     989,505     0           0       0    0      Heap<VarOrderLt>& order_heap = DISTANCE ? order_heap_distance : ((!VSIDS)? order_heap_CHB:order_heap_VSIDS);
    19,018,911     1    1     12,679,274   4,845,869    30           0       0    0      if (!order_heap.inHeap(x) && decision[x]) order_heap.insert(x); }
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .  inline void Solver::varDecayActivity() {
     4,443,384     0    0      2,221,692     402,100     0   1,110,846       0    0      var_inc *= (1 / var_decay); }
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .  inline void Solver::varBumpActivity(Var v, double mult) {
   896,101,297     6    5    544,127,978  58,911,268   175 135,462,735       0    0      if ( (activity_VSIDS[v] += var_inc * mult) > 1e100 ) {
             .     .    .              .           .     .           .       .    .          // Rescale:
         2,762    98   16              1           0     0           0       0    0          for (int i = 0; i < nVars(); i++)
     1,256,352     0    0        314,364      66,353    49     314,088       0    0              activity_VSIDS[i] *= 1e-100;
           552     0    0            276           0     0         276       0    0          var_inc *= 1e-100; }
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .      // Update order_heap with respect to new activity:
    94,689,060     0    0              0           0     0           0       0    0      if (order_heap_VSIDS.inHeap(v)) order_heap_VSIDS.decrease(v); }
             .     .    .              .           .     .           .       .    .  
     9,108,152    72    0      4,554,076         331     0   2,277,038       0    0  inline void Solver::claDecayActivity() { cla_inc *= (1 / clause_decay); }
             .     .    .              .           .     .           .       .    .  inline void Solver::claBumpActivity (Clause& c) {
    55,695,850   368    9     16,581,275   2,761,931     4   5,633,325   5,798   13      if ( (c.activity() += cla_inc) > 1e20 ) {
             .     .    .              .           .     .           .       .    .          // Rescale:
     3,127,097    49    8            147           0     0           0       0    0          for (int i = 0; i < learnts_local.size(); i++)
     7,295,645     5    0      1,042,235     910,946     0   1,042,235       0    0              ca[learnts_local[i]].activity() *= 1e-20;
       637,547   113    7        318,700           0     0          49      49    0          cla_inc *= 1e-20; } }
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .  inline void Solver::checkGarbage(void){ return checkGarbage(garbage_frac); }
             .     .    .              .           .     .           .       .    .  inline void Solver::checkGarbage(double gf){
        23,535   137    0          7,845         210     0           0       0    0      if (ca.wasted() > ca.size() * gf)
           591     1    1            298         298     7           5       1    0          garbageCollect(); }
             .     .    .              .           .     .           .       .    .  
             .     .    .              .           .     .           .       .    .  // NOTE: enqueue does not set the ok flag! (only public methods do)
             .     .    .              .           .     .           .       .    .  inline bool     Solver::enqueue         (Lit p, CRef from)      { return value(p) != l_Undef ? value(p) != l_False : (uncheckedEnqueue(p, decisionLevel(), from), true); }
             .     .    .              .           .     .           .       .    .  inline bool     Solver::addClause       (const vec<Lit>& ps)    { ps.copyTo(add_tmp); return addClause_(add_tmp); }
             .     .    .              .           .     .           .       .    .  inline bool     Solver::addEmptyClause  ()                      { add_tmp.clear(); return addClause_(add_tmp); }
             .     .    .              .           .     .           .       .    .  inline bool     Solver::addClause       (Lit p)                 { add_tmp.clear(); add_tmp.push(p); return addClause_(add_tmp); }
             .     .    .              .           .     .           .       .    .  inline bool     Solver::addClause       (Lit p, Lit q)          { add_tmp.clear(); add_tmp.push(p); add_tmp.push(q); return addClause_(add_tmp); }
             .     .    .              .           .     .           .       .    .  inline bool     Solver::addClause       (Lit p, Lit q, Lit r)   { add_tmp.clear(); add_tmp.push(p); add_tmp.push(q); add_tmp.push(r); return addClause_(add_tmp); }
             .     .    .              .           .     .           .       .    .  inline bool     Solver::locked          (const Clause& c) const {
    30,281,914   151    4      9,803,508     225,471     0           0       0    0      int i = c.size() != 2 ? 0 : (value(c[0]) == l_True ? 0 : 1);
    36,115,950   295    8      8,091,407     163,667     0           0       0    0      return value(c[i]) == l_True && reason(var(c[i])) != CRef_Undef && ca.lea(reason(var(c[i]))) == &c;
             .     .    .              .           .     .           .       .    .  }
     5,240,018     1    1      2,620,004           0     0           0       0    0  inline void     Solver::newDecisionLevel()                      { trail_lim.push(trail.size()); }
             .     .    .              .           .     .           .       .    .  
       207,718     2    1        111,517           0     0      96,201       0    0  inline int      Solver::decisionLevel ()      const   { return trail_lim.size(); }
   727,598,535 1,636    6    119,342,027   6,016,502     0           0       0    0  inline uint32_t Solver::abstractLevel (Var x) const   { return 1 << (level(x) & 31); }
     6,354,767     0    0      6,354,767         186     0           0       0    0  inline lbool    Solver::value         (Var x) const   { return assigns[x]; }
29,905,284,547    48   16 29,905,284,547         622     0           0       0    0  inline lbool    Solver::value         (Lit p) const   { return assigns[var(p)] ^ sign(p); }
             .     .    .              .           .     .           .       .    .  inline lbool    Solver::modelValue    (Var x) const   { return model[x]; }
             .     .    .              .           .     .           .       .    .  inline lbool    Solver::modelValue    (Lit p) const   { return model[var(p)] ^ sign(p); }
             .     .    .              .           .     .           .       .    .  inline int      Solver::nAssigns      ()      const   { return trail.size(); }
             3     0    0              2           0     0           1       1    0  inline int      Solver::nClauses      ()      const   { return clauses.size(); }
             .     .    .              .           .     .           .       .    .  inline int      Solver::nLearnts      ()      const   { return learnts_core.size() + learnts_tier2.size() + learnts_local.size(); }
       664,823     0    0         16,499          12     0           3       0    0  inline int      Solver::nVars         ()      const   { return vardata.size(); }
             6     1    1              3           3     0           0       0    0  inline int      Solver::nFreeVars     ()      const   { return (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]); }
             .     .    .              .           .     .           .       .    .  inline void     Solver::setPolarity   (Var v, bool b) { polarity[v] = b; }
             .     .    .              .           .     .           .       .    .  inline void     Solver::setDecisionVar(Var v, bool b) 
             .     .    .              .           .     .           .       .    .  { 
        13,650     0    0          6,825          18     0           0       0    0      if      ( b && !decision[v]) dec_vars++;
         4,869     0    0          3,246         882     0           0       0    0      else if (!b &&  decision[v]) dec_vars--;
             .     .    .              .           .     .           .       .    .  
         3,898     0    0              0           0     0       3,898       0    0      decision[v] = b;
             .     .    .              .           .     .           .       .    .      if (b && !order_heap_CHB.inHeap(v)){
             .     .    .              .           .     .           .       .    .          order_heap_CHB.insert(v);
             .     .    .              .           .     .           .       .    .          order_heap_VSIDS.insert(v);
             .     .    .              .           .     .           .       .    .          order_heap_distance.insert(v);}
             .     .    .              .           .     .           .       .    .  }
             .     .    .              .           .     .           .       .    .  inline void     Solver::setConfBudget(int64_t x){ conflict_budget    = conflicts    + x; }
             .     .    .              .           .     .           .       .    .  inline void     Solver::setPropBudget(int64_t x){ propagation_budget = propagations + x; }
             .     .    .              .           .     .           .       .    .  inline void     Solver::interrupt(){ asynch_interrupt = true; }
-- line 651 ----------------------------------------

--------------------------------------------------------------------------------
Ir                I1mr      ILmr  Dr              D1mr           DLmr    Dw              D1mw          DLmw      
--------------------------------------------------------------------------------
1,154,667,173,435 1,383,170 3,049 379,335,174,363 18,538,167,239 746,478 130,772,623,367 3,666,239,350 1,694,358  events annotated

