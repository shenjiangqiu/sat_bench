--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         31457280 B, 64 B, 30-way associative
Command:          ./glucose_release ./cnfs/toughsat_25bits_1.cnf
Data file:        toughsat_25bits_1.cnf.out.cache
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir              I1mr      ILmr  Dr              D1mr           DLmr      Dw             D1mw          DLmw      
--------------------------------------------------------------------------------
802,403,253,759 1,617,163 8,837 259,137,328,984 12,614,150,198 2,323,656 93,042,874,003 2,165,443,159 4,114,559  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir              I1mr    ILmr Dr              D1mr          DLmr    Dw             D1mw          DLmw       file:function
--------------------------------------------------------------------------------
347,867,956,407   1,678   50 133,025,604,298 7,034,870,710 228,305 42,807,220,512     7,618,179         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/..//core/Solver.cc:Minisat::Solver::propagate_()
137,863,435,837       8    3  24,278,803,228 1,064,263,707  66,780 18,977,724,054             0         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/SolverTypes.h:Minisat::Solver::propagate_()
 78,148,165,662  60,913   14  18,887,533,449   595,147,028     388 11,372,301,282 1,293,951,704   332,919  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Vec.h:Minisat::Solver::propagate_()
 66,625,730,631     261  117  18,019,398,665 2,355,717,438     977  6,821,815,419    24,686,044         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/..//core/Solver.cc:Minisat::Solver::simplePropagate()
 45,368,199,440      58   27  11,005,993,929   438,490,067     789              0             0         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/SolverTypes.h:Minisat::Solver::simplePropagate()
 29,224,302,532      37   14   7,012,010,026   190,259,926       0  5,241,531,697   519,630,119    56,801  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Vec.h:Minisat::Solver::simplePropagate()
 15,227,118,208       3    2  15,099,252,365    57,344,632       0    127,865,029             0         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/Solver.h:Minisat::Solver::propagate_()
 10,128,223,710       0    0   5,064,111,855           525       0              0             0         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Alloc.h:Minisat::Solver::propagate_()
  6,734,249,488  18,985  108   2,512,386,931    66,428,663      25    420,372,618     1,333,132        43  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/..//core/Solver.cc:Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&, int&)
  4,528,571,689   8,404   47   1,762,522,218    67,048,140       0    542,717,125    16,769,829         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/..//core/Solver.cc:Minisat::Solver::cancelUntil(int) [clone .part.108]
  4,234,493,003       8    4   1,817,329,373    65,554,450       0  1,288,114,329   199,113,076       211  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/..//core/Solver.cc:Minisat::Solver::uncheckedEnqueue(Minisat::Lit, int, unsigned int)
  3,934,983,872       0    0   1,967,491,936         3,900       0              0             0         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Alloc.h:Minisat::Solver::simplePropagate()
  3,867,574,216 307,745  158     834,720,935    24,078,665      51    376,452,128     5,166,278         0  ???:__ieee754_pow_fma
  3,795,418,733   5,167   39   1,299,791,374    19,151,318      37    420,862,561       691,769         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/..//core/Solver.cc:Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)
  3,453,362,607   2,803   65     784,075,504       533,058       1    312,069,505     6,428,450     4,133  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Vec.h:Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&, int&)
  3,131,089,943       0    0   3,131,089,943            40       0              0             0         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/Solver.h:Minisat::Solver::simplePropagate()
  3,028,285,110  14,483    8   1,180,797,207    83,806,537       0    776,277,520     7,707,664         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Heap.h:Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int)
  2,767,807,669 268,538   13     739,774,932             0       0    482,327,780     2,366,538        69  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Vec.h:Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)
  2,754,956,775     906   40     683,124,465    58,482,982     617     28,332,240        45,538         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/SolverTypes.h:Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&, int&)
  2,538,560,018     339   11   1,206,874,004    18,758,460      16    149,701,073     1,406,343         1  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Heap.h:Minisat::Solver::cancelUntil(int) [clone .part.108]
  1,912,572,589     243   48     902,008,465    22,328,984      45    143,303,871            24         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/Solver.h:Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&, int&)
  1,545,517,336     109   38     305,625,003    19,798,815     324    159,802,915    10,046,793       168  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Heap.h:Minisat::Solver::pickBranchLit()
  1,467,641,216      24   16     480,263,900    13,339,894       0    278,864,594     4,738,551         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Heap.h:Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int)
  1,386,801,485     328   56     310,186,746    27,248,334       9     93,905,593             0         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Alg.h:Minisat::Solver::detachClause(unsigned int, bool)
  1,327,859,855      86   12     378,278,678    57,584,149     158              0             0         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/SolverTypes.h:Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)
  1,178,684,180     858   35     536,338,953    24,055,781      26    166,792,170     2,550,817         1  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Heap.h:Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&, int&)
  1,177,742,804   2,344   55     282,641,456    16,794,372     518     31,409,765        25,193         0  ???:__exp1_fma
  1,104,837,585     165   10     459,784,280     2,371,050       9              0             0         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/Solver.h:Minisat::Solver::cancelUntil(int) [clone .part.108]
    936,563,566       2    2     322,973,032     1,652,763       0    290,617,502    11,512,966        89  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Vec.h:Minisat::Solver::uncheckedEnqueue(Minisat::Lit, int, unsigned int)
    871,853,810       0    0     581,235,611     4,548,324       0    145,308,706     9,894,145        14  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/SolverTypes.h:Minisat::Solver::cancelUntil(int) [clone .part.108]
    807,609,941     807   21     247,821,980        55,919       0     20,999,920       699,311         0  /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Vec.h:Minisat::Solver::cancelUntil(int) [clone .part.108]

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Vec.h
--------------------------------------------------------------------------------
Ir             I1mr    ILmr Dr             D1mr        DLmr Dw             D1mw          DLmw    

-- line 40 ----------------------------------------
             .       .    .              .           .    .              .             .       .      int sz;
             .       .    .              .           .    .              .             .       .      int cap;
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .      // Don't allow copying (error prone):
             .       .    .              .           .    .              .             .       .      vec<T>&  operator = (vec<T>& other) { assert(0); return *this; }
             .       .    .              .           .    .              .             .       .               vec        (vec<T>& other) { assert(0); }
             .       .    .              .           .    .              .             .       .               
             .       .    .              .           .    .              .             .       .      // Helpers for calculating next capacity:
     2,335,005      11    8              0           0    0              0             0       0      static inline int  imax   (int x, int y) { int mask = (y-x) >> (sizeof(int)*8-1); return (x&mask) + (y&(~mask)); }
             .       .    .              .           .    .              .             .       .      //static inline void nextCap(int& cap){ cap += ((cap >> 1) + 2) & ~1; }
             .       .    .              .           .    .              .             .       .      static inline void nextCap(int& cap){ cap += ((cap >> 1) + 2) & ~1; }
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .  public:
             .       .    .              .           .    .              .             .       .      // Constructors:
       584,370      30   25              2           0    0        580,231         1,157     995      vec()                       : data(NULL) , sz(0)   , cap(0)    { }
            50       0    0              0           0    0             50             0       0      explicit vec(int size)      : data(NULL) , sz(0)   , cap(0)    { growTo(size); }
             .       .    .              .           .    .              .             .       .      vec(int size, const T& pad) : data(NULL) , sz(0)   , cap(0)    { growTo(size, pad); }
             .       .    .              .           .    .              .             .       .     ~vec()                                                          { clear(true); }
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .      // Pointer to first element:
             .       .    .              .           .    .              .             .       .      operator T*       (void)           { return data; }
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .      // Size operations:
             .       .    .              .           .    .              .             .       .      int      size     (void) const     { return sz; }
   446,148,102     489    6     64,406,816   3,938,392    0     16,482,911             1       0      void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
             .       .    .              .           .    .              .             .       .      void     shrink_  (int nelems)     { assert(nelems <= sz); sz -= nelems; }
             .       .    .              .           .    .              .             .       .      int      capacity (void) const     { return cap; }
             .       .    .              .           .    .              .             .       .      void     capacity (int min_cap);
             .       .    .              .           .    .              .             .       .      void     growTo   (int size);
             .       .    .              .           .    .              .             .       .      void     growTo   (int size, const T& pad);
             .       .    .              .           .    .              .             .       .      void     clear    (bool dealloc = false);
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .      // Stack interface:
     4,610,491     191    3      2,301,161         396    0      1,152,612             0       0      void     push  (void)              { if (sz == cap) capacity(sz+1); new (&data[sz]) T(); sz++; }
60,886,408,634  64,088  178 21,289,247,463 779,845,092  389 17,031,310,401 1,827,050,560 411,296      void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
   709,108,688       0    0    176,241,572           0    0    343,330,488    14,217,276      89      void     push_ (const T& elem)     { assert(sz < cap); data[sz++] = elem; }
   158,778,832       2    2      5,467,480           0    0     76,790,587             2       0      void     pop   (void)              { assert(sz > 0); sz--, data[sz].~T(); }
             .       .    .              .           .    .              .             .       .      // NOTE: it seems possible that overflow can happen in the 'sz+1' expression of 'push()', but
             .       .    .              .           .    .              .             .       .      // in fact it can not since it requires that 'cap' is equal to INT_MAX. This in turn can not
             .       .    .              .           .    .              .             .       .      // happen given the way capacities are calculated (below). Essentially, all capacities are
             .       .    .              .           .    .              .             .       .      // even, but INT_MAX is odd.
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .      const T& last  (void) const        { return data[sz-1]; }
    70,804,711       0    0              0           0    0              0             0       0      T&       last  (void)              { return data[sz-1]; }
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .      // Vector interface:
32,330,324,952     821   51     91,680,643           0    0      5,716,738             0       0      const T& operator [] (int index) const { return data[index]; }
21,155,304,331     372  113  6,323,011,794   6,203,693  153    214,922,492            17       0      T&       operator [] (int index)       { return data[index]; }
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .      // Duplicatation (preferred instead):
   283,365,716      23   10     95,219,284      31,382    0     45,890,540             0       0      void copyTo(vec<T>& copy) const { copy.clear(); copy.growTo(sz); for (int i = 0; i < sz; i++) copy[i] = data[i]; }
       117,242       1    0        117,170           4    0             48             0       0      void moveTo(vec<T>& dest) { dest.clear(true); dest.data = data; dest.sz = sz; dest.cap = cap; data = NULL; sz = 0; cap = 0; }
             .       .    .              .           .    .              .             .       .  };
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .  template<class T>
       583,668       0    0              0           0    0        291,834             0       0  void vec<T>::capacity(int min_cap) {
     4,350,525      52   12      1,450,175           0    0              0             0       0      if (cap >= min_cap) return;
     2,043,179      15    7              0           0    0              8             0       0      int add = imax((min_cap - cap + 1) & ~1, ((cap >> 1) + 2) & ~1);   // NOTE: grow by approximately 3/2
     3,794,329      79   20        291,900           0    0        875,632           589       0      if (add > INT_MAX - cap || ((data = (T*)::realloc(data, (cap += add) * sizeof(T))) == NULL) && errno == ENOMEM)
             .       .    .              .           .    .              .             .       .          throw OutOfMemoryException();
     1,738,701       2    2      1,738,701           9    0              0             0       0   }
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .  template<class T>
             .       .    .              .           .    .              .             .       .  void vec<T>::growTo(int size, const T& pad) {
    16,416,795      10    8      5,471,438          83    0              0             0       0      if (sz >= size) return;
        16,540       4    4          1,654           0    0          7,443             0       0      capacity(size);
        93,453       7    7         14,887           0    0          7,444           309       0      for (int i = sz; i < size; i++) data[i] = pad;
     7,437,902      10    5          2,288           0    0          7,443             0       0      sz = size; }
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .  template<class T>
        16,540       1    1              0           0    0          6,616             0       0  void vec<T>::growTo(int size) {
     2,312,039       1    1          5,792          76    0          3,308             0       0      if (sz >= size) return;
     4,586,006     748    7              0           0    0      2,292,991             0       0      capacity(size);
    16,111,464      31   11      4,592,598           0    0      2,292,163             0       0      for (int i = sz; i < size; i++) new (&data[i]) T();
     3,455,674       0    0      1,156,065           8    0      1,150,231             3       0      sz = size; }
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .  template<class T>
             .       .    .              .           .    .              .             .       .  void vec<T>::clear(bool dealloc) {
   146,117,494 269,019   59     39,593,116   1,124,708    0            819             0       0      if (data != NULL){
         1,659       0    0              1           0    0              0             0       0          for (int i = 0; i < sz; i++) data[i].~T();
   280,913,212      11    5     13,270,646           0    0     54,267,282        89,894       0          sz = 0;
       142,348       5    5          4,105           0    0        137,407            29       0          if (dealloc) free(data), data = NULL, cap = 0; } }
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .  //=================================================================================================
             .       .    .              .           .    .              .             .       .  }
             .       .    .              .           .    .              .             .       .  
             .       .    .              .           .    .              .             .       .  #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/Solver.h
--------------------------------------------------------------------------------
Ir             I1mr  ILmr Dr             D1mr       DLmr Dw          D1mw   DLmw 

-- line 77 ----------------------------------------
             .     .    .              .          .    .           .      .    .  private:
             .     .    .              .          .    .           .      .    .      template<typename T>
             .     .    .              .          .    .           .      .    .      class MyQueue {
             .     .    .              .          .    .           .      .    .          int max_sz, q_sz;
             .     .    .              .          .    .           .      .    .          int ptr;
             .     .    .              .          .    .           .      .    .          int64_t sum;
             .     .    .              .          .    .           .      .    .          vec<T> q;
             .     .    .              .          .    .           .      .    .      public:
             4     1    1              0          0    0           3      0    0          MyQueue(int sz) : max_sz(sz), q_sz(0), ptr(0), sum(0) { assert(sz > 0); q.growTo(sz); }
             .     .    .              .          .    .           .      .    .          inline bool   full () const { return q_sz == max_sz; }
             .     .    .              .          .    .           .      .    .  #ifdef INT_QUEUE_AVG
       874,008    32    3        218,502          0    0           0      0    0          inline T      avg  () const { assert(full()); return sum / max_sz; }
             .     .    .              .          .    .           .      .    .  #else
             .     .    .              .          .    .           .      .    .          inline double avg  () const { assert(full()); return sum / (double) max_sz; }
             .     .    .              .          .    .           .      .    .  #endif
         6,528    11    4              0          0    0       6,528    996    0          inline void   clear()       { sum = 0; q_sz = 0; ptr = 0; }
             .     .    .              .          .    .           .      .    .          void push(T e) {
     3,383,404     0    0      1,592,352          0    0      99,350      0    0              if (q_sz < max_sz) q_sz++;
     1,294,302     5    5        431,434    426,016    0           0      0    0              else sum -= q[ptr];
     1,592,352    16   12              0          0    0     530,784      0    0              sum += e;
     1,592,352     0    0              0          0    0   1,061,568 97,433   11              q[ptr++] = e;
     1,602,493     0    0      1,061,568          0    0      10,141      0    0              if (ptr == max_sz) ptr = 0;
             .     .    .              .          .    .           .      .    .          }
             .     .    .              .          .    .           .      .    .      };
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .  public:
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .      // Constructor/Destructor:
             .     .    .              .          .    .           .      .    .      //
             .     .    .              .          .    .           .      .    .      Solver();
             .     .    .              .          .    .           .      .    .      virtual ~Solver();
            10     2    2              0          0    0           4      0    0      void print_size(std::ostream &os)
             .     .    .              .          .    .           .      .    .      {
             4     2    2              0          0    0           4      1    0          program_end_time=std::chrono::steady_clock::now();
             2     0    0              0          0    0           2      0    0          total_work_time=program_end_time-program_start_time;
             4     0    0              2          0    0           0      0    0          os << "clause_allocate_size " << ca.size() * sizeof(int) << "\n";
             2     0    0              2          0    0           0      0    0          os << "model " << model.size() * sizeof(model[0]) << "\n";
             4     0    0              2          0    0           0      0    0          os << "conflict " << conflict.size() * sizeof(conflict[0]) << "\n";
             4     0    0              2          1    0           0      0    0          os << "clauses " << clauses.size() * sizeof(clauses[0]) << "\n";
             4     0    0              2          0    0           0      0    0          os << "learnts_core " << learnts_core.size() * sizeof(learnts_core[0]) << "\n";
             4     0    0              2          1    0           0      0    0          os << "activity_CHB " << activity_CHB.size() * sizeof(activity_CHB[0]) << "\n";
             .     .    .              .          .    .           .      .    .          os << "watches_bin " << watches_bin.size() * sizeof(Watcher) << "\n";
             .     .    .              .          .    .           .      .    .          os << "watches " << watches.size() * sizeof(Watcher) << "\n";
             2     0    0              2          2    0           0      0    0          os << "assigns " << assigns.size() * sizeof(assigns[0]) << "\n";
             2     0    0              2          0    0           0      0    0          os << "polarity " << polarity.size() * sizeof(polarity[0]) << "\n";
             2     0    0              2          0    0           0      0    0          os << "decision " << decision.size() * sizeof(decision[0]) << "\n";
             4     0    0              2          0    0           0      0    0          os << "trail " << trail.size() * sizeof(trail[0]) << "\n";
             4     0    0              2          2    0           0      0    0          os << "trail_lim " << trail_lim.size() * sizeof(trail_lim[0]) << "\n";
             4     0    0              2          0    0           0      0    0          os << "vardata " << vardata.size() * sizeof(vardata[0]) << "\n";
             4     0    0              2          0    0           0      0    0          os << "assumptions " << assumptions.size() * sizeof(assumptions[0]) << "\n";
             .     .    .              .          .    .           .      .    .          os << "total_Watchers: " << total_Watchers << "\n";
             .     .    .              .          .    .           .      .    .          os << "total_act_watchers: " << total_act_watchers << "\n";
             .     .    .              .          .    .           .      .    .          os << "total_indexs: " << total_indexs << "\n";
             .     .    .              .          .    .           .      .    .          os << "time_find_conflict: " << time_find_conflict << "\n";
             .     .    .              .          .    .           .      .    .          os << "total_find_conflict_length: " << total_find_conflict_length << "\n";
             .     .    .              .          .    .           .      .    .          os << "total_find_conflict_allsize: " << total_find_conflict_allsize << "\n";
             .     .    .              .          .    .           .      .    .          os << "total_propagation_time: " << total_duration.count() << "\n";
             .     .    .              .          .    .           .      .    .          os << "total_work_time: "<< total_work_time.count()<<"\n";
-- line 134 ----------------------------------------
-- line 137 ----------------------------------------
             .     .    .              .          .    .           .      .    .          os<<"total_watch_access: "<<total_watch_access<<"\n";
             .     .    .              .          .    .           .      .    .          os<<"total_clause_access_times: "<<total_clause_access_times<<"\n";
             .     .    .              .          .    .           .      .    .          os<<"total_clause_access_size: "<<total_clause_access_size<<"\n";
             .     .    .              .          .    .           .      .    .          os<<"total_change_other_watch: "<<total_change_other_watch<<"\n";
             .     .    .              .          .    .           .      .    .          os<<"total_push_new_implication: "<<total_push_new_implication<<"\n";
             .     .    .              .          .    .           .      .    .          os<<"total_no_clause_access: "<<total_no_clause_access<<"\n";
             .     .    .              .          .    .           .      .    .          os<<"total_no_implication_added: "<<total_no_implication_added<<"\n";
             .     .    .              .          .    .           .      .    .          os<<"total_no_change_other_watch: "<<total_no_change_other_watch<<"\n";
             6     0    0              4          0    0           0      0    0      }
             .     .    .              .          .    .           .      .    .      using ull=unsigned long long;
             .     .    .              .          .    .           .      .    .      ull total_Watchers = 0;
             .     .    .              .          .    .           .      .    .      ull total_act_watchers = 0;
             .     .    .              .          .    .           .      .    .      ull total_indexs = 0;
             .     .    .              .          .    .           .      .    .      ull time_find_conflict = 0;
             .     .    .              .          .    .           .      .    .      ull total_find_conflict_length = 0;
             .     .    .              .          .    .           .      .    .      ull total_find_conflict_allsize = 0;
             .     .    .              .          .    .           .      .    .      ull total_access_clause=0;
-- line 153 ----------------------------------------
-- line 310 ----------------------------------------
             .     .    .              .          .    .           .      .    .      {
             .     .    .              .          .    .           .      .    .          const ClauseAllocator& ca;
             .     .    .              .          .    .           .      .    .          WatcherDeleted(const ClauseAllocator& _ca) : ca(_ca) {}
             .     .    .              .          .    .           .      .    .          bool operator()(const Watcher& w) const { return ca[w.cref].mark() == 1; }
             .     .    .              .          .    .           .      .    .      };
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .      struct VarOrderLt {
             .     .    .              .          .    .           .      .    .          const vec<double>&  activity;
   740,220,474   515   25    526,603,172 38,927,162  374  28,030,529      0    0          bool operator () (Var x, Var y) const { return activity[x] > activity[y]; }
             .     .    .              .          .    .           .      .    .          VarOrderLt(const vec<double>&  act) : activity(act) { }
             .     .    .              .          .    .           .      .    .      };
             .     .    .              .          .    .           .      .    .      
             .     .    .              .          .    .           .      .    .      struct ConflictData
             .     .    .              .          .    .           .      .    .  	{
             .     .    .              .          .    .           .      .    .  		ConflictData() :
             .     .    .              .          .    .           .      .    .  			nHighestLevel(-1),
             .     .    .              .          .    .           .      .    .  			bOnlyOneLitFromHighest(false)
-- line 326 ----------------------------------------
-- line 404 ----------------------------------------
             .     .    .              .          .    .           .      .    .      Lit      pickBranchLit    ();                                                      // Return the next decision variable.
             .     .    .              .          .    .           .      .    .      void     newDecisionLevel ();                                                      // Begins a new decision level.
             .     .    .              .          .    .           .      .    .      void     uncheckedEnqueue (Lit p, int level = 0, CRef from = CRef_Undef);                         // Enqueue a literal. Assumes value of literal is undefined.
             .     .    .              .          .    .           .      .    .      bool     enqueue          (Lit p, CRef from = CRef_Undef);                         // Test if fact 'p' contradicts current state, enqueue otherwise.
             .     .    .              .          .    .           .      .    .      CRef     propagate_        ();                                                      // Perform unit propagation. Returns possibly conflicting clause.
             .     .    .              .          .    .           .      .    .      std::chrono::nanoseconds total_duration;
             .     .    .              .          .    .           .      .    .      CRef     propagate(){
             .     .    .              .          .    .           .      .    .  
     5,451,596 3,493    8              0          0    0   2,725,798      0    0          auto start_time=std::chrono::steady_clock::now();
     8,177,394     0    0              0          0    0   2,725,798      0    0          auto ref= propagate_();
     2,725,798     0    0              0          0    0   2,725,798      0    0          auto end_time=std::chrono::steady_clock::now();
             .     .    .              .          .    .           .      .    .          auto duration=end_time-start_time;
             .     .    .              .          .    .           .      .    .          total_duration+=duration;
             .     .    .              .          .    .           .      .    .          return ref;
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .      }
             .     .    .              .          .    .           .      .    .      void     cancelUntil      (int level);                                             // Backtrack until a certain level.
             .     .    .              .          .    .           .      .    .      void     analyze          (CRef confl, vec<Lit>& out_learnt, int& out_btlevel, int& out_lbd);    // (bt = backtrack)
             .     .    .              .          .    .           .      .    .      void     analyzeFinal     (Lit p, vec<Lit>& out_conflict);                         // COULD THIS BE IMPLEMENTED BY THE ORDINARIY "analyze" BY SOME REASONABLE GENERALIZATION?
-- line 422 ----------------------------------------
-- line 461 ----------------------------------------
             .     .    .              .          .    .           .      .    .      
             .     .    .              .          .    .           .      .    .  public:
             .     .    .              .          .    .           .      .    .      int      level            (Var x) const;
             .     .    .              .          .    .           .      .    .  protected:
             .     .    .              .          .    .           .      .    .      double   progressEstimate ()      const; // DELETE THIS ?? IT'S NOT VERY USEFUL ...
             .     .    .              .          .    .           .      .    .      bool     withinBudget     ()      const;
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .      template<class V> int computeLBD(const V& c) {
    44,928,314    32   12              0          0    0           0      0    0          int lbd = 0;
             .     .    .              .          .    .           .      .    .  
     7,362,285    36   14      6,216,217    823,439    1           0      0    0          counter++;
   210,045,159     0    0      1,150,030          0    0           0      0    0          for (int i = 0; i < c.size(); i++){
             .     .    .              .          .    .           .      .    .              int l = level(var(c[i]));
   484,100,450     0    0    193,635,084  4,027,179    4           0      0    0              if (l != 0 && seen2[l] != counter){
    44,929,925     0    0              0          0    0  44,929,925      0    0                  seen2[l] = counter;
    73,724,818     0    0              0          0    0           0      0    0                  lbd++; } }
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .          return lbd;
             .     .    .              .          .    .           .      .    .      }
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .  #ifdef BIN_DRUP
             .     .    .              .          .    .           .      .    .      static int buf_len;
             .     .    .              .          .    .           .      .    .      static unsigned char drup_buf[];
             .     .    .              .          .    .           .      .    .      static unsigned char* buf_ptr;
-- line 484 ----------------------------------------
-- line 493 ----------------------------------------
             .     .    .              .          .    .           .      .    .      }
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .      template<class V>
             .     .    .              .          .    .           .      .    .      static inline void binDRUP(unsigned char op, const V& c, FILE* drup_file){
             .     .    .              .          .    .           .      .    .          assert(op == 'a' || op == 'd');
             .     .    .              .          .    .           .      .    .          *buf_ptr++ = op; buf_len++;
             .     .    .              .          .    .           .      .    .          for (int i = 0; i < c.size(); i++) byteDRUP(c[i]);
             .     .    .              .          .    .           .      .    .          *buf_ptr++ = 0; buf_len++;
       231,737    30   11              0          0    0     231,737      0    0          if (buf_len > 1048576) binDRUP_flush(drup_file);
             .     .    .              .          .    .           .      .    .      }
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .      static inline void binDRUP_strengthen(const Clause& c, Lit l, FILE* drup_file){
             .     .    .              .          .    .           .      .    .          *buf_ptr++ = 'a'; buf_len++;
             .     .    .              .          .    .           .      .    .          for (int i = 0; i < c.size(); i++)
             .     .    .              .          .    .           .      .    .              if (c[i] != l) byteDRUP(c[i]);
             .     .    .              .          .    .           .      .    .          *buf_ptr++ = 0; buf_len++;
             .     .    .              .          .    .           .      .    .          if (buf_len > 1048576) binDRUP_flush(drup_file);
-- line 509 ----------------------------------------
-- line 571 ----------------------------------------
             .     .    .              .          .    .           .      .    .      double    my_var_decay;
             .     .    .              .          .    .           .      .    .      bool   DISTANCE;
             .     .    .              .          .    .           .      .    .  };
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .  //=================================================================================================
             .     .    .              .          .    .           .      .    .  // Implementation of inline methods:
             .     .    .              .          .    .           .      .    .  
   128,624,107     0    0    128,624,107  3,237,583    0           0      0    0  inline CRef Solver::reason(Var x) const { return vardata[x].reason; }
   897,493,516    37   14    765,592,271 75,564,448    0 127,865,029      0    0  inline int  Solver::level (Var x) const { return vardata[x].level; }
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .  inline void Solver::insertVarOrder(Var x) {
             .     .    .              .          .    .           .      .    .      //    Heap<VarOrderLt>& order_heap = VSIDS ? order_heap_VSIDS : order_heap_CHB;
   926,729,239   164    9    287,142,410    255,850    0           0      0    0      Heap<VarOrderLt>& order_heap = DISTANCE ? order_heap_distance : ((!VSIDS)? order_heap_CHB:order_heap_VSIDS);
    16,399,428     1    1     10,932,952  1,821,021    9           0      0    0      if (!order_heap.inHeap(x) && decision[x]) order_heap.insert(x); }
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .  inline void Solver::varDecayActivity() {
     2,123,136     0    0      1,061,568        782    0     530,784      0    0      var_inc *= (1 / var_decay); }
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .  inline void Solver::varBumpActivity(Var v, double mult) {
   457,887,001     8    8    278,767,820 10,490,367   11  69,405,438      0    0      if ( (activity_VSIDS[v] += var_inc * mult) > 1e100 ) {
             .     .    .              .          .    .           .      .    .          // Rescale:
         1,472    56   14              1          0    0           0      0    0          for (int i = 0; i < nVars(); i++)
       243,432     0    0         61,005     11,394    2      60,858      0    0              activity_VSIDS[i] *= 1e-100;
           294     0    0            147          0    0         147      0    0          var_inc *= 1e-100; }
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .      // Update order_heap with respect to new activity:
    49,518,688     0    0              0          0    0           0      0    0      if (order_heap_VSIDS.inHeap(v)) order_heap_VSIDS.decrease(v); }
             .     .    .              .          .    .           .      .    .  
     4,584,272   345    0      2,292,136        214    0   1,146,068      0    0  inline void Solver::claDecayActivity() { cla_inc *= (1 / clause_decay); }
             .     .    .              .          .    .           .      .    .  inline void Solver::claBumpActivity (Clause& c) {
    29,384,294   258   19      8,706,081    942,107   16   2,993,033  8,176   74      if ( (c.activity() += cla_inc) > 1e20 ) {
             .     .    .              .          .    .           .      .    .          // Rescale:
     1,426,704    24   10             72          0    0           0      0    0          for (int i = 0; i < learnts_local.size(); i++)
     3,328,528     0    0        475,504    437,895   11     475,504      0    0              ca[learnts_local[i]].activity() *= 1e-20;
       546,108    80    9        273,018          0    0          24     24    0          cla_inc *= 1e-20; } }
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .  inline void Solver::checkGarbage(void){ return checkGarbage(garbage_frac); }
             .     .    .              .          .    .           .      .    .  inline void Solver::checkGarbage(double gf){
         8,442    67    0          2,814        123    0           0      0    0      if (ca.wasted() > ca.size() * gf)
           212     0    0            106        106   13           0      0    0          garbageCollect(); }
             .     .    .              .          .    .           .      .    .  
             .     .    .              .          .    .           .      .    .  // NOTE: enqueue does not set the ok flag! (only public methods do)
             .     .    .              .          .    .           .      .    .  inline bool     Solver::enqueue         (Lit p, CRef from)      { return value(p) != l_Undef ? value(p) != l_False : (uncheckedEnqueue(p, decisionLevel(), from), true); }
             .     .    .              .          .    .           .      .    .  inline bool     Solver::addClause       (const vec<Lit>& ps)    { ps.copyTo(add_tmp); return addClause_(add_tmp); }
             .     .    .              .          .    .           .      .    .  inline bool     Solver::addEmptyClause  ()                      { add_tmp.clear(); return addClause_(add_tmp); }
             .     .    .              .          .    .           .      .    .  inline bool     Solver::addClause       (Lit p)                 { add_tmp.clear(); add_tmp.push(p); return addClause_(add_tmp); }
             .     .    .              .          .    .           .      .    .  inline bool     Solver::addClause       (Lit p, Lit q)          { add_tmp.clear(); add_tmp.push(p); add_tmp.push(q); return addClause_(add_tmp); }
             .     .    .              .          .    .           .      .    .  inline bool     Solver::addClause       (Lit p, Lit q, Lit r)   { add_tmp.clear(); add_tmp.push(p); add_tmp.push(q); add_tmp.push(r); return addClause_(add_tmp); }
             .     .    .              .          .    .           .      .    .  inline bool     Solver::locked          (const Clause& c) const {
    15,671,492    76    8      4,717,833    115,318    0           0      0    0      int i = c.size() != 2 ? 0 : (value(c[0]) == l_True ? 0 : 1);
    18,005,308    93   11      4,265,877     22,661    0           0      0    0      return value(c[i]) == l_True && reason(var(c[i])) != CRef_Undef && ca.lea(reason(var(c[i]))) == &c;
             .     .    .              .          .    .           .      .    .  }
     3,146,288     1    1      1,573,138          0    0           0      0    0  inline void     Solver::newDecisionLevel()                      { trail_lim.push(trail.size()); }
             .     .    .              .          .    .           .      .    .  
       195,472     1    1        104,537          0    0      90,935      0    0  inline int      Solver::decisionLevel ()      const   { return trail_lim.size(); }
   327,701,668   810    7     44,744,472    108,401    0           0      0    0  inline uint32_t Solver::abstractLevel (Var x) const   { return 1 << (level(x) & 31); }
     5,476,571     2    2      5,476,555        186    0           0      0    0  inline lbool    Solver::value         (Var x) const   { return assigns[x]; }
17,979,732,581    37   13 17,979,732,581        471    0           0      0    0  inline lbool    Solver::value         (Lit p) const   { return assigns[var(p)] ^ sign(p); }
             .     .    .              .          .    .           .      .    .  inline lbool    Solver::modelValue    (Var x) const   { return model[x]; }
             .     .    .              .          .    .           .      .    .  inline lbool    Solver::modelValue    (Lit p) const   { return model[var(p)] ^ sign(p); }
             .     .    .              .          .    .           .      .    .  inline int      Solver::nAssigns      ()      const   { return trail.size(); }
             3     0    0              2          0    0           1      1    0  inline int      Solver::nClauses      ()      const   { return clauses.size(); }
             .     .    .              .          .    .           .      .    .  inline int      Solver::nLearnts      ()      const   { return learnts_core.size() + learnts_tier2.size() + learnts_local.size(); }
       123,569     1    1          1,132          5    0           0      0    0  inline int      Solver::nVars         ()      const   { return vardata.size(); }
             6     1    1              3          3    0           0      0    0  inline int      Solver::nFreeVars     ()      const   { return (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]); }
             .     .    .              .          .    .           .      .    .  inline void     Solver::setPolarity   (Var v, bool b) { polarity[v] = b; }
             .     .    .              .          .    .           .      .    .  inline void     Solver::setDecisionVar(Var v, bool b) 
             .     .    .              .          .    .           .      .    .  { 
         4,962     0    0          2,481         11    0           0      0    0      if      ( b && !decision[v]) dec_vars++;
             9     0    0              6          3    0           0      0    0      else if (!b &&  decision[v]) dec_vars--;
             .     .    .              .          .    .           .      .    .  
           830     0    0              0          0    0         830      0    0      decision[v] = b;
             .     .    .              .          .    .           .      .    .      if (b && !order_heap_CHB.inHeap(v)){
             .     .    .              .          .    .           .      .    .          order_heap_CHB.insert(v);
             .     .    .              .          .    .           .      .    .          order_heap_VSIDS.insert(v);
             .     .    .              .          .    .           .      .    .          order_heap_distance.insert(v);}
             .     .    .              .          .    .           .      .    .  }
             .     .    .              .          .    .           .      .    .  inline void     Solver::setConfBudget(int64_t x){ conflict_budget    = conflicts    + x; }
             .     .    .              .          .    .           .      .    .  inline void     Solver::setPropBudget(int64_t x){ propagation_budget = propagations + x; }
             .     .    .              .          .    .           .      .    .  inline void     Solver::interrupt(){ asynch_interrupt = true; }
-- line 651 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Alg.h
--------------------------------------------------------------------------------
Ir          I1mr ILmr Dr          D1mr       DLmr Dw         D1mw DLmw 

-- line 30 ----------------------------------------
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .  //=================================================================================================
          .    .    .           .          .    .          .    .    .  // Removing and searching for elements:
          .    .    .           .          .    .          .    .    .  //
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .  template<class V, class T>
          .    .    .           .          .    .          .    .    .  static inline void remove(V& ts, const T& t)
          .    .    .           .          .    .          .    .    .  {
     14,562  198    1           0          0    0          0    0    0      int j = 0;
727,482,679   68   31 121,879,994 15,718,618    6          0    0    0      for (; j < ts.size() && ts[j] != t; j++);
          .    .    .           .          .    .          .    .    .      assert(j < ts.size());
659,948,447   65   27 188,470,266 11,530,411    3 93,974,544    0    0      for (; j < ts.size()-1; j++) ts[j] = ts[j+1];
          .    .    .           .          .    .          .    .    .      ts.pop();
          .    .    .           .          .    .          .    .    .  }
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .  template<class V, class T>
          .    .    .           .          .    .          .    .    .  static inline bool find(V& ts, const T& t)
          .    .    .           .          .    .          .    .    .  {
          .    .    .           .          .    .          .    .    .      int j = 0;
  3,837,906    1    1     800,051     53,508    0          0    0    0      for (; j < ts.size() && ts[j] != t; j++);
          .    .    .           .          .    .          .    .    .      return j < ts.size();
          .    .    .           .          .    .          .    .    .  }
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .  
          .    .    .           .          .    .          .    .    .  //=================================================================================================
          .    .    .           .          .    .          .    .    .  // Copying vectors with support for nested vector types:
          .    .    .           .          .    .          .    .    .  //
          .    .    .           .          .    .          .    .    .  
-- line 58 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../core/SolverTypes.h
--------------------------------------------------------------------------------
Ir             I1mr  ILmr Dr             D1mr        DLmr    Dw             D1mw      DLmw      

-- line 54 ----------------------------------------
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  struct Lit {
             .     .    .              .           .       .              .         .         .      int     x;
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .      // Use this as a constructor:
             .     .    .              .           .       .              .         .         .      friend Lit mkLit(Var var, bool sign );
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .      bool operator == (Lit p) const { return x == p.x; }
   212,599,755     0    0    110,131,911  57,337,148     582              0         0         0      bool operator != (Lit p) const { return x != p.x; }
             .     .    .              .           .       .              .         .         .      bool operator <  (Lit p) const { return x < p.x;  } // '<' makes p, ~p adjacent in the ordering.
             .     .    .              .           .       .              .         .         .  };
             .     .    .              .           .       .              .         .         .  
       154,627     1    1              0           0       0              3         0         0  inline  Lit  mkLit     (Var var, bool sign= false) { Lit p; p.x = var + var + (int)sign; return p; }
15,538,597,867    29   14  7,441,108,445      64,105      43    254,262,372    45,538         0  inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
             .     .    .              .           .       .              .         .         .  inline  Lit  operator ^(Lit p, bool b)      { Lit q; q.x = p.x ^ (unsigned int)b; return q; }
52,084,718,390    12    7    585,144,437           0       0    294,527,025 9,897,358        14  inline  bool sign      (Lit p)              { return p.x & 1; }
80,860,698,916 7,326   69    877,988,980  11,116,843      49 14,843,526,093         0         0  inline  int  var       (Lit p)              { return p.x >> 1; }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  // Mapping Literals to and from compact integers suitable for array indexing:
             .     .    .              .           .       .              .         .         .  inline  int  toInt     (Var v)              { return v; } 
           767     0    0              0           0       0              0         0         0  inline  int  toInt     (Lit p)              { return p.x; } 
             .     .    .              .           .       .              .         .         .  inline  Lit  toLit     (int i)              { Lit p; p.x = i; return p; } 
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  //const Lit lit_Undef = mkLit(var_Undef, false);  // }- Useful special constants.
             .     .    .              .           .       .              .         .         .  //const Lit lit_Error = mkLit(var_Undef, true );  // }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  const Lit lit_Undef = { -2 };  // }- Useful special constants.
             .     .    .              .           .       .              .         .         .  const Lit lit_Error = { -1 };  // }
             .     .    .              .           .       .              .         .         .  
-- line 82 ----------------------------------------
-- line 101 ----------------------------------------
             .     .    .              .           .       .              .         .         .  #define l_Undef (lbool((uint8_t)2))
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  class lbool {
             .     .    .              .           .       .              .         .         .      uint8_t value;
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  public:
             .     .    .              .           .       .              .         .         .      explicit lbool(uint8_t v) : value(v) { }
             .     .    .              .           .       .              .         .         .  
           226     1    1              0           0       0             62        12        12      lbool()       : value(0) { }
             .     .    .              .           .       .              .         .         .      explicit lbool(bool x) : value(!x) { }
             .     .    .              .           .       .              .         .         .  
 5,163,239,818     1    1              0           0       0              0         0         0      bool  operator == (lbool b) const { return ((b.value&2) & (value&2)) | (!(b.value&2)&(value == b.value)); }
         2,481     0    0          1,654          13       0              0         0         0      bool  operator != (lbool b) const { return !(*this == b); }
12,987,023,266    32   14 11,199,122,276  14,122,064       0              0         0         0      lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .      lbool operator && (lbool b) const {
             .     .    .              .           .       .              .         .         .          uint8_t sel = (this->value << 1) | (b.value << 3);
             .     .    .              .           .       .              .         .         .          uint8_t v   = (0xF7F755F4 >> sel) & 3;
             .     .    .              .           .       .              .         .         .          return lbool(v); }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .      lbool operator || (lbool b) const {
             .     .    .              .           .       .              .         .         .          uint8_t sel = (this->value << 1) | (b.value << 3);
-- line 122 ----------------------------------------
-- line 148 ----------------------------------------
             .     .    .              .           .       .              .         .         .          unsigned simplified : 1;}                            header;
             .     .    .              .           .       .              .         .         .      union { Lit lit; float act; uint32_t abs; uint32_t touched; CRef rel; } data[0];
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .      friend class ClauseAllocator;
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .      // NOTE: This constructor cannot be used directly (doesn't allocate enough memory).
             .     .    .              .           .       .              .         .         .      template<class V>
             .     .    .              .           .       .              .         .         .      Clause(const V& ps, bool use_extra, bool learnt) {
    19,310,641     0    0      4,541,146           0       0      5,687,202    34,973         0          header.mark      = 0;
    13,561,521     0    0      4,520,507     283,139  65,912              0         0         0          header.learnt    = learnt;
    27,267,515     2    2      4,561,785           1       0      4,541,146         0         0          header.has_extra = learnt | use_extra;
             .     .    .              .           .       .              .         .         .          header.reloced   = 0;
     6,853,895     0    0      1,166,694          45       0      5,687,201   711,826    52,547          header.size      = ps.size();
             .     .    .              .           .       .              .         .         .          header.lbd       = 0;
             .     .    .              .           .       .              .         .         .          header.removable = 1;
             .     .    .              .           .       .              .         .         .          //simplify
             .     .    .              .           .       .              .         .         .          //
     5,687,202     8    5      5,687,202     638,570 158,406              0         0         0          header.simplified = 0;
             .     .    .              .           .       .              .         .         .  
   196,996,984   102   38      1,308,834           0       0              0         0         0          for (int i = 0; i < ps.size(); i++)
   117,046,508    95   26     40,355,061   3,282,043  11,417     47,788,650 5,132,541 1,488,447              data[i].lit = ps[i];
             .     .    .              .           .       .              .         .         .  
    17,061,605    37   18      5,687,201           0       0              0         0         0          if (header.has_extra){
     9,367,164    16    8              0           0       0              0         0         0              if (header.learnt){
     9,325,888     1    1      3,516,877           0       0      4,662,944   291,393    75,406                  data[header.size].act = 0;
     9,325,899     0    0              0           0       0      4,662,944   291,208    75,682                  data[header.size+1].touched = 0;
             .     .    .              .           .       .              .         .         .              }else
             .     .    .              .           .       .              .         .         .                  calcAbstraction(); }
             .     .    .              .           .       .              .         .         .      }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  public:
             .     .    .              .           .       .              .         .         .      void calcAbstraction() {
             .     .    .              .           .       .              .         .         .          assert(header.has_extra);
        21,262     0    0              0           0       0              0         0         0          uint32_t abstraction = 0;
       376,747     3    2            395           0       0              0         0         0          for (int i = 0; i < size(); i++)
       645,801     2    1              0           0       0              1         0         0              abstraction |= 1 << (var(data[i].lit) & 31);
        41,893     0    0              0           0       0         21,255     1,263     1,263          data[header.size].abs = abstraction;  }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  
10,405,762,985   130   56  5,817,977,622 687,163,070  17,133  3,885,681,675        29         0      int          size        ()      const   { return header.size; }
     2,717,789    26    9        679,904     187,025       0        679,904    42,219         0      void         shrink      (int i)         { assert(i <= size()); if (header.has_extra) data[header.size-i] = data[header.size]; header.size -= i; }
             .     .    .              .           .       .              .         .         .      void         pop         ()              { shrink(1); }
    58,208,956     2    2      1,028,443           0       0              0         0         0      bool         learnt      ()      const   { return header.learnt; }
         4,444     0    0              0           0       0              0         0         0      bool         has_extra   ()      const   { return header.has_extra; }
    99,117,112   118   17     18,269,674  17,028,513   4,518     26,742,076         0         0      uint32_t     mark        ()      const   { return header.mark; }
    24,463,860   137   28      6,536,863       3,311       0      5,936,662         0         0      void         mark        (uint32_t m)    { header.mark = m; }
       118,176     0    0              0           0       0         59,088     9,653         0      const Lit&   last        ()      const   { return data[header.size-1].lit; }
             .     .    .              .           .       .              .         .         .  
    13,588,846     0    0     13,588,846  11,035,822     161              0         0         0      bool         reloced     ()      const   { return header.reloced; }
             .     .    .              .           .       .              .         .         .      CRef         relocation  ()      const   { return data[0].rel; }
    18,082,028     8    5      4,520,507           0       0      9,041,014         0         0      void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
             .     .    .              .           .       .              .         .         .  
    11,797,995     0    0      3,920,379           0       0              0         0         0      int          lbd         ()      const   { return header.lbd; }
    33,645,802    78   28      8,615,408           0       0      5,100,596         0         0      void         set_lbd     (int lbd)       { header.lbd = lbd; }
             .     .    .              .           .       .              .         .         .      bool         removable   ()      const   { return header.removable; }
    22,482,421     2    2      8,414,869           0       0      3,516,888         0         0      void         removable   (bool b)        { header.removable = b; }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .      // NOTE: somewhat unsafe to change the clause in-place! Must manually call 'calcAbstraction' afterwards for
             .     .    .              .           .       .              .         .         .      //       subsumption operations to behave correctly.
11,704,746,063    82   27 10,939,206,310 863,062,293  51,553              0         0         0      Lit&         operator [] (int i)         { return data[i].lit; }
    98,489,435   210   31     88,528,379   2,948,699     937              0         0         0      Lit          operator [] (int i) const   { return data[i].lit; }
             .     .    .              .           .       .              .         .         .      operator const Lit* (void) const         { return (Lit*)data; }
             .     .    .              .           .       .              .         .         .  
     3,796,123     0    0      3,796,123          10       0              0         0         0      uint32_t&    touched     ()              { assert(header.has_extra && header.learnt); return data[header.size+1].touched; }
     4,533,925     0    0      1,327,142     353,273       1              0         0         0      float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
             .     .    .              .           .       .              .         .         .      uint32_t     abstraction () const        { assert(header.has_extra); return data[header.size].abs; }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .      Lit          subsumes    (const Clause& other) const;
             .     .    .              .           .       .              .         .         .      void         strengthen  (Lit p);
             .     .    .              .           .       .              .         .         .      // simplify
             .     .    .              .           .       .              .         .         .      //
    25,226,748     0    0      7,338,042           0       0      3,516,888         0         0      void setSimplified(bool b) { header.simplified = b; }
             .     .    .              .           .       .              .         .         .      bool simplified() { return header.simplified; }
             .     .    .              .           .       .              .         .         .  };
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  //=================================================================================================
             .     .    .              .           .       .              .         .         .  // ClauseAllocator -- a simple class for allocating memory for clauses:
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  const CRef CRef_Undef = RegionAllocator<uint32_t>::Ref_Undef;
             .     .    .              .           .       .              .         .         .  class ClauseAllocator : public RegionAllocator<uint32_t>
             .     .    .              .           .       .              .         .         .  {
             .     .    .              .           .       .              .         .         .      static int clauseWord32Size(int size, int extras){
    11,236,172     7    3      5,548,960     258,567      76              0         0         0          return (sizeof(Clause) + (sizeof(Lit) * (size + extras))) / sizeof(uint32_t); }
             .     .    .              .           .       .              .         .         .  public:
             .     .    .              .           .       .              .         .         .      bool extra_clause_field;
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .      ClauseAllocator(uint32_t start_cap) : RegionAllocator<uint32_t>(start_cap), extra_clause_field(false){}
             1     0    0              0           0       0              1         0         0      ClauseAllocator() : extra_clause_field(false){}
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .      void moveTo(ClauseAllocator& to){
           108    15    8             54          54       0             54         0         0          to.extra_clause_field = extra_clause_field;
             .     .    .              .           .       .              .         .         .          RegionAllocator<uint32_t>::moveTo(to); }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .      template<class Lits>
             .     .    .              .           .       .              .         .         .      CRef alloc(const Lits& ps, bool learnt = false)
             .     .    .              .           .       .              .         .         .      {
             .     .    .              .           .       .              .         .         .          assert(sizeof(Lit)      == sizeof(uint32_t));
             .     .    .              .           .       .              .         .         .          assert(sizeof(float)    == sizeof(uint32_t));
    10,065,271    75   26      1,024,257          37       0              0         0         0          int extras = learnt ? 2 : (int)extra_clause_field;
             .     .    .              .           .       .              .         .         .  
     1,187,332     0    0              0           0       0         20,638         0         0          CRef cid = RegionAllocator<uint32_t>::alloc(clauseWord32Size(ps.size(), extras));
             .     .    .              .           .       .              .         .         .          new (lea(cid)) Clause(ps, extra_clause_field, learnt);
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .          return cid;
             .     .    .              .           .       .              .         .         .      }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .      // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
    39,967,532    76   17     35,952,800      20,017       0          7,418         0         0      Clause&       operator[](Ref r)       { return (Clause&)RegionAllocator<uint32_t>::operator[](r); }
         3,572     1    1          1,786         124       0              0         0         0      const Clause& operator[](Ref r) const { return (Clause&)RegionAllocator<uint32_t>::operator[](r); }
     4,520,507     0    0      4,520,507           0       0              0         0         0      Clause*       lea       (Ref r)       { return (Clause*)RegionAllocator<uint32_t>::lea(r); }
             .     .    .              .           .       .              .         .         .      const Clause* lea       (Ref r) const { return (Clause*)RegionAllocator<uint32_t>::lea(r); }
             .     .    .              .           .       .              .         .         .      Ref           ael       (const Clause* t){ return RegionAllocator<uint32_t>::ael((uint32_t*)t); }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .      void free(CRef cid)
             .     .    .              .           .       .              .         .         .      {
             .     .    .              .           .       .              .         .         .          Clause& c = operator[](cid);
     3,089,773     8    3              0           0       0              0         0         0          int extras = c.learnt() ? 2 : (int)c.has_extra();
             .     .    .              .           .       .              .         .         .          RegionAllocator<uint32_t>::free(clauseWord32Size(c.size(), extras));
             .     .    .              .           .       .              .         .         .      }
             .     .    .              .           .       .              .         .         .  
    12,200,552    54   19              0           0       0     10,457,616         1         0      void reloc(CRef& cr, ClauseAllocator& to)
             .     .    .              .           .       .              .         .         .      {
             .     .    .              .           .       .              .         .         .          Clause& c = operator[](cr);
             .     .    .              .           .       .              .         .         .          
    48,119,288     0    0      9,068,339   1,525,319       0      9,068,339         0         0          if (c.reloced()) { cr = c.relocation(); return; }
             .     .    .              .           .       .              .         .         .          
     4,520,507     0    0              0           0       0      4,520,507         0         0          cr = to.alloc(c, c.learnt());
             .     .    .              .           .       .              .         .         .          c.relocate(cr);
             .     .    .              .           .       .              .         .         .          
             .     .    .              .           .       .              .         .         .          // Copy extra data-fields:
             .     .    .              .           .       .              .         .         .          // (This could be cleaned-up. Generalize Clause-constructor to be applicable here instead?)
             .     .    .              .           .       .              .         .         .          to[cr].mark(c.mark());
     9,041,014     1    1              0           0       0              0         0         0          if (to[cr].learnt()){
    14,067,552     0    0      3,516,888     197,375     551      3,516,888         0         0              to[cr].touched() = c.touched();
    14,067,541     0    0      7,033,776     198,788     459      3,516,888         0         0              to[cr].activity() = c.activity();
             .     .    .              .           .       .              .         .         .              to[cr].set_lbd(c.lbd());
             .     .    .              .           .       .              .         .         .              to[cr].removable(c.removable());
             .     .    .              .           .       .              .         .         .              // simplify
             .     .    .              .           .       .              .         .         .              //
             .     .    .              .           .       .              .         .         .              to[cr].setSimplified(c.simplified());
             .     .    .              .           .       .              .         .         .          }
     2,007,238   108   44              0           0       0              0         0         0          else if (to[cr].has_extra()) to[cr].calcAbstraction();
    13,943,488     0    0     12,200,552           0       0              0         0         0      }
             .     .    .              .           .       .              .         .         .  };
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  inline std::ostream& operator<<(std::ostream& out, const Clause& cls) 
             .     .    .              .           .       .              .         .         .  {
             .     .    .              .           .       .              .         .         .      for (int i = 0; i < cls.size(); ++i)
             .     .    .              .           .       .              .         .         .      {
             .     .    .              .           .       .              .         .         .  		out << cls[i] << " ";
-- line 300 ----------------------------------------
-- line 310 ----------------------------------------
             .     .    .              .           .       .              .         .         .  class OccLists
             .     .    .              .           .       .              .         .         .  {
             .     .    .              .           .       .              .         .         .      vec<Vec>  occs;
             .     .    .              .           .       .              .         .         .      vec<char> dirty;
             .     .    .              .           .       .              .         .         .      vec<Idx>  dirties;
             .     .    .              .           .       .              .         .         .      Deleted   deleted;
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  public:
             3     0    0              0           0       0              3         0         0      OccLists(const Deleted& d) : deleted(d) {}
             .     .    .              .           .       .              .         .         .      unsigned int size(){
             .     .    .              .           .       .              .         .         .          auto m_size=0;
            40     2    2              4           2       0              0         0         0          for(int i=0;i<occs.size();i++){
        18,268    14   14          6,620       1,655       4              0         0         0              m_size+=occs[i].size();
             .     .    .              .           .       .              .         .         .          }
             .     .    .              .           .       .              .         .         .          
             .     .    .              .           .       .              .         .         .          return m_size;
             .     .    .              .           .       .              .         .         .      }
         9,097     1    1              0           0       0          1,654         0         0      void  init      (const Idx& idx){ occs.growTo(toInt(idx)+1); dirty.growTo(toInt(idx)+1, 0); }
             .     .    .              .           .       .              .         .         .      // Vec&  operator[](const Idx& idx){ return occs[toInt(idx)]; }
   154,186,138    26    3    154,186,138     384,601       0              0         0         0      Vec&  operator[](const Idx& idx){ return occs[toInt(idx)]; }
        46,436     1    1         23,224       6,371       0            820         0         0      Vec&  lookup    (const Idx& idx){ if (dirty[toInt(idx)]) clean(idx); return occs[toInt(idx)]; }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .      void  cleanAll  ();
             .     .    .              .           .       .              .         .         .      void  clean     (const Idx& idx);
             .     .    .              .           .       .              .         .         .      void  smudge    (const Idx& idx){
     6,182,074     0    0      4,119,470      13,251     275              0         0         0          if (dirty[toInt(idx)] == 0){
        70,603   113   13              0           0       0         70,603         0         0              dirty[toInt(idx)] = 1;
            35     1    1              0           0       0              0         0         0              dirties.push(idx);
             .     .    .              .           .       .              .         .         .          }
             .     .    .              .           .       .              .         .         .      }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .      void  clear(bool free = true){
             .     .    .              .           .       .              .         .         .          occs   .clear(free);
             .     .    .              .           .       .              .         .         .          dirty  .clear(free);
             .     .    .              .           .       .              .         .         .          dirties.clear(free);
             .     .    .              .           .       .              .         .         .      }
             .     .    .              .           .       .              .         .         .  };
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  template<class Idx, class Vec, class Deleted>
           776     0    0              0           0       0            582        40         0  void OccLists<Idx,Vec,Deleted>::cleanAll()
             .     .    .              .           .       .              .         .         .  {
    53,222,970   347    1     26,541,680   1,008,452       1              0         0         0      for (int i = 0; i < dirties.size(); i++)
             .     .    .              .           .       .              .         .         .          // Dirties may contain duplicates so check here if a variable is already cleaned:
       209,124     0    0        139,416      47,304       0              0         0         0          if (dirty[toInt(dirties[i])])
             .     .    .              .           .       .              .         .         .              clean(dirties[i]);
             .     .    .              .           .       .              .         .         .      dirties.clear();
           776     0    0            776         103       0              0         0         0  }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  template<class Idx, class Vec, class Deleted>
             .     .    .              .           .       .              .         .         .  void OccLists<Idx,Vec,Deleted>::clean(const Idx& idx)
             .     .    .              .           .       .              .         .         .  {
             .     .    .              .           .       .              .         .         .      Vec& vec = occs[toInt(idx)];
             .     .    .              .           .       .              .         .         .      int  i, j;
    45,440,834     2    2        279,048      74,518       0              0         0         0      for (i = j = 0; i < vec.size(); i++)
    28,784,216     0    0        158,992       6,616       0              0         0         0          if (!deleted(vec[i]))
    85,270,596     2    2     24,295,518          14       0     12,197,464    54,947         0              vec[j++] = vec[i];
        70,593   107   13              0           0       0              0         0         0      vec.shrink(i - j);
       283,297     0    0        141,202       7,103       0         70,841     7,128         0      dirty[toInt(idx)] = 0;
             .     .    .              .           .       .              .         .         .  }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  //=================================================================================================
             .     .    .              .           .       .              .         .         .  // CMap -- a class for mapping clauses to values:
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .  template<class T>
-- line 377 ----------------------------------------
-- line 426 ----------------------------------------
             .     .    .              .           .       .              .         .         .  |       p          - The literal p can be deleted from 'other'
             .     .    .              .           .       .              .         .         .  |________________________________________________________________________________________________@*/
             .     .    .              .           .       .              .         .         .  inline Lit Clause::subsumes(const Clause& other) const
             .     .    .              .           .       .              .         .         .  {
             .     .    .              .           .       .              .         .         .      //if (other.size() < size() || (extra.abst & ~other.extra.abst) != 0)
             .     .    .              .           .       .              .         .         .      //if (other.size() < size() || (!learnt() && !other.learnt() && (extra.abst & ~other.extra.abst) != 0))
             .     .    .              .           .       .              .         .         .      assert(!header.learnt);   assert(!other.header.learnt);
             .     .    .              .           .       .              .         .         .      assert(header.has_extra); assert(other.header.has_extra);
    25,562,397     0    0      8,520,799   1,091,273       0              0         0         0      if (other.header.size < header.size || (data[header.size].abs & ~other.data[other.header.size].abs) != 0)
             .     .    .              .           .       .              .         .         .          return lit_Error;
             .     .    .              .           .       .              .         .         .  
        83,489     0    0              0           0       0              0         0         0      Lit        ret = lit_Undef;
             .     .    .              .           .       .              .         .         .      const Lit* c   = (const Lit*)(*this);
             .     .    .              .           .       .              .         .         .      const Lit* d   = (const Lit*)other;
             .     .    .              .           .       .              .         .         .  
       840,348     1    1        168,832           0       0              0         0         0      for (unsigned i = 0; i < header.size; i++) {
             .     .    .              .           .       .              .         .         .          // search for c[i] or ~c[i]
     6,591,611     2    2         83,489           0       0         83,489       165         0          for (unsigned j = 0; j < other.header.size; j++)
     4,679,369     0    0      1,113,271         481       0              0         0         0              if (c[i] == d[j])
             .     .    .              .           .       .              .         .         .                  goto ok;
       859,329     0    0              0           0       0              0         0         0              else if (ret == lit_Undef && c[i] == ~d[j]){
             .     .    .              .           .       .              .         .         .                  ret = c[i];
             .     .    .              .           .       .              .         .         .                  goto ok;
             .     .    .              .           .       .              .         .         .              }
             .     .    .              .           .       .              .         .         .  
             .     .    .              .           .       .              .         .         .          // did not find it
             .     .    .              .           .       .              .         .         .          return lit_Error;
             .     .    .              .           .       .              .         .         .  ok:;
             .     .    .              .           .       .              .         .         .      }
-- line 454 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/..//core/Solver.cc
--------------------------------------------------------------------------------
Ir             I1mr    ILmr Dr             D1mr          DLmr    Dw            D1mw       DLmw 

-- line 51 ----------------------------------------
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  //=================================================================================================
             .       .    .              .             .       .             .          .    .  // Options:
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  static const char* _cat = "CORE";
             .       .    .              .             .       .             .          .    .  
             4       0    0              0             0       0             1          0    0  static DoubleOption  opt_step_size         (_cat, "step-size",   "Initial step size",                             0.40,     DoubleRange(0, false, 1, false));
             4       0    0              0             0       0             1          0    0  static DoubleOption  opt_step_size_dec     (_cat, "step-size-dec","Step size decrement",                          0.000001, DoubleRange(0, false, 1, false));
             4       0    0              0             0       0             1          0    0  static DoubleOption  opt_min_step_size     (_cat, "min-step-size","Minimal step size",                            0.06,     DoubleRange(0, false, 1, false));
             4       1    1              0             0       0             1          0    0  static DoubleOption  opt_var_decay         (_cat, "var-decay",   "The variable activity decay factor",            0.80,     DoubleRange(0, false, 1, false));
             4       0    0              0             0       0             1          0    0  static DoubleOption  opt_clause_decay      (_cat, "cla-decay",   "The clause activity decay factor",              0.999,    DoubleRange(0, false, 1, false));
             4       0    0              0             0       0             1          0    0  static DoubleOption  opt_random_var_freq   (_cat, "rnd-freq",    "The frequency with which the decision heuristic tries to choose a random variable", 0, DoubleRange(0, true, 1, true));
             4       0    0              0             0       0             1          0    0  static DoubleOption  opt_random_seed       (_cat, "rnd-seed",    "Used by the random variable selection",         91648253, DoubleRange(0, false, HUGE_VAL, false));
             4       0    0              0             0       0             1          0    0  static IntOption     opt_ccmin_mode        (_cat, "ccmin-mode",  "Controls conflict clause minimization (0=none, 1=basic, 2=deep)", 2, IntRange(0, 2));
             4       0    0              0             0       0             1          0    0  static IntOption     opt_phase_saving      (_cat, "phase-saving", "Controls the level of phase saving (0=none, 1=limited, 2=full)", 2, IntRange(0, 2));
             4       1    1              0             0       0             1          0    0  static BoolOption    opt_rnd_init_act      (_cat, "rnd-init",    "Randomize the initial activity", false);
             4       0    0              0             0       0             1          0    0  static IntOption     opt_restart_first     (_cat, "rfirst",      "The base restart interval", 100, IntRange(1, INT32_MAX));
             4       1    1              0             0       0             1          0    0  static DoubleOption  opt_restart_inc       (_cat, "rinc",        "Restart interval increase factor", 2, DoubleRange(1, false, HUGE_VAL, false));
             4       1    1              0             0       0             1          0    0  static DoubleOption  opt_garbage_frac      (_cat, "gc-frac",     "The fraction of wasted memory allowed before a garbage collection is triggered",  0.20, DoubleRange(0, false, HUGE_VAL, false));
             4       1    1              0             0       0             1          0    0  static IntOption     opt_chrono            (_cat, "chrono",  "Controls if to perform chrono backtrack", 100, IntRange(-1, INT32_MAX));
             4       1    1              0             0       0             1          0    0  static IntOption     opt_conf_to_chrono    (_cat, "confl-to-chrono",  "Controls number of conflicts to perform chrono backtrack", 4000, IntRange(-1, INT32_MAX));
             .       .    .              .             .       .             .          .    .  
             4       1    1              0             0       0             1          0    0  static IntOption     opt_max_lbd_dup       ("DUP-LEARNTS", "lbd-limit",  "specifies the maximum lbd of learnts to be screened for duplicates.", 12, IntRange(0, INT32_MAX));
             1       1    1              0             0       0             1          0    0  static IntOption     opt_min_dupl_app      ("DUP-LEARNTS", "min-dup-app",  "specifies the minimum number of learnts to be included into db.", 3, IntRange(2, INT32_MAX));
             4       0    0              0             0       0             1          0    0  static IntOption     opt_dupl_db_init_size ("DUP-LEARNTS", "dupdb-init",  "specifies the initial maximal duplicates DB size.", 500000, IntRange(1, INT32_MAX));
             .       .    .              .             .       .             .          .    .  
             4       1    1              0             0       0             1          0    0  static IntOption     opt_VSIDS_props_limit ("DUP-LEARNTS", "VSIDS-lim",  "specifies the number of propagations after which the solver switches between LRB and VSIDS(in millions).", 30, IntRange(1, INT32_MAX));
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  //VSIDS_props_limit
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  //=================================================================================================
             .       .    .              .             .       .             .          .    .  // Constructor/Destructor:
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             4       1    1              0             0       0             2          0    0  Solver::Solver() :
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // Parameters (user settable):
             .       .    .              .             .       .             .          .    .      //
             .       .    .              .             .       .             .          .    .      drup_file        (NULL)
             .       .    .              .             .       .             .          .    .    , verbosity        (0)
             .       .    .              .             .       .             .          .    .    , step_size        (opt_step_size)
             .       .    .              .             .       .             .          .    .    , step_size_dec    (opt_step_size_dec)
             .       .    .              .             .       .             .          .    .    , min_step_size    (opt_min_step_size)
-- line 95 ----------------------------------------
-- line 106 ----------------------------------------
             .       .    .              .             .       .             .          .    .    , garbage_frac     (opt_garbage_frac)
             .       .    .              .             .       .             .          .    .    , restart_first    (opt_restart_first)
             .       .    .              .             .       .             .          .    .    , restart_inc      (opt_restart_inc)
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .    , min_number_of_learnts_copies(opt_min_dupl_app)  
             .       .    .              .             .       .             .          .    .    , max_lbd_dup(opt_max_lbd_dup)
             .       .    .              .             .       .             .          .    .    , dupl_db_init_size(opt_dupl_db_init_size)
             3       1    1              1             0       0             1          0    0    , VSIDS_props_limit(opt_VSIDS_props_limit*1000000)
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .    // Parameters (the rest):
             .       .    .              .             .       .             .          .    .    //
             .       .    .              .             .       .             .          .    .    , learntsize_factor((double)1/(double)3), learntsize_inc(1.1)
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .    // Parameters (experimental):
             .       .    .              .             .       .             .          .    .    //
             .       .    .              .             .       .             .          .    .    , learntsize_adjust_start_confl (100)
-- line 122 ----------------------------------------
-- line 126 ----------------------------------------
             .       .    .              .             .       .             .          .    .    //
             .       .    .              .             .       .             .          .    .    , solves(0), starts(0), decisions(0), rnd_decisions(0), propagations(0), conflicts(0), conflicts_VSIDS(0)
             .       .    .              .             .       .             .          .    .    , dec_vars(0), clauses_literals(0), learnts_literals(0), max_literals(0), tot_literals(0)
             .       .    .              .             .       .             .          .    .    , chrono_backtrack(0), non_chrono_backtrack(0)
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .    , ok                 (true)
             .       .    .              .             .       .             .          .    .    , cla_inc            (1)
             .       .    .              .             .       .             .          .    .    , var_inc            (1)
             1       0    0              0             0       0             0          0    0    , watches_bin        (WatcherDeleted(ca))
             .       .    .              .             .       .             .          .    .    , watches            (WatcherDeleted(ca))
             .       .    .              .             .       .             .          .    .    , qhead              (0)
             .       .    .              .             .       .             .          .    .    , simpDB_assigns     (-1)
             .       .    .              .             .       .             .          .    .    , simpDB_props       (0)
             .       .    .              .             .       .             .          .    .    , order_heap_CHB     (VarOrderLt(activity_CHB))
             .       .    .              .             .       .             .          .    .    , order_heap_VSIDS   (VarOrderLt(activity_VSIDS))
             .       .    .              .             .       .             .          .    .    , progress_estimate  (0)
             .       .    .              .             .       .             .          .    .    , remove_satisfied   (true)
-- line 142 ----------------------------------------
-- line 164 ----------------------------------------
             .       .    .              .             .       .             .          .    .    // simplifyAll adjust occasion
             .       .    .              .             .       .             .          .    .    , curSimplify(1)
             .       .    .              .             .       .             .          .    .    , nbconfbeforesimplify(1000)
             .       .    .              .             .       .             .          .    .    , incSimplify(1000)
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .    , my_var_decay       (0.6)
             .       .    .              .             .       .             .          .    .    , DISTANCE           (true)
             .       .    .              .             .       .             .          .    .    , var_iLevel_inc     (1)
            94       8    8             25             2       2            63          1    0    , order_heap_distance(VarOrderLt(activity_distance))
             .       .    .              .             .       .             .          .    .  
             4       0    0              3             0       0             0          0    0  {}
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  Solver::~Solver()
             .       .    .              .             .       .             .          .    .  {
             .       .    .              .             .       .             .          .    .  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  // simplify All
             .       .    .              .             .       .             .          .    .  //
             .       .    .              .             .       .             .          .    .  CRef Solver::simplePropagate()
    31,276,544       4    2              0             0       0    23,457,408      7,429    0  {
     3,909,568       0    0              0             0       0     3,909,568          0    0      CRef    confl = CRef_Undef;
     3,909,568       0    0              0             0       0     3,909,568          0    0      int     num_props = 0;
     7,819,136       0    0              0             0       0     3,909,568      5,187    0      watches.cleanAll();
    11,728,704      31   14      3,909,568            18       0     3,909,568          0    0      watches_bin.cleanAll();
    57,045,924       0    0     28,522,962           142       0             0          0    0      while (qhead < trail.size())
             .       .    .              .             .       .             .          .    .      {
   123,085,895       1    1     49,234,358     1,108,469       0    49,234,358          0    0          Lit            p = trail[qhead++];     // 'p' is enqueued fact to propagate.
             .       .    .              .             .       .             .          .    .          vec<Watcher>&  ws = watches[p];
             .       .    .              .             .       .             .          .    .          Watcher        *i, *j, *end;
    24,613,394       0    0     24,613,394             0       0             0          0    0          num_props++;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .          // First, Propagate binary clauses
             .       .    .              .             .       .             .          .    .          vec<Watcher>&  wbin = watches_bin[p];
             .       .    .              .             .       .             .          .    .  
   126,227,934       0    0     24,617,179    22,754,082       0             0          0    0          for (int k = 0; k<wbin.size(); k++)
             .       .    .              .             .       .             .          .    .          {
             .       .    .              .             .       .             .          .    .  
    25,727,060       0    0     19,764,963     7,471,127       7             0          0    0              Lit imp = wbin[k].blocker;
             .       .    .              .             .       .             .          .    .  
    25,727,060       0    0              0             0       0             0          0    0              if (value(imp) == l_False)
             .       .    .              .             .       .             .          .    .              {
         7,570       0    0          3,785             0       0         3,785          0    0                  return wbin[k].cref;
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .  
    25,719,490       4    4              0             0       0             0          0    0              if (value(imp) == l_Undef)
             .       .    .              .             .       .             .          .    .              {
     4,575,541       0    0      4,575,541             0       0             0          0    0                  simpleUncheckEnqueue(imp, wbin[k].cref);
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .          }
 6,494,408,014      13    5  3,173,415,298    11,170,593       0    48,608,310          0    0          for (i = j = (Watcher*)ws, end = i + ws.size(); i != end;)
             .       .    .              .             .       .             .          .    .          {
             .       .    .              .             .       .             .          .    .              // Try to avoid inspecting the clause:
 3,124,188,510      31   15  3,124,188,510   397,403,408      76             0          0    0              Lit blocker = i->blocker;
 6,248,377,020       0    0  3,124,188,510     9,996,168       0             0          0    0              if (value(blocker) == l_True)
             .       .    .              .             .       .             .          .    .              {
             .       .    .              .             .       .             .          .    .                  *j++ = *i++; continue;
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .              // Make sure the false literal is data[1]:
 3,934,983,872       0    0  1,967,491,936             0       0             0          0    0              CRef     cr = i->cref;
             .       .    .              .             .       .             .          .    .              Clause&  c = ca[cr];
             .       .    .              .             .       .             .          .    .              Lit      false_lit = ~p;
 5,902,475,808       0    0  1,967,491,936 1,854,331,275     874             0          0    0              if (c[0] == false_lit)
 2,294,268,186       0    0    764,756,062    44,769,461      16 1,529,512,124          0    0                  c[0] = c[1], c[1] = false_lit;
             .       .    .              .             .       .             .          .    .              assert(c[1] == false_lit);
             .       .    .              .             .       .             .          .    .              //  i++;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .              // If 0th watch is true, then clause is already satisfied.
             .       .    .              .             .       .             .          .    .              // However, 0th watch is not the blocker, make it blocker using a new watcher w
             .       .    .              .             .       .             .          .    .              // why not simply do i->blocker=first in this case?
             .       .    .              .             .       .             .          .    .              Lit     first = c[0];
             .       .    .              .             .       .             .          .    .              //  Watcher w     = Watcher(cr, first);
 4,975,112,146       0    0    520,064,137       973,403       0             0          0    0              if (first != blocker && value(first) == l_True)
             .       .    .              .             .       .             .          .    .              {
   225,412,551       0    0              0             0       0   225,412,551          0    0                  i->blocker = first;
 5,528,436,500       0    0  1,382,109,125             0       0 1,382,109,125  9,116,700    0                  *j++ = *i++; continue;
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .              // Look for new watch:
             .       .    .              .             .       .             .          .    .              //if (incremental)
             .       .    .              .             .       .             .          .    .              //{ // ----------------- INCREMENTAL MODE
             .       .    .              .             .       .             .          .    .              //	int choosenPos = -1;
             .       .    .              .             .       .             .          .    .              //	for (int k = 2; k < c.size(); k++)
             .       .    .              .             .       .             .          .    .              //	{
-- line 250 ----------------------------------------
-- line 274 ----------------------------------------
             .       .    .              .             .       .             .          .    .              //		Watcher w = Watcher(cr, first); i++;
             .       .    .              .             .       .             .          .    .              //		c[1] = c[choosenPos]; c[choosenPos] = false_lit;
             .       .    .              .             .       .             .          .    .              //		watches[~c[1]].push(w);
             .       .    .              .             .       .             .          .    .              //		goto NextClause;
             .       .    .              .             .       .             .          .    .              //	}
             .       .    .              .             .       .             .          .    .              //}
             .       .    .              .             .       .             .          .    .              else
             .       .    .              .             .       .             .          .    .              {  // ----------------- DEFAULT  MODE (NOT INCREMENTAL)
 6,587,427,746      32   15              0             0       0             0          0    0                  for (int k = 2; k < c.size(); k++)
             .       .    .              .             .       .             .          .    .                  {
             .       .    .              .             .       .             .          .    .  
10,708,603,733       0    0              0             0       0             0          0    0                      if (value(c[k]) != l_False)
             .       .    .              .             .       .             .          .    .                      {
             .       .    .              .             .       .             .          .    .                          // watcher i is abandonned using i++, because cr watches now ~c[k] instead of p
             .       .    .              .             .       .             .          .    .                          // the blocker is first in the watcher. However,
             .       .    .              .             .       .             .          .    .                          // the blocker in the corresponding watcher in ~first is not c[1]
             .       .    .              .             .       .             .          .    .                          Watcher w = Watcher(cr, first); i++;
 6,896,033,060       0    0  1,724,008,265             0       0 3,448,016,530          0    0                          c[1] = c[k]; c[k] = false_lit;
             .       .    .              .             .       .             .          .    .                          watches[~c[1]].push(w);
 1,724,008,265       0    0              0             0       0             0          0    0                          goto NextClause;
             .       .    .              .             .       .             .          .    .                      }
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .              // Did not find watch -- clause is unit under assignment:
    18,071,120       0    0              0             0       0    18,071,120          0    0              i->blocker = first;
    72,284,480       3    2     18,071,120             0       0    18,071,120     75,041    0              *j++ = *i++;
    36,142,240      32   13              0             0       0             0          0    0              if (value(first) == l_False)
             .       .    .              .             .       .             .          .    .              {
     1,313,626      14    6              0             0       0       200,523        112    0                  confl = cr;
       401,046      27   12        200,523             0       0       200,523      5,298    0                  qhead = trail.size();
             .       .    .              .             .       .             .          .    .                  // Copy the remaining watches:
    37,941,912       3    1        383,039        17,916       0             0          0    0                  while (i < end)
    18,387,394       0    0     18,387,394     2,265,672       4    18,387,394    134,695    0                      *j++ = *i++;
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .              else
             .       .    .              .             .       .             .          .    .              {
             .       .    .              .             .       .             .          .    .                  simpleUncheckEnqueue(first, cr);
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .  NextClause:;
             .       .    .              .             .       .             .          .    .          }
    47,989,832      32   14              0             0       0             0          0    0          ws.shrink(i - j);
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
     7,811,566       0    0      7,811,566     1,568,182       0             0          0    0      s_propagations += num_props;
             .       .    .              .             .       .             .          .    .  
     3,905,783       0    0      3,905,783             0       0             0          0    0      return confl;
 1,181,163,822      34   13     27,366,976     1,469,251       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  void Solver::simpleUncheckEnqueue(Lit p, CRef from){
             .       .    .              .             .       .             .          .    .      assert(value(p) == l_Undef);
    22,446,138       0    0              0             0       0    22,446,138          0    0      assigns[var(p)] = lbool(!sign(p)); // this makes a lbool object whose value is sign(p)
    52,711,412      32   11     26,355,706       423,830       0    26,355,706 18,249,409    0      vardata[var(p)].reason = from;
    21,780,165       0    0     21,780,165             0       0             0          0    0      trail.push_(p);
             .       .    .              .             .       .             .          .    .  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  void Solver::cancelUntilTrailRecord()
             .       .    .              .             .       .             .          .    .  {
    54,054,422       0    0        537,204         5,203       0             0          0    0      for (int c = trail.size() - 1; c >= trailRecord; c--)
             .       .    .              .             .       .             .          .    .      {
       268,602      32   11        268,602             0       0             0          0    0          Var x = var(trail[c]);
    27,161,512       0    0        268,602             0       0    26,355,706    303,190    0          assigns[x] = l_Undef;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      }
       268,602       0    0              0             0       0       268,602          0    0      qhead = trailRecord;
       537,204       0    0              0             0       0             0          0    0      trail.shrink(trail.size() - trailRecord);
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  void Solver::litsEnqueue(int cutP, Clause& c)
             .       .    .              .             .       .             .          .    .  {
             .       .    .              .             .       .             .          .    .      for (int i = cutP; i < c.size(); i++)
             .       .    .              .             .       .             .          .    .      {
             .       .    .              .             .       .             .          .    .          simpleUncheckEnqueue(~c[i]);
-- line 347 ----------------------------------------
-- line 348 ----------------------------------------
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  bool Solver::removed(CRef cr) {
             .       .    .              .             .       .             .          .    .      return ca[cr].mark() == 1;
             .       .    .              .             .       .             .          .    .  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  void Solver::simpleAnalyze(CRef confl, vec<Lit>& out_learnt, vec<CRef>& reason_clause, bool True_confl)
     2,897,356      29   13              0             0       0     1,580,376          0    0  {
       263,396       0    0              0             0       0             0          0    0      int pathC = 0;
       263,396       0    0              0             0       0             0          0    0      Lit p = lit_Undef;
       790,188       0    0        263,396             0       0             0          0    0      int index = trail.size() - 1;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      do{
    22,625,052      32   14              0             0       0             0          0    0          if (confl != CRef_Undef){
             .       .    .              .             .       .             .          .    .              reason_clause.push(confl);
             .       .    .              .             .       .             .          .    .              Clause& c = ca[confl];
             .       .    .              .             .       .             .          .    .              // Special case for binary clauses
             .       .    .              .             .       .             .          .    .              // The first one has to be SAT
    32,450,556      36   12              0             0       0             0          0    0              if (p != lit_Undef && c.size() == 2 && value(c[0]) == l_False) {
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .                  assert(value(c[1]) == l_True);
             .       .    .              .             .       .             .          .    .                  Lit tmp = c[0];
       614,631       0    0        204,877        14,857       0       409,754          0    0                  c[0] = c[1], c[1] = tmp;
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .              // if True_confl==true, then choose p begin with the 1th index of c;
    93,224,985       0    0     16,277,273       260,034       0             0          0    0              for (int j = (p == lit_Undef && True_confl == false) ? 0 : 1; j < c.size(); j++){
             .       .    .              .             .       .             .          .    .                  Lit q = c[j];
    61,619,578       0    0     30,809,789       836,788       0             0          0    0                  if (!seen[var(q)]){
    11,049,164       0    0              0             0       0    11,049,164          0    0                      seen[var(q)] = 1;
    33,147,492       0    0     11,049,164             0       0             0          0    0                      pathC++;
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .          else if (confl == CRef_Undef){
             .       .    .              .             .       .             .          .    .              out_learnt.push(~p);
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .          // if not break, while() will come to the index of trail blow 0, and fatal error occur;
    39,851,456      32   14     11,049,160             0       0             0          0    0          if (pathC == 0) break;
             .       .    .              .             .       .             .          .    .          // Select next clause to look at:
   188,071,368       0    0     62,690,466     2,424,315       0             0          0    0          while (!seen[var(trail[index--])]);
             .       .    .              .             .       .             .          .    .          // if the reason cr from the 0-level assigned var, we must break avoid move forth further;
             .       .    .              .             .       .             .          .    .          // but attention that maybe seen[x]=1 and never be clear. However makes no matter;
    22,098,320       0    0     11,049,160       259,409       0             0          0    0          if (trailRecord > index + 1) break;
             .       .    .              .             .       .             .          .    .          p = trail[index + 1];
             .       .    .              .             .       .             .          .    .          confl = reason(var(p));
    11,049,130       0    0              0             0       0    11,049,130          0    0          seen[var(p)] = 0;
    11,049,130       0    0              0             0       0             0          0    0          pathC--;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      } while (pathC >= 0);
     2,633,960      32   12      1,843,772           972       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  void Solver::simplifyLearnt(Clause& c)
     2,417,418      64   27              0             0       0     1,611,612      3,513    0  {
             .       .    .              .             .       .             .          .    .      ////
       268,602       0    0        268,602        13,257       0             0          0    0      original_length_record += c.size();
             .       .    .              .             .       .             .          .    .  
       537,204       0    0        268,602         3,750       0       268,602     30,582    0      trailRecord = trail.size();// record the start pointer
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      vec<Lit> falseLit;
             .       .    .              .             .       .             .          .    .      falseLit.clear();
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      //sort(&c[0], c.size(), VarOrderLevelLt(vardata));
             .       .    .              .             .       .             .          .    .  
       408,616      31   12              0             0       0             0          0    0      bool True_confl = false;
             .       .    .              .             .       .             .          .    .      int beforeSize, afterSize;
             .       .    .              .             .       .             .          .    .      beforeSize = c.size();
             .       .    .              .             .       .             .          .    .      int i, j;
             .       .    .              .             .       .             .          .    .      CRef confl;
             .       .    .              .             .       .             .          .    .  
    13,736,838      32   12              0             0       0             0          0    0      for (i = 0, j = 0; i < c.size(); i++){
     8,610,276       0    0              0             0       0             0          0    0          if (value(c[i]) == l_Undef){
             .       .    .              .             .       .             .          .    .              //printf("///@@@ uncheckedEnqueue:index = %d. l_Undef\n", i);
             .       .    .              .             .       .             .          .    .              simpleUncheckEnqueue(~c[i]);
    15,433,964       0    0      3,909,568             0       0     3,909,568     22,765    0              c[j++] = c[i];
    11,728,704       0    0              0             0       0     3,909,568        739    0              confl = simplePropagate();
    11,728,704      32   12      3,909,568     1,441,178       0             0          0    0              if (confl != CRef_Undef){
             .       .    .              .             .       .             .          .    .                  break;
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .          else{
       791,140       0    0              0             0       0             0          0    0              if (value(c[i]) == l_True){
             .       .    .              .             .       .             .          .    .                  //printf("///@@@ uncheckedEnqueue:index = %d. l_True\n", i);
       236,352      16    5         59,088             0       0        59,088      1,198    0                  c[j++] = c[i];
        59,088      11    6              0             0       0             0          0    0                  True_confl = true;
             .       .    .              .             .       .             .          .    .                  confl = reason(var(c[i]));
             .       .    .              .             .       .             .          .    .                  break;
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .              else{
             .       .    .              .             .       .             .          .    .                  //printf("///@@@ uncheckedEnqueue:index = %d. l_False\n", i);
             .       .    .              .             .       .             .          .    .                  falseLit.push(c[i]);
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .      c.shrink(c.size() - j);
             .       .    .              .             .       .             .          .    .      afterSize = c.size();
             .       .    .              .             .       .             .          .    .      //printf("\nbefore : %d, after : %d ", beforeSize, afterSize);
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      if (confl != CRef_Undef || True_confl == true){
       263,396       0    0              0             0       0             0          0    0          simp_learnt_clause.clear();
       263,396       0    0              0             0       0             0          0    0          simp_reason_clause.clear();
       526,792       0    0              0             0       0             0          0    0          if (True_confl == true){
             .       .    .              .             .       .             .          .    .              simp_learnt_clause.push(c.last());
             .       .    .              .             .       .             .          .    .          }
     1,843,772      21    6              0             0       0       263,396          0    0          simpleAnalyze(confl, simp_learnt_clause, simp_reason_clause, True_confl);
             .       .    .              .             .       .             .          .    .  
       790,188       0    0        263,396             0       0             0          0    0          if (simp_learnt_clause.size() < c.size()){
     2,584,414      32   13      1,153,381             0       0             0          0    0              for (i = 0; i < simp_learnt_clause.size(); i++){
     4,335,872       0    0      1,083,968             0       0     1,083,968     23,321    0                  c[i] = simp_learnt_clause[i];
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .              c.shrink(c.size() - i);
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      cancelUntilTrailRecord();
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      ////
       268,602       0    0        268,602             0       0             0          0    0      simplified_length_record += c.size();
             .       .    .              .             .       .             .          .    .  
     2,148,816       0    0      1,880,214       264,127       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  bool Solver::simplifyLearnt_x(vec<CRef>& learnts_x)
             .       .    .              .             .       .             .          .    .  {
             .       .    .              .             .       .             .          .    .      int beforeSize, afterSize;
             .       .    .              .             .       .             .          .    .      int learnts_x_size_before = learnts_x.size();
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      int ci, cj, li, lj;
             .       .    .              .             .       .             .          .    .      bool sat, false_lit;
-- line 476 ----------------------------------------
-- line 574 ----------------------------------------
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      //   printf("c nbLearnts_x %d / %d, nbSimplified: %d, nbSimplifing: %d\n",
             .       .    .              .             .       .             .          .    .      //          learnts_x_size_before, learnts_x.size(), nbSimplified, nbSimplifing);
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      return true;
             .       .    .              .             .       .             .          .    .  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  bool Solver::simplifyLearnt_core()
           352       0    0              0             0       0           192          0    0  {
             .       .    .              .             .       .             .          .    .      int beforeSize, afterSize;
             .       .    .              .             .       .             .          .    .      int learnts_core_size_before = learnts_core.size();
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      int ci, cj, li, lj;
             .       .    .              .             .       .             .          .    .      bool sat, false_lit;
             .       .    .              .             .       .             .          .    .      unsigned int nblevels;
             .       .    .              .             .       .             .          .    .      ////
             .       .    .              .             .       .             .          .    .      //printf("learnts_x size : %d\n", learnts_x.size());
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      ////
             .       .    .              .             .       .             .          .    .      int nbSimplified = 0;
             .       .    .              .             .       .             .          .    .      int nbSimplifing = 0;
             .       .    .              .             .       .             .          .    .  
     2,036,413      32   14             32             0       0             0          0    0      for (ci = 0, cj = 0; ci < learnts_core.size(); ci++){
     3,054,441      32   14      2,036,294        63,667   3,306             0          0    0          CRef cr = learnts_core[ci];
             .       .    .              .             .       .             .          .    .          Clause& c = ca[cr];
             .       .    .              .             .       .             .          .    .  
     2,036,294       0    0              0             0       0             0          0    0          if (removed(cr)) continue;
     2,036,294       0    0      1,018,147       124,126      30             0          0    0          else if (c.simplified()){
     1,962,456       0    0              0             0       0       981,228         26    0              learnts_core[cj++] = learnts_core[ci];
             .       .    .              .             .       .             .          .    .              ////
     2,943,806       0    0        981,228             0       0             0          0    0              nbSimplified++;
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .          else{
             .       .    .              .             .       .             .          .    .              int saved_size=c.size();
             .       .    .              .             .       .             .          .    .              //         if (drup_file){
             .       .    .              .             .       .             .          .    .              //                 add_oc.clear();
             .       .    .              .             .       .             .          .    .              //                 for (int i = 0; i < c.size(); i++) add_oc.push(c[i]); }
             .       .    .              .             .       .             .          .    .              ////
             .       .    .              .             .       .             .          .    .              nbSimplifing++;
        36,908       0    0              0             0       0             0          0    0              sat = false_lit = false;
       934,712       0    0              0             0       0             0          0    0              for (int i = 0; i < c.size(); i++){
       934,798       0    0              0             0       0             0          0    0                  if (value(c[i]) == l_True){
             .       .    .              .             .       .             .          .    .                      sat = true;
             .       .    .              .             .       .             .          .    .                      break;
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .                  else if (value(c[i]) == l_False){
     1,008,506      32   14              0             0       0        36,908          0    0                      false_lit = true;
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .              if (sat){
           378       6    2            108             0       0           108          0    0                  removeClause(cr);
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .              else{
       221,190       0    0              0             0       0       110,595          0    0                  detachClause(cr, true);
             .       .    .              .             .       .             .          .    .  
       147,460      32   14         73,730             0       0             0          0    0                  if (false_lit){
         3,814       0    0            304             0       0             0          0    0                      for (li = lj = 0; li < c.size(); li++){
         2,446       0    0              0             0       0             0          0    0                          if (value(c[li]) != l_False){
         3,147       0    0              0             0       0         1,049          0    0                              c[lj++] = c[li];
             .       .    .              .             .       .             .          .    .                          }
             .       .    .              .             .       .             .          .    .                      }
             .       .    .              .             .       .             .          .    .                      c.shrink(li - lj);
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .                  beforeSize = c.size();
             .       .    .              .             .       .             .          .    .                  assert(c.size() > 1);
             .       .    .              .             .       .             .          .    .                  // simplify a learnt clause c
       147,460       0    0              0             0       0        73,730          0    0                  simplifyLearnt(c);
             .       .    .              .             .       .             .          .    .                  assert(c.size() > 0);
             .       .    .              .             .       .             .          .    .                  afterSize = c.size();
             .       .    .              .             .       .             .          .    .                  
       191,214       0    0        110,595        35,295       0             0          0    0                  if(drup_file && saved_size !=c.size()){
             .       .    .              .             .       .             .          .    .  #ifdef BIN_DRUP
             .       .    .              .             .       .             .          .    .                      binDRUP('a', c , drup_file);
             .       .    .              .             .       .             .          .    .                      //                    binDRUP('d', add_oc, drup_file);
             .       .    .              .             .       .             .          .    .  #else
             .       .    .              .             .       .             .          .    .                      for (int i = 0; i < c.size(); i++)
             .       .    .              .             .       .             .          .    .                          fprintf(drup_file, "%i ", (var(c[i]) + 1) * (-2 * sign(c[i]) + 1));
             .       .    .              .             .       .             .          .    .                      fprintf(drup_file, "0\n");
             .       .    .              .             .       .             .          .    .  
-- line 653 ----------------------------------------
-- line 655 ----------------------------------------
             .       .    .              .             .       .             .          .    .                      //                    for (int i = 0; i < add_oc.size(); i++)
             .       .    .              .             .       .             .          .    .                      //                        fprintf(drup_file, "%i ", (var(add_oc[i]) + 1) * (-2 * sign(add_oc[i]) + 1));
             .       .    .              .             .       .             .          .    .                      //                    fprintf(drup_file, "0\n");
             .       .    .              .             .       .             .          .    .  #endif
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .                  //printf("beforeSize: %2d, afterSize: %2d\n", beforeSize, afterSize);
             .       .    .              .             .       .             .          .    .  
        73,730       0    0              0             0       0             0          0    0                  if (c.size() == 1){
             .       .    .              .             .       .             .          .    .                      // when unit clause occur, enqueue and propagate
            35       4    2              7             0       0             7          0    0                      uncheckedEnqueue(c[0]);
            21       0    0              7             0       0             0          0    0                      if (propagate() != CRef_Undef){
             .       .    .              .             .       .             .          .    .                          ok = false;
             .       .    .              .             .       .             .          .    .                          return false;
             .       .    .              .             .       .             .          .    .                      }
             .       .    .              .             .       .             .          .    .                      // delete the clause memory in logic
             .       .    .              .             .       .             .          .    .                      c.mark(1);
             .       .    .              .             .       .             .          .    .                      ca.free(cr);
             .       .    .              .             .       .             .          .    .  //#ifdef BIN_DRUP
             .       .    .              .             .       .             .          .    .  //                    binDRUP('d', c, drup_file);
-- line 674 ----------------------------------------
-- line 675 ----------------------------------------
             .       .    .              .             .       .             .          .    .  //#else
             .       .    .              .             .       .             .          .    .  //                    fprintf(drup_file, "d ");
             .       .    .              .             .       .             .          .    .  //                    for (int i = 0; i < c.size(); i++)
             .       .    .              .             .       .             .          .    .  //                        fprintf(drup_file, "%i ", (var(c[i]) + 1) * (-2 * sign(c[i]) + 1));
             .       .    .              .             .       .             .          .    .  //                    fprintf(drup_file, "0\n");
             .       .    .              .             .       .             .          .    .  //#endif
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .                  else{
       110,574       0    0              0             0       0        36,858          0    0                      attachClause(cr);
       221,148      31   13        110,574        70,683       0        36,858      1,608    0                      learnts_core[cj++] = learnts_core[ci];
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .                      nblevels = computeLBD(c);
        73,716      26   12              0             0       0             0          0    0                      if (nblevels < c.lbd()){
             .       .    .              .             .       .             .          .    .                          //printf("lbd-before: %d, lbd-after: %d\n", c.lbd(), nblevels);
             .       .    .              .             .       .             .          .    .                          c.set_lbd(nblevels);
             .       .    .              .             .       .             .          .    .                      }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .                      c.setSimplified(true);
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .      }
            32       0    0              0             0       0             0          0    0      learnts_core.shrink(ci - cj);
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      //    printf("c nbLearnts_core %d / %d, nbSimplified: %d, nbSimplifing: %d\n",
             .       .    .              .             .       .             .          .    .      //           learnts_core_size_before, learnts_core.size(), nbSimplified, nbSimplifing);
             .       .    .              .             .       .             .          .    .  
            32      21    5              0             0       0             0          0    0      return true;
             .       .    .              .             .       .             .          .    .  
           256       0    0            224            32       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
     9,746,595       2    2              0             0       0     6,497,730          0    0  int Solver::is_duplicate(std::vector<uint32_t>&c){
     2,165,910       0    0              0             0       0     2,165,910        377    0     auto time_point_0 = std::chrono::high_resolution_clock::now();
     1,082,955       0    0      1,082,955       695,704       0             0          0    0      dupl_db_size++;
     2,545,265     139    8        472,525             0       0             0          0    0      int res = 0;    
             .       .    .              .             .       .             .          .    .      
     2,165,910       0    0      2,165,910             0       0             0          0    0      int sz = c.size();
             .       .    .              .             .       .             .          .    .      std::vector<uint32_t> tmp(c);    
             .       .    .              .             .       .             .          .    .      sort(tmp.begin(),tmp.end());
             .       .    .              .             .       .             .          .    .      
     1,082,955 130,120    2              0             0       0     1,082,955          0    0      uint64_t hash = 0;    
             .       .    .              .             .       .             .          .    .      
    55,033,990   3,183    4              0             0       0     1,082,955          0    0      for (int i =0; i<sz; i++) {
   231,851,750       0    0     23,185,175             0       0             0          0    0          hash ^= tmp[i] + 0x9e3779b9 + (hash << 6) + (hash>> 2);     
             .       .    .              .             .       .             .          .    .      }    
             .       .    .              .             .       .             .          .    .      
     1,082,955       0    0              0             0       0     1,082,955          0    0      int32_t head = tmp[0];
             .       .    .              .             .       .             .          .    .      auto it0 = ht.find(head);
     5,411,967       0    0      1,082,946             0       0             0          0    0      if (it0 != ht.end()){
             .       .    .              .             .       .             .          .    .          auto it1=ht[head].find(sz);
     2,164,050       0    0              0             0       0             0          0    0          if (it1 != ht[head].end()){
     1,065,840       0    0              0             0       0     1,065,840          0    0              auto it2 = ht[head][sz].find(hash);
     3,197,520       0    0              0             0       0     1,065,840          0    0              if (it2 != ht[head][sz].end()){
       139,755       0    0         46,585        11,029     809        46,585          0    0                  it2->second++;
        46,585       0    0              0             0       0             0          0    0                  res = it2->second;            
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .              else{
     1,019,255       0    0              0             0       0     1,019,255          0    0                  ht[head][sz][hash]=1;
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .          else{            
        32,370       5    1              0             0       0        16,185          0    0              ht[head][sz][hash]=1;
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .      }else{        
     1,037,300     727   13              0             0       0     1,037,300        144    0          ht[head][sz][hash]=1;
             .       .    .              .             .       .             .          .    .      } 
     1,082,955      24    1              0             0       0     1,082,955          0    0      auto time_point_1 = std::chrono::high_resolution_clock::now();
             .       .    .              .             .       .             .          .    .      duptime += std::chrono::duration_cast<std::chrono::microseconds>(time_point_1-time_point_0);    
             .       .    .              .             .       .             .          .    .      return res;
     9,746,595       0    0      7,580,685         1,510       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  bool Solver::simplifyLearnt_tier2()
           352      32   12              0             0       0           192          0    0  {
             .       .    .              .             .       .             .          .    .      int beforeSize, afterSize;
             .       .    .              .             .       .             .          .    .      int learnts_tier2_size_before = learnts_tier2.size();
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      int ci, cj, li, lj;
             .       .    .              .             .       .             .          .    .      bool sat, false_lit;
             .       .    .              .             .       .             .          .    .      unsigned int nblevels;
             .       .    .              .             .       .             .          .    .      ////
             .       .    .              .             .       .             .          .    .      //printf("learnts_x size : %d\n", learnts_x.size());
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      ////
             .       .    .              .             .       .             .          .    .      int nbSimplified = 0;
             .       .    .              .             .       .             .          .    .      int nbSimplifing = 0;
             .       .    .              .             .       .             .          .    .  
       656,996      22    1             32             0       0             0          0    0      for (ci = 0, cj = 0; ci < learnts_tier2.size(); ci++){
       985,350       0    0        656,900        21,508       0             0          0    0          CRef cr = learnts_tier2[ci];
             .       .    .              .             .       .             .          .    .          Clause& c = ca[cr];
             .       .    .              .             .       .             .          .    .  
       656,900       0    0              0             0       0             0          0    0          if (removed(cr)) continue;
       656,900       0    0        328,450        39,063       0             0          0    0          else if (c.simplified()){
       193,290       0    0              0             0       0        96,645        755    0              learnts_tier2[cj++] = learnts_tier2[ci];
             .       .    .              .             .       .             .          .    .              ////
       753,539       0    0         96,645             0       0             0          0    0              nbSimplified++;
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .          else{
             .       .    .              .             .       .             .          .    .              int saved_size=c.size();
             .       .    .              .             .       .             .          .    .              //            if (drup_file){
             .       .    .              .             .       .             .          .    .              //                    add_oc.clear();
             .       .    .              .             .       .             .          .    .              //                    for (int i = 0; i < c.size(); i++) add_oc.push(c[i]); }
             .       .    .              .             .       .             .          .    .              ////
             .       .    .              .             .       .             .          .    .              nbSimplifing++;
       231,768       0    0              0             0       0             0          0    0              sat = false_lit = false;
     9,515,886       0    0              0             0       0             0          0    0              for (int i = 0; i < c.size(); i++){
     9,515,948       0    0              0             0       0             0          0    0                  if (value(c[i]) == l_True){
             .       .    .              .             .       .             .          .    .                      sat = true;
             .       .    .              .             .       .             .          .    .                      break;
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .                  else if (value(c[i]) == l_False){
     9,979,348       8    3              0             0       0       231,768          0    0                      false_lit = true;
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .              if (sat){
           340       0    0             68             0       0            68          0    0                  removeClause(cr);
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .              else{
     1,390,422      25    7              0             0       0       695,211         33    0                  detachClause(cr, true);
             .       .    .              .             .       .             .          .    .  
       926,948       0    0        463,474         3,604       0             0          0    0                  if (false_lit){
        45,471      10    3          2,350             1       0             0          0    0                      for (li = lj = 0; li < c.size(); li++){
        34,896       0    0              0             0       0             0          0    0                          if (value(c[li]) != l_False){
        47,736       0    0              0             0       0        15,912          0    0                              c[lj++] = c[li];
             .       .    .              .             .       .             .          .    .                          }
             .       .    .              .             .       .             .          .    .                      }
             .       .    .              .             .       .             .          .    .                      c.shrink(li - lj);
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .                  beforeSize = c.size();
             .       .    .              .             .       .             .          .    .                  assert(c.size() > 1);
             .       .    .              .             .       .             .          .    .                  // simplify a learnt clause c
     1,158,685       0    0              0             0       0       695,211          0    0                  simplifyLearnt(c);
             .       .    .              .             .       .             .          .    .                  assert(c.size() > 0);
             .       .    .              .             .       .             .          .    .                  afterSize = c.size();
             .       .    .              .             .       .             .          .    .                  
       926,948      31   11        463,474       228,522       0             0          0    0                  if(drup_file && saved_size!=c.size()){
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  #ifdef BIN_DRUP
             .       .    .              .             .       .             .          .    .                      binDRUP('a', c , drup_file);
             .       .    .              .             .       .             .          .    .                      //                    binDRUP('d', add_oc, drup_file);
             .       .    .              .             .       .             .          .    .  #else
             .       .    .              .             .       .             .          .    .                      for (int i = 0; i < c.size(); i++)
             .       .    .              .             .       .             .          .    .                          fprintf(drup_file, "%i ", (var(c[i]) + 1) * (-2 * sign(c[i]) + 1));
             .       .    .              .             .       .             .          .    .                      fprintf(drup_file, "0\n");
-- line 819 ----------------------------------------
-- line 822 ----------------------------------------
             .       .    .              .             .       .             .          .    .                      //                    for (int i = 0; i < add_oc.size(); i++)
             .       .    .              .             .       .             .          .    .                      //                        fprintf(drup_file, "%i ", (var(add_oc[i]) + 1) * (-2 * sign(add_oc[i]) + 1));
             .       .    .              .             .       .             .          .    .                      //                    fprintf(drup_file, "0\n");
             .       .    .              .             .       .             .          .    .  #endif
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .                  //printf("beforeSize: %2d, afterSize: %2d\n", beforeSize, afterSize);
             .       .    .              .             .       .             .          .    .  
       463,474       0    0              0             0       0             0          0    0                  if (c.size() == 1){
             .       .    .              .             .       .             .          .    .                      // when unit clause occur, enqueue and propagate
            15       0    0              3             0       0             3          0    0                      uncheckedEnqueue(c[0]);
             9       0    0              3             0       0             0          0    0                      if (propagate() != CRef_Undef){
             .       .    .              .             .       .             .          .    .                          ok = false;
             .       .    .              .             .       .             .          .    .                          return false;
             .       .    .              .             .       .             .          .    .                      }
             .       .    .              .             .       .             .          .    .                      // delete the clause memory in logic
             .       .    .              .             .       .             .          .    .                      c.mark(1);
             .       .    .              .             .       .             .          .    .                      ca.free(cr);
             .       .    .              .             .       .             .          .    .  //#ifdef BIN_DRUP
             .       .    .              .             .       .             .          .    .  //                    binDRUP('d', c, drup_file);
-- line 841 ----------------------------------------
-- line 845 ----------------------------------------
             .       .    .              .             .       .             .          .    .  //                        fprintf(drup_file, "%i ", (var(c[i]) + 1) * (-2 * sign(c[i]) + 1));
             .       .    .              .             .       .             .          .    .  //                    fprintf(drup_file, "0\n");
             .       .    .              .             .       .             .          .    .  //#endif
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .                  else{
             .       .    .              .             .       .             .          .    .                      
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .                      nblevels = computeLBD(c);
       463,468       0    0              0             0       0             0          0    0                      if (nblevels < c.lbd()){
             .       .    .              .             .       .             .          .    .                          //printf("lbd-before: %d, lbd-after: %d\n", c.lbd(), nblevels);
             .       .    .              .             .       .             .          .    .                          c.set_lbd(nblevels);
             .       .    .              .             .       .             .          .    .                      }
             .       .    .              .             .       .             .          .    .                       //duplicate learnts 
             .       .    .              .             .       .             .          .    .                      int id = 0;                    
             .       .    .              .             .       .             .          .    .                      
             .       .    .              .             .       .             .          .    .                      std::vector<uint32_t> tmp;
    13,271,139       0    0      9,815,975             0       0             0          0    0                      for (int i = 0; i < c.size(); i++)                           
     6,852,962       0    0      3,426,481             0       0     3,426,481          0    0                          tmp.push_back(c[i].x);
       926,936       0    0              0             0       0       231,734          0    0                      id = is_duplicate(tmp);
             .       .    .              .             .       .             .          .    .                       
             .       .    .              .             .       .             .          .    .                                          
             .       .    .              .             .       .             .          .    .                      //duplicate learnts 
             .       .    .              .             .       .             .          .    .  
       926,936       4    2        231,734             0       0             0          0    0                      if (id < min_number_of_learnts_copies+2){
       691,650       6    3              0             0       0       230,550          0    0                          attachClause(cr);
     1,140,059       0    0        691,650       455,999       0       230,550    219,950    0                          learnts_tier2[cj++] = learnts_tier2[ci];                    
       922,200      32   13        230,550             0       0             0          0    0                          if (id == min_number_of_learnts_copies+1){                            
           537       1    1            537             0       0             0          0    0                              duplicates_added_minimization++;                                  
             .       .    .              .             .       .             .          .    .                          }
       460,026       0    0        230,013       228,020       0             0          0    0                          if ((c.lbd() <= core_lbd_cut)||(id == min_number_of_learnts_copies+1)){
             .       .    .              .             .       .             .          .    .                          //if (id == min_number_of_learnts_copies+1){
             .       .    .              .             .       .             .          .    .                              cj--;
             4       3    1              0             0       0             0          0    0                              learnts_core.push(cr);
             .       .    .              .             .       .             .          .    .                              c.mark(CORE);
             .       .    .              .             .       .             .          .    .                          }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .                          c.setSimplified(true);
             .       .    .              .             .       .             .          .    .                      }
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .      }
            32      21    9              0             0       0             0          0    0      learnts_tier2.shrink(ci - cj);
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      //    printf("c nbLearnts_tier2 %d / %d, nbSimplified: %d, nbSimplifing: %d\n",
             .       .    .              .             .       .             .          .    .      //           learnts_tier2_size_before, learnts_tier2.size(), nbSimplified, nbSimplifing);
             .       .    .              .             .       .             .          .    .  
            32       0    0              0             0       0             0          0    0      return true;
             .       .    .              .             .       .             .          .    .  
           256       0    0            224            32       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  bool Solver::simplifyAll()
           160      11    6              0             0       0            96          0    0  {
             .       .    .              .             .       .             .          .    .      ////
            64       0    0              0             0       0            32          0    0      simplified_length_record = original_length_record = 0;
             .       .    .              .             .       .             .          .    .  
           128       0    0             32            31       0             0          0    0      if (!ok || propagate() != CRef_Undef)
             .       .    .              .             .       .             .          .    .          return ok = false;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      //// cleanLearnts(also can delete these code), here just for analyzing
             .       .    .              .             .       .             .          .    .      //if (local_learnts_dirty) cleanLearnts(learnts_local, LOCAL);
             .       .    .              .             .       .             .          .    .      //if (tier2_learnts_dirty) cleanLearnts(learnts_tier2, TIER2);
             .       .    .              .             .       .             .          .    .      //local_learnts_dirty = tier2_learnts_dirty = false;
             .       .    .              .             .       .             .          .    .  
           128       0    0              0             0       0            32          0    0      if (!simplifyLearnt_core()) return ok = false;
           128      32   15              0             0       0            32          0    0      if (!simplifyLearnt_tier2()) return ok = false;
             .       .    .              .             .       .             .          .    .      //if (!simplifyLearnt_x(learnts_local)) return ok = false;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      checkGarbage();
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      ////
             .       .    .              .             .       .             .          .    .      //  printf("c size_reduce_ratio     : %4.2f%%\n",
             .       .    .              .             .       .             .          .    .      //         original_length_record == 0 ? 0 : (original_length_record - simplified_length_record) * 100 / (double)original_length_record);
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      return true;
           160       0    0            128            32       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  //=================================================================================================
             .       .    .              .             .       .             .          .    .  // Minor methods:
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  // Creates a new SAT variable in the solver. If 'decision' is cleared, variable will not be
             .       .    .              .             .       .             .          .    .  // used as a decision variable (NOTE! This has effects on the meaning of a SATISFIABLE result).
             .       .    .              .             .       .             .          .    .  //
             .       .    .              .             .       .             .          .    .  Var Solver::newVar(bool sign, bool dvar)
         8,270       1    1              0             0       0         6,616          0    0  {
             .       .    .              .             .       .             .          .    .      int v = nVars();
             .       .    .              .             .       .             .          .    .      watches_bin.init(mkLit(v, false));
             .       .    .              .             .       .             .          .    .      watches_bin.init(mkLit(v, true ));
             .       .    .              .             .       .             .          .    .      watches  .init(mkLit(v, false));
             .       .    .              .             .       .             .          .    .      watches  .init(mkLit(v, true ));
            14       1    1              0             0       0             0          0    0      assigns  .push(l_Undef);
            14       1    1              0             0       0             0          0    0      vardata  .push(mkVarData(CRef_Undef, 0));
            14       0    0              0             0       0             0          0    0      activity_CHB  .push(0);
         2,509       0    0            827            81       0            14          0    0      activity_VSIDS.push(rnd_init_act ? drand(random_seed) * 0.00001 : 0);
             .       .    .              .             .       .             .          .    .  
            14       1    1              0             0       0             0          0    0      picked.push(0);
            14       0    0              0             0       0             0          0    0      conflicted.push(0);
            14       0    0              0             0       0             0          0    0      almost_conflicted.push(0);
             .       .    .              .             .       .             .          .    .  #ifdef ANTI_EXPLORATION
            14       0    0              0             0       0             0          0    0      canceled.push(0);
             .       .    .              .             .       .             .          .    .  #endif
             .       .    .              .             .       .             .          .    .  
            14       0    0              0             0       0             0          0    0      seen     .push(0);
            14       0    0              0             0       0             0          0    0      seen2    .push(0);
            14       0    0              0             0       0             0          0    0      polarity .push(sign);
            14       0    0              0             0       0             0          0    0      decision .push();
         4,135       1    1              0             0       0         1,654         89    0      trail    .capacity(v+1);
             .       .    .              .             .       .             .          .    .      setDecisionVar(v, dvar);
             .       .    .              .             .       .             .          .    .  
            14       0    0              0             0       0             0          0    0      activity_distance.push(0);
            14       1    1              0             0       0             0          0    0      var_iLevel.push(0);
            14       0    0              0             0       0             0          0    0      var_iLevel_tmp.push(0);
            14       0    0              0             0       0             0          0    0      pathCs.push(0);
             .       .    .              .             .       .             .          .    .      return v;
         7,443       0    0          5,789             7       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  bool Solver::addClause_(vec<Lit>& ps)
       145,488       2    1              0             0       0       124,704          0    0  {
             .       .    .              .             .       .             .          .    .      assert(decisionLevel() == 0);
        62,352       1    1         20,784             0       0             0          0    0      if (!ok) return false;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // Check if clause is satisfied and remove false/duplicate literals:
             .       .    .              .             .       .             .          .    .      sort(ps);
             .       .    .              .             .       .             .          .    .      Lit p; int i, j;
             .       .    .              .             .       .             .          .    .  
        41,568       0    0         20,784            21       0             0          0    0      if (drup_file){
             .       .    .              .             .       .             .          .    .          add_oc.clear();
        20,784       2    1         20,784             0       0             0          0    0          for (int i = 0; i < ps.size(); i++) add_oc.push(ps[i]); }
             .       .    .              .             .       .             .          .    .  
       469,524       0    0              0             0       0             0          0    0      for (i = j = 0, p = lit_Undef; i < ps.size(); i++)
       796,966       0    0        142,794             0       0             0          0    0          if (value(ps[i]) == l_True || ps[i] == ~p)
             .       .    .              .             .       .             .          .    .              return true;
       570,588       4    2              0             0       0             0          0    0          else if (value(ps[i]) != l_False && ps[i] != p)
       426,933       0    0        142,311             0       0       142,311          0    0              ps[j++] = p = ps[i];
       165,136       0    0         20,642             0       0             0          0    0      ps.shrink(i - j);
             .       .    .              .             .       .             .          .    .  
        41,284       2    1              0             0       0             0          0    0      if (drup_file && i != j){
             .       .    .              .             .       .             .          .    .  #ifdef BIN_DRUP
             .       .    .              .             .       .             .          .    .          binDRUP('a', ps, drup_file);
        20,642       0    0         20,642             0       0             0          0    0          binDRUP('d', add_oc, drup_file);
             .       .    .              .             .       .             .          .    .  #else
             .       .    .              .             .       .             .          .    .          for (int i = 0; i < ps.size(); i++)
             .       .    .              .             .       .             .          .    .              fprintf(drup_file, "%i ", (var(ps[i]) + 1) * (-2 * sign(ps[i]) + 1));
             .       .    .              .             .       .             .          .    .          fprintf(drup_file, "0\n");
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .          fprintf(drup_file, "d ");
             .       .    .              .             .       .             .          .    .          for (int i = 0; i < add_oc.size(); i++)
             .       .    .              .             .       .             .          .    .              fprintf(drup_file, "%i ", (var(add_oc[i]) + 1) * (-2 * sign(add_oc[i]) + 1));
             .       .    .              .             .       .             .          .    .          fprintf(drup_file, "0\n");
             .       .    .              .             .       .             .          .    .  #endif
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .      
        41,284       0    0              0             0       0             0          0    0      if (ps.size() == 0)
             .       .    .              .             .       .             .          .    .          return ok = false;
        41,284       2    1              0             0       0             0          0    0      else if (ps.size() == 1){
            24       0    0              8             0       0             4          0    0          uncheckedEnqueue(ps[0]);
            16       0    0              0             0       0             4          1    0          return ok = (propagate() == CRef_Undef);
             .       .    .              .             .       .             .          .    .      }else{
        20,638       0    0              0             0       0        20,638          0    0          CRef cr = ca.alloc(ps, false);
             .       .    .              .             .       .             .          .    .          //auto ca_size=ca.size();
             .       .    .              .             .       .             .          .    .          //printf("ca size:%d\n",ca_size);
        61,914       0    0              0             0       0        20,638          0    0          clauses.push(cr);
        61,914       2    1         20,638             0       0        20,638          0    0          attachClause(cr);
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
        20,638       0    0              0             0       0             0          0    0      return true;
       228,624       0    0        145,488             6       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
    14,347,120       8    3              0             0       0     8,608,272          0    0  void Solver::attachClause(CRef cr) {
             .       .    .              .             .       .             .          .    .      const Clause& c = ca[cr];
             .       .    .              .             .       .             .          .    .      assert(c.size() > 1);
     5,738,313       0    0      1,434,712           193       0             0          0    0      OccLists<Lit, vec<Watcher>, WatcherDeleted>& ws = c.size() == 2 ? watches_bin : watches;
             .       .    .              .             .       .             .          .    .      ws[~c[0]].push(Watcher(cr, c[1]));
             .       .    .              .             .       .             .          .    .      ws[~c[1]].push(Watcher(cr, c[0]));
     4,282,888       0    0      2,848,176       303,132       0             0          0    0      if (c.learnt()) learnts_literals += c.size();
    11,498,944       2    0     10,064,232            10       0             0          0    0      else            clauses_literals += c.size(); }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
     7,785,870     114   14              0             0       0     5,190,580        158    0  void Solver::detachClause(CRef cr, bool strict) {
             .       .    .              .             .       .             .          .    .      const Clause& c = ca[cr];
             .       .    .              .             .       .             .          .    .      assert(c.size() > 1);
     5,190,580       0    0              0             0       0             0          0    0      OccLists<Lit, vec<Watcher>, WatcherDeleted>& ws = c.size() == 2 ? watches_bin : watches;
             .       .    .              .             .       .             .          .    .      
     5,190,580       0    0              0             0       0             0          0    0      if (strict){
             .       .    .              .             .       .             .          .    .          remove(ws[~c[0]], Watcher(cr, c[1]));
             .       .    .              .             .       .             .          .    .          remove(ws[~c[1]], Watcher(cr, c[0]));
             .       .    .              .             .       .             .          .    .      }else{
             .       .    .              .             .       .             .          .    .          // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
             .       .    .              .             .       .             .          .    .          ws.smudge(~c[0]);
             .       .    .              .             .       .             .          .    .          ws.smudge(~c[1]);
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
     3,890,103      11    0      2,592,458         6,982       0             0          0    0      if (c.learnt()) learnts_literals -= c.size();
     7,788,702       0    0      6,491,057         5,284       0             0          0    0      else            clauses_literals -= c.size(); }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
     8,227,464     205   23              0             0       0     4,113,732        137    0  void Solver::removeClause(CRef cr) {
             .       .    .              .             .       .             .          .    .      Clause& c = ca[cr];
             .       .    .              .             .       .             .          .    .  
     3,085,299       0    0      1,028,433           213       0             0          0    0      if (drup_file){
             .       .    .              .             .       .             .          .    .          if (c.mark() != 1){
             .       .    .              .             .       .             .          .    .  #ifdef BIN_DRUP
             .       .    .              .             .       .             .          .    .              binDRUP('d', c, drup_file);
             .       .    .              .             .       .             .          .    .  #else
             .       .    .              .             .       .             .          .    .              fprintf(drup_file, "d ");
             .       .    .              .             .       .             .          .    .              for (int i = 0; i < c.size(); i++)
             .       .    .              .             .       .             .          .    .                  fprintf(drup_file, "%i ", (var(c[i]) + 1) * (-2 * sign(c[i]) + 1));
             .       .    .              .             .       .             .          .    .              fprintf(drup_file, "0\n");
             .       .    .              .             .       .             .          .    .  #endif
             .       .    .              .             .       .             .          .    .          }else
             .       .    .              .             .       .             .          .    .              printf("c Bug. I don't expect this to happen.\n");
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
     4,113,732      89   12              0             0       0     1,028,433          0    0      detachClause(cr);
             .       .    .              .             .       .             .          .    .      // Don't leave pointers to free'd memory!
             .       .    .              .             .       .             .          .    .      if (locked(c)){
            70       0    0             16             0       0             0          0    0          Lit implied = c.size() != 2 ? c[0] : (value(c[0]) == l_True ? c[0] : c[1]);
            38       0    0              0             0       0            19          0    0          vardata[var(implied)].reason = CRef_Undef; }
             .       .    .              .             .       .             .          .    .      c.mark(1);
             .       .    .              .             .       .             .          .    .      ca.free(cr);
     6,170,598       0    0      5,142,165             0       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  bool Solver::satisfied(const Clause& c) const {
    14,716,978      24    8              0             0       0             0          0    0      for (int i = 0; i < c.size(); i++)
    15,730,994       0    0      6,854,233         1,318       0             0          0    0          if (value(c[i]) == l_True)
           508       1    1              0             0       0             0          0    0              return true;
        40,748       0    0         20,628             0       0             0          0    0      return false; }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  // Revert to the state at given level (keeping all assignment at 'level' but not beyond).
             .       .    .              .             .       .             .          .    .  //
    10,344,024   2,159    7              0             0       0     6,896,016          0    0  void Solver::cancelUntil(int bLevel) {
             .       .    .              .             .       .             .          .    .  	
     4,603,877       5    2          3,268             0       0     1,149,336          0    0      if (decisionLevel() > bLevel){
             .       .    .              .             .       .             .          .    .  #ifdef PRINT_OUT
             .       .    .              .             .       .             .          .    .  		std::cout << "bt " << bLevel << "\n";
             .       .    .              .             .       .             .          .    .  #endif				
     2,298,672       0    0              0             0       0     1,149,336          0    0  		add_tmp.clear();
   742,638,169   5,881    4    151,056,173     1,159,607       0             0          0    0          for (int c = trail.size()-1; c >= trail_lim[bLevel]; c--)
             .       .    .              .             .       .             .          .    .          {
             .       .    .              .             .       .             .          .    .              Var      x  = var(trail[c]);
             .       .    .              .             .       .             .          .    .  
   290,618,986       0    0    145,309,493    20,734,064       0             0          0    0  			if (level(x) <= bLevel)
             .       .    .              .             .       .             .          .    .  			{
             .       .    .              .             .       .             .          .    .  				add_tmp.push(trail[c]);
             .       .    .              .             .       .             .          .    .  			}
             .       .    .              .             .       .             .          .    .  			else
             .       .    .              .             .       .             .          .    .  			{
   290,617,412       0    0    145,308,706            10       0             0          0    0  				 if (!VSIDS){
   238,597,431       0    0    159,064,954         2,869       0             0          0    0  					uint32_t age = conflicts - picked[x];
   159,064,954       0    0     79,532,477    12,964,768       0             0          0    0  					if (age > 0){
   794,925,250     116    5    317,970,100    20,100,653       0             0          0    0  						double adjusted_reward = ((double) (conflicted[x] + almost_conflicted[x])) / ((double) age);
    79,492,525       0    0     79,492,525    11,663,750       0             0          0    0  						double old_activity = activity_CHB[x];
   556,447,675      21    5    158,985,050       333,718       0    79,492,525          0    0  						activity_CHB[x] = step_size * adjusted_reward + ((1 - step_size) * old_activity);
             .       .    .              .             .       .             .          .    .  						if (order_heap_CHB.inHeap(x)){
   458,377,458      49    3              0             0       0   229,188,729          0    0  							if (activity_CHB[x] > old_activity)
             .       .    .              .             .       .             .          .    .  								order_heap_CHB.decrease(x);
             .       .    .              .             .       .             .          .    .  							else
             .       .    .              .             .       .             .          .    .  								order_heap_CHB.increase(x);
             .       .    .              .             .       .             .          .    .  						}
             .       .    .              .             .       .             .          .    .  					}
             .       .    .              .             .       .             .          .    .  #ifdef ANTI_EXPLORATION
   159,064,954       0    0     79,532,477             0       0    79,532,477 13,324,754    0  					canceled[x] = conflicts;
             .       .    .              .             .       .             .          .    .  #endif
             .       .    .              .             .       .             .          .    .  				}
             .       .    .              .             .       .             .          .    .  				
   290,617,412     177   22    145,308,706             0       0   145,308,706  3,445,075    0  				assigns [x] = l_Undef;
             .       .    .              .             .       .             .          .    .  #ifdef PRINT_OUT
             .       .    .              .             .       .             .          .    .  				std::cout << "undo " << x << "\n";
             .       .    .              .             .       .             .          .    .  #endif				
   290,617,412       0    0    145,308,706             0       0             0          0    0  	            if (phase_saving > 1 || (phase_saving == 1) && c > trail_lim.last())
   145,308,706       0    0    145,308,706             0       0             0          0    0  					polarity[x] = sign(trail[c]);
             .       .    .              .             .       .             .          .    .  				insertVarOrder(x);
             .       .    .              .             .       .             .          .    .  			}
             .       .    .              .             .       .             .          .    .          }
     1,149,336       0    0              0             0       0     1,149,336          0    0          qhead = trail_lim[bLevel];
     2,298,672       0    0              0             0       0             0          0    0          trail.shrink(trail.size() - trail_lim[bLevel]);
     3,448,008       0    0      1,149,336             0       0             0          0    0          trail_lim.shrink(trail_lim.size() - bLevel);
     3,449,582       1    1      1,149,336             0       0             0          0    0          for (int nLitId = add_tmp.size() - 1; nLitId >= 0; --nLitId)
             .       .    .              .             .       .             .          .    .  		{
           363       0    0            121             0       0             0          0    0  			trail.push_(add_tmp[nLitId]);
             .       .    .              .             .       .             .          .    .  		}
             .       .    .              .             .       .             .          .    .  		
             .       .    .              .             .       .             .          .    .  		add_tmp.clear();
     9,194,688       0    0      8,045,352        88,701       0             0          0    0      } }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  //=================================================================================================
             .       .    .              .             .       .             .          .    .  // Major methods:
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  Lit Solver::pickBranchLit()
    12,585,112      77    6              0             0       0     9,438,834        137    0  {
             .       .    .              .             .       .             .          .    .      Var next = var_Undef;
             .       .    .              .             .       .             .          .    .      //    Heap<VarOrderLt>& order_heap = VSIDS ? order_heap_VSIDS : order_heap_CHB;
     9,800,603     158   11      2,860,115     1,037,793       0             0          0    0      Heap<VarOrderLt>& order_heap = DISTANCE ? order_heap_distance : ((!VSIDS)? order_heap_CHB:order_heap_VSIDS);
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // Random decision:
             .       .    .              .             .       .             .          .    .      /*if (drand(random_seed) < random_var_freq && !order_heap.empty()){
             .       .    .              .             .       .             .          .    .          next = order_heap[irand(random_seed,order_heap.size())];
             .       .    .              .             .       .             .          .    .          if (value(next) == l_Undef && decision[next])
             .       .    .              .             .       .             .          .    .              rnd_decisions++; }*/
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // Activity based decision:
    34,451,719     129    1     15,652,720     1,320,030      14             0          0    0      while (next == var_Undef || value(next) != l_Undef || !decision[next])
    10,933,308       0    0              0             0       0             0          0    0          if (order_heap.empty())
             1       0    0              0             0       0             0          0    0              return lit_Undef;
             .       .    .              .             .       .             .          .    .          else{
             .       .    .              .             .       .             .          .    .  #ifdef ANTI_EXPLORATION
    10,933,306       0    0      5,466,653             8       0             0          0    0              if (!VSIDS){
             .       .    .              .             .       .             .          .    .                  Var v = order_heap_CHB[0];
     6,573,328       0    0      6,573,328        86,569       0             0          0    0                  uint32_t age = conflicts - canceled[v];
    12,127,466       0    0      5,272,873     1,704,182      53       790,860          0    0                  while (age > 0){
             .       .    .              .             .       .             .          .    .                      double decay = pow(0.95, age);
     3,972,418       0    0      1,986,209        38,545       1     1,986,209          0    0                      activity_CHB[v] *= decay;
             .       .    .              .             .       .             .          .    .                      if (order_heap_CHB.inHeap(v))
             .       .    .              .             .       .             .          .    .                          order_heap_CHB.increase(v);
     5,958,627       0    0      3,972,418             0       0     1,986,209          0    0                      canceled[v] = conflicts;
             .       .    .              .             .       .             .          .    .                      v = order_heap_CHB[0];
             .       .    .              .             .       .             .          .    .                      age = conflicts - canceled[v];
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .  #endif
             .       .    .              .             .       .             .          .    .              next = order_heap.removeMin();
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .  
     6,292,552       0    0      3,146,276     1,167,042       4             0          0    0      return mkLit(next, polarity[next]);
    14,158,250       0    0     11,011,973             0       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  inline Solver::ConflictData Solver::FindConflictLevel(CRef cind)
             .       .    .              .             .       .             .          .    .  {
             .       .    .              .             .       .             .          .    .  	ConflictData data;
             .       .    .              .             .       .             .          .    .  	Clause& conflCls = ca[cind];
             .       .    .              .             .       .             .          .    .  	data.nHighestLevel = level(var(conflCls[0]));
     4,584,244       0    0      2,292,122        42,430       0             0          0    0  	if (data.nHighestLevel == decisionLevel() && level(var(conflCls[1])) == decisionLevel())
             .       .    .              .             .       .             .          .    .  	{
             .       .    .              .             .       .             .          .    .  		return data;
             .       .    .              .             .       .             .          .    .  	}
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  	int highestId = 0;
             .       .    .              .             .       .             .          .    .      data.bOnlyOneLitFromHighest = true;
             .       .    .              .             .       .             .          .    .  	// find the largest decision level in the clause
           332       1    1              0             0       0             0          0    0  	for (int nLitId = 1; nLitId < conflCls.size(); ++nLitId)
             .       .    .              .             .       .             .          .    .  	{
             .       .    .              .             .       .             .          .    .  		int nLevel = level(var(conflCls[nLitId]));
           175       0    0              0             0       0             0          0    0  		if (nLevel > data.nHighestLevel)
             .       .    .              .             .       .             .          .    .  		{
             .       .    .              .             .       .             .          .    .  			highestId = nLitId;
             .       .    .              .             .       .             .          .    .  			data.nHighestLevel = nLevel;
             1       0    0              0             0       0             0          0    0  			data.bOnlyOneLitFromHighest = true;
             .       .    .              .             .       .             .          .    .  		}
             .       .    .              .             .       .             .          .    .  		else if (nLevel == data.nHighestLevel && data.bOnlyOneLitFromHighest == true)
             .       .    .              .             .       .             .          .    .  		{
           170       0    0              0             0       0             0          0    0  			data.bOnlyOneLitFromHighest = false;
             .       .    .              .             .       .             .          .    .  		}
             .       .    .              .             .       .             .          .    .  	}
             .       .    .              .             .       .             .          .    .  
            40       9    1              0             0       0             0          0    0  	if (highestId != 0)
             .       .    .              .             .       .             .          .    .  	{
             .       .    .              .             .       .             .          .    .  		std::swap(conflCls[0], conflCls[highestId]);
             2       0    0              0             0       0             0          0    0  		if (highestId > 1)
             .       .    .              .             .       .             .          .    .  		{
             .       .    .              .             .       .             .          .    .  			OccLists<Lit, vec<Watcher>, WatcherDeleted>& ws = conflCls.size() == 2 ? watches_bin : watches;
             .       .    .              .             .       .             .          .    .  			//ws.smudge(~conflCls[highestId]);
             .       .    .              .             .       .             .          .    .  			remove(ws[~conflCls[highestId]], Watcher(cind, conflCls[1]));
             .       .    .              .             .       .             .          .    .  			ws[~conflCls[0]].push(Watcher(cind, conflCls[1]));
             .       .    .              .             .       .             .          .    .  		}
             .       .    .              .             .       .             .          .    .  	}
             .       .    .              .             .       .             .          .    .  
-- line 1216 ----------------------------------------
-- line 1231 ----------------------------------------
             .       .    .              .             .       .             .          .    .  |  
             .       .    .              .             .       .             .          .    .  |    Post-conditions:
             .       .    .              .             .       .             .          .    .  |      * 'out_learnt[0]' is the asserting literal at level 'out_btlevel'.
             .       .    .              .             .       .             .          .    .  |      * If out_learnt.size() > 1 then 'out_learnt[1]' has the greatest decision level of the 
             .       .    .              .             .       .             .          .    .  |        rest of literals. There may be others from the same level though.
             .       .    .              .             .       .             .          .    .  |  
             .       .    .              .             .       .             .          .    .  |________________________________________________________________________________________________@*/
             .       .    .              .             .       .             .          .    .  void Solver::analyze(CRef confl, vec<Lit>& out_learnt, int& out_btlevel, int& out_lbd)
    14,898,884      51   17              0             0       0    10,314,612          0    0  {
     1,146,068       0    0              0             0       0     1,146,068          0    0      int pathC = 0;
     1,146,068       0    0              0             0       0             0          0    0      Lit p     = lit_Undef;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // Generate conflict clause:
             .       .    .              .             .       .             .          .    .      //
             .       .    .              .             .       .             .          .    .      out_learnt.push();      // (leave room for the asserting literal)
     2,292,136       0    0      1,146,068             1       0             0          0    0      int index   = trail.size() - 1;
     1,146,068       0    0      1,146,068             1       0             0          0    0      int nDecisionLevel = level(var(ca[confl][0]));
             .       .    .              .             .       .             .          .    .      assert(nDecisionLevel == level(var(ca[confl][0])));
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      do{
             .       .    .              .             .       .             .          .    .          assert(confl != CRef_Undef); // (otherwise should be UIP)
             .       .    .              .             .       .             .          .    .          Clause& c = ca[confl];
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .          // For binary clauses, we don't rearrange literals in propagate(), so check and make sure the first is an implied lit.
   208,832,398       0    0              0             0       0             0          0    0          if (p != lit_Undef && c.size() == 2 && value(c[0]) == l_False){
             .       .    .              .             .       .             .          .    .              assert(value(c[1]) == l_True);
             .       .    .              .             .       .             .          .    .              Lit tmp = c[0];
       649,497       0    0        216,499        13,301       2       432,998          0    0              c[0] = c[1], c[1] = tmp; }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .          // Update LBD if improved.
   161,321,287       1    1      4,549,736             0       0             0          0    0          if (c.learnt() && c.mark() != CORE){
             .       .    .              .             .       .             .          .    .              int lbd = computeLBD(c);
     7,307,016       0    0              0             0       0             0          0    0              if (lbd < c.lbd()){
       752,190       0    0              0             0       0             0          0    0                  if (c.lbd() <= 30) c.removable(false); // Protect once from reduction.
             .       .    .              .             .       .             .          .    .                  c.set_lbd(lbd);
       752,190       0    0        376,095       227,630       0             0          0    0                  if (lbd <= core_lbd_cut){
            16       4    0              0             0       0             8          0    0                      learnts_core.push(confl);
             .       .    .              .             .       .             .          .    .                      c.mark(CORE);
     1,081,801       0    0        167,524             0       0             0          0    0                  }else if (lbd <= 6 && c.mark() == LOCAL){
             .       .    .              .             .       .             .          .    .                      // Bug: 'cr' may already be in 'learnts_tier2', e.g., if 'cr' was demoted from TIER2
             .       .    .              .             .       .             .          .    .                      // to LOCAL previously and if that 'cr' is not cleaned from 'learnts_tier2' yet.
     8,294,480       9    5              0             0       0     2,428,138  1,084,781    0                      learnts_tier2.push(confl);
             .       .    .              .             .       .             .          .    .                      c.mark(TIER2); }
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .  
     7,066,054       0    0      3,533,027             0       0             0          0    0              if (c.mark() == TIER2)
     6,930,604      27   11      1,732,651        10,496       0     1,732,651    204,726   43                  c.touched() = conflicts;
     3,736,754       0    0      1,868,377             0       0             0          0    0              else if (c.mark() == LOCAL)
             .       .    .              .             .       .             .          .    .                  claBumpActivity(c);
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .  
 1,056,953,690      11    4    309,939,351             4       0    51,233,922         24    0          for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
   258,705,429       0    0    258,705,429    16,429,421       8             0          0    0              Lit q = c[j];
             .       .    .              .             .       .             .          .    .  
   805,351,764       1    1    354,685,731    21,516,637       6             0          0    0              if (!seen[var(q)] && level(var(q)) > 0){
   191,956,788       0    0     95,978,394           331       0             0          0    0                  if (VSIDS){
             .       .    .              .             .       .             .          .    .                      varBumpActivity(var(q), .5);
            22       1    1              0             0       0            11          0    0                      add_tmp.push(q);
             .       .    .              .             .       .             .          .    .                  }else
    55,670,089       0    0     55,670,089     7,934,062       0             0          0    0                      conflicted[var(q)]++;
    95,978,394       0    0              0             0       0    95,978,394          0    0                  seen[var(q)] = 1;
   191,956,788       0    0     95,978,394             0       0             0          0    0                  if (level(var(q)) >= nDecisionLevel){
   102,467,844       0    0    102,467,844             0       0             0          0    0                      pathC++;
             .       .    .              .             .       .             .          .    .                  }else
             .       .    .              .             .       .             .          .    .                      out_learnt.push(q);
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .          
             .       .    .              .             .       .             .          .    .          // Select next clause to look at:
             .       .    .              .             .       .             .          .    .  		do {
   805,477,479       0    0    332,437,776    12,939,273       7             0          0    0  			while (!seen[var(trail[index--])]);
             .       .    .              .             .       .             .          .    .  			p  = trail[index+1];
   102,467,942       0    0     51,233,971        40,435       0             0          0    0  		} while (level(var(p)) < nDecisionLevel);
             .       .    .              .             .       .             .          .    .  		
   102,467,844       0    0     51,233,922             0       0    51,233,922         19    0          confl = reason(var(p));
    51,233,922       0    0              0             0       0    51,233,922          0    0          seen[var(p)] = 0;
   102,467,844       0    0    102,467,844             0       0             0          0    0          pathC--;
             .       .    .              .             .       .             .          .    .  
   302,819,260       0    0    100,175,708            28       0             0          0    0      }while (pathC > 0);
     1,146,068       0    0      1,146,068            22       0             0          0    0      out_learnt[0] = ~p;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // Simplify conflict clause:
             .       .    .              .             .       .             .          .    .      //
             .       .    .              .             .       .             .          .    .      int i, j;
     2,292,136       0    0              0             0       0     1,146,068          0    0      out_learnt.copyTo(analyze_toclear);
     3,438,204       0    0      1,146,068             1       0             0          0    0      if (ccmin_mode == 2){
     1,146,056     330    3              0             0       0             0          0    0          uint32_t abstract_level = 0;
    91,781,080     273    2              0             0       0             0          0    0          for (i = 1; i < out_learnt.size(); i++)
    47,036,584       0    0      1,146,056             0       0             0          0    0              abstract_level |= abstractLevel(var(out_learnt[i])); // (maintain an abstraction of levels involved in conflict)
             .       .    .              .             .       .             .          .    .  
   324,671,864      16    3    133,087,360           189       0     1,146,056          0    0          for (i = j = 1; i < out_learnt.size(); i++)
   302,474,418      19    7     62,936,834        13,089       0    35,320,150          0    0              if (reason(var(out_learnt[i])) == CRef_Undef || !litRedundant(out_learnt[i], abstract_level))
    82,850,052       8    1     27,616,684            11       0    27,616,684        226    0                  out_learnt[j++] = out_learnt[i];
             .       .    .              .             .       .             .          .    .          
             .       .    .              .             .       .             .          .    .      }else if (ccmin_mode == 1){
             .       .    .              .             .       .             .          .    .          for (i = j = 1; i < out_learnt.size(); i++){
             .       .    .              .             .       .             .          .    .              Var x = var(out_learnt[i]);
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .              if (reason(x) == CRef_Undef)
             .       .    .              .             .       .             .          .    .                  out_learnt[j++] = out_learnt[i];
             .       .    .              .             .       .             .          .    .              else{
-- line 1331 ----------------------------------------
-- line 1334 ----------------------------------------
             .       .    .              .             .       .             .          .    .                      if (!seen[var(c[k])] && level(var(c[k])) > 0){
             .       .    .              .             .       .             .          .    .                          out_learnt[j++] = out_learnt[i];
             .       .    .              .             .       .             .          .    .                          break; }
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .      }else
             .       .    .              .             .       .             .          .    .          i = j = out_learnt.size();
             .       .    .              .             .       .             .          .    .  
     2,292,136       0    0      1,146,068     1,103,165       2             0          0    0      max_literals += out_learnt.size();
    31,374,504       2    1      7,557,109             0       0             0          0    0      out_learnt.shrink(i - j);
     1,146,068      56    2      1,146,068             0       0             0          0    0      tot_literals += out_learnt.size();
             .       .    .              .             .       .             .          .    .  
     2,292,136       0    0      1,146,068         3,679       0     1,146,068          0    0      out_lbd = computeLBD(out_learnt);
    13,157,536   6,302   20      5,892,854             0       0             0          0    0      if (out_lbd <= 6 && out_learnt.size() <= 30) // Try further minimization?
     1,137,934   2,760    1        162,562             0       0       325,124          0    0          if (binResMinimize(out_learnt))
         5,943       0    0          1,981             0       0         1,981          0    0              out_lbd = computeLBD(out_learnt); // Recompute LBD if minimized.
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // Find correct backtrack level:
             .       .    .              .             .       .             .          .    .      //
     2,228,938       0    0              0             0       0             0          0    0      if (out_learnt.size() == 1)
            36       0    0             12             0       0            12          0    0          out_btlevel = 0;
             .       .    .              .             .       .             .          .    .      else{
     2,291,982       0    0              0             0       0             0          0    0          int max_i = 1;
             .       .    .              .             .       .             .          .    .          // Find the first literal assigned at the next-highest level:
   108,665,714       0    0              0             0       0             0          0    0          for (int i = 2; i < out_learnt.size(); i++)
    86,575,875       0    0     26,468,545             0       0             0          0    0              if (level(var(out_learnt[i])) > level(var(out_learnt[max_i])))
             .       .    .              .             .       .             .          .    .                  max_i = i;
             .       .    .              .             .       .             .          .    .          // Swap-in this literal at index 1:
             .       .    .              .             .       .             .          .    .          Lit p             = out_learnt[max_i];
     2,292,112       0    0      1,146,056             0       0     1,146,056          0    0          out_learnt[max_i] = out_learnt[1];
     1,146,056       0    0              0             0       0     1,146,056          0    0          out_learnt[1]     = p;
     2,292,112       0    0      1,146,056             0       0     1,146,056          0    0          out_btlevel       = level(var(p));
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
     2,292,136     594   10      1,146,068         7,114       0             0          0    0      if (VSIDS){
   140,189,364   7,105   18     41,900,657        56,052       0             0          0    0          for (int i = 0; i < add_tmp.size(); i++){
             .       .    .              .             .       .             .          .    .              Var v = var(add_tmp[i]);
   120,924,915       0    0     40,308,305       636,748       0             0          0    0              if (level(v) >= out_btlevel - 1)
             .       .    .              .             .       .             .          .    .                  varBumpActivity(v, 1);
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .          add_tmp.clear();
             .       .    .              .             .       .             .          .    .      }else{
     1,230,568       0    0        615,284             0       0       615,284         74    0          seen[var(p)] = true;
    51,655,525       0    0        615,284             0       0             0          0    0          for(int i = out_learnt.size() - 1; i >= 0; i--){
             .       .    .              .             .       .             .          .    .              Var v = var(out_learnt[i]);
             .       .    .              .             .       .             .          .    .              CRef rea = reason(v);
    29,924,934       0    0              0             0       0             0          0    0              if (rea != CRef_Undef){
             .       .    .              .             .       .             .          .    .                  const Clause& reaC = ca[rea];
   166,009,324       0    0              0             0       0             0          0    0                  for (int i = 0; i < reaC.size(); i++){
             .       .    .              .             .       .             .          .    .                      Lit l = reaC[i];
   134,209,948       0    0     67,104,974       181,488       0             0          0    0                      if (!seen[var(l)]){
    14,839,886       0    0              0             0       0    14,839,886          0    0                          seen[var(l)] = true;
    14,839,886       0    0     14,839,886     5,220,460       0             0          0    0                          almost_conflicted[var(l)]++;
             .       .    .              .             .       .             .          .    .                          analyze_toclear.push(l); } } } } }
             .       .    .              .             .       .             .          .    .  
   281,900,304   1,415    0    139,231,050             0       0    69,042,491     43,282    0      for (int j = 0; j < analyze_toclear.size(); j++) seen[var(analyze_toclear[j])] = 0;    // ('seen[]' is now cleared)
     9,168,544       0    0      8,022,476        95,025       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  // Try further learnt clause minimization by means of binary clause resolution.
             .       .    .              .             .       .             .          .    .  bool Solver::binResMinimize(vec<Lit>& out_learnt)
       238,050       0    0              0             0       0       190,440         65    0  {
             .       .    .              .             .       .             .          .    .      // Preparation: remember which false variables we have in 'out_learnt'.
       487,686      20   12        162,562             0       0       162,562          0    0      counter++;
     5,893,696       0    0        325,124             0       0             0          0    0      for (int i = 1; i < out_learnt.size(); i++)
     2,459,296       0    0        162,550             0       0     2,296,746  1,097,876  347          seen2[var(out_learnt[i])] = counter;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // Get the list of binary clauses containing 'out_learnt[0]'.
             .       .    .              .             .       .             .          .    .      const vec<Watcher>& ws = watches_bin[~out_learnt[0]];
             .       .    .              .             .       .             .          .    .  
        47,610       0    0              0             0       0             0          0    0      int to_remove = 0;
       832,036       5    4        162,562       120,198       0         1,981          0    0      for (int i = 0; i < ws.size(); i++){
       159,916       0    0        159,916        46,002       0             0          0    0          Lit the_other = ws[i].blocker;
             .       .    .              .             .       .             .          .    .          // Does 'the_other' appear negatively in 'out_learnt'?
       643,830       8    4        276,388        50,227      29             0          0    0          if (seen2[var(the_other)] == counter && value(the_other) == l_True){
         2,083       0    0              0             0       0             0          0    0              to_remove++;
         6,249       0    0              0             0       0         2,083          0    0              seen2[var(the_other)] = counter - 1; // Remember to remove this variable.
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // Shrink.
       142,830      11    4              0             0       0             0          0    0      if (to_remove > 0){
         1,981       0    0              0             0       0             0          0    0          int last = out_learnt.size() - 1;
       230,746      45   11          1,981             0       0             0          0    0          for (int i = 1; i < out_learnt.size() - to_remove; i++)
        64,190       0    0         32,095             0       0             0          0    0              if (seen2[var(out_learnt[i])] != counter)
         9,675       0    0          3,870             0       0         1,935          0    0                  out_learnt[i--] = out_learnt[last--];
             .       .    .              .             .       .             .          .    .          out_learnt.shrink(to_remove);
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .      return to_remove != 0;
       353,002       0    0        353,002             0       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  // Check if 'p' can be removed. 'abstract_levels' is used to abort early if the algorithm is
             .       .    .              .             .       .             .          .    .  // visiting literals at levels that cannot be removed later.
             .       .    .              .             .       .             .          .    .  bool Solver::litRedundant(Lit p, uint32_t abstract_levels)
   353,201,500   3,913    2              0             0       0   211,920,900    691,749    0  {
    70,640,300       0    0              0             0       0    35,320,150          0    0      analyze_stack.clear(); analyze_stack.push(p);
   105,960,450       0    0     70,640,300             0       0    35,320,150          0    0      int top = analyze_toclear.size();
   175,823,722       0    0              0             0       0             0          0    0      while (analyze_stack.size() > 0){
             .       .    .              .             .       .             .          .    .          assert(reason(var(analyze_stack.last())) != CRef_Undef);
             .       .    .              .             .       .             .          .    .          Clause& c = ca[reason(var(analyze_stack.last()))]; analyze_stack.pop();
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .          // Special handling for binary clauses like in 'analyze()'.
   165,679,818      37   14              0             0       0             0          0    0          if (c.size() == 2 && value(c[0]) == l_False){
             .       .    .              .             .       .             .          .    .              assert(value(c[1]) == l_True);
             .       .    .              .             .       .             .          .    .              Lit tmp = c[0];
       345,519       0    0        115,173         7,308       1       230,346          0    0              c[0] = c[1], c[1] = tmp; }
             .       .    .              .             .       .             .          .    .  
   560,333,082       0    0              0             0       0             0          0    0          for (int i = 1; i < c.size(); i++){
   239,630,666      66   14    239,630,666    17,897,060      34             0          0    0              Lit p  = c[i];
   901,662,068       0    0    479,261,332     1,246,604       2             0          0    0              if (!seen[var(p)] && level(var(p)) > 0){
   337,477,738       0    0     91,383,902             0       0             0          0    0                  if (reason(var(p)) != CRef_Undef && (abstractLevel(var(p)) & abstract_levels) != 0){
    73,191,540       0    0              0             0       0    73,191,540          0    0                      seen[var(p)] = 1;
             .       .    .              .             .       .             .          .    .                      analyze_stack.push(p);
             5       0    0              0             0       0             0          0    0                      analyze_toclear.push(p);
             .       .    .              .             .       .             .          .    .                  }else{
   323,136,598   1,125    6    101,264,199             7       0             0          0    0                      for (int j = top; j < analyze_toclear.size(); j++)
   116,941,865       0    0     52,062,390             0       0    64,879,475         20    0                          seen[var(analyze_toclear[j])] = 0;
    36,384,724      20    3     18,192,362             0       0             0          0    0                      analyze_toclear.shrink(analyze_toclear.size() - top);
    18,192,362       0    0              0             0       0             0          0    0                      return false;
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
    34,255,576       0    0              0             0       0             0          0    0      return true;
   282,561,200       6    0    247,241,050           339       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  /*_________________________________________________________________________________________________
             .       .    .              .             .       .             .          .    .  |
             .       .    .              .             .       .             .          .    .  |  analyzeFinal : (p : Lit)  ->  [void]
             .       .    .              .             .       .             .          .    .  |  
             .       .    .              .             .       .             .          .    .  |  Description:
             .       .    .              .             .       .             .          .    .  |    Specialized analysis procedure to express the final conflict in terms of assumptions.
-- line 1468 ----------------------------------------
-- line 1495 ----------------------------------------
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      seen[var(p)] = 0;
             .       .    .              .             .       .             .          .    .  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  void Solver::uncheckedEnqueue(Lit p, int level, CRef from)
 1,453,087,510       4    2              0             0       0   726,543,755          0    0  {
             .       .    .              .             .       .             .          .    .      assert(value(p) == l_Undef);
             .       .    .              .             .       .             .          .    .      Var x = var(p);
   290,617,502       0    0    145,308,751     3,443,458       0             0          0    0      if (!VSIDS){
   238,597,542       0    0    159,065,028     3,042,538       0    79,532,514 40,074,492   52          picked[x] = conflicts;
   159,065,028       0    0     79,532,514             0       0    79,532,514 40,452,811   53          conflicted[x] = 0;
   159,065,028       1    1     79,532,514             0       0    79,532,514 40,343,353   53          almost_conflicted[x] = 0;
             .       .    .              .             .       .             .          .    .  #ifdef ANTI_EXPLORATION
    79,532,514       0    0     79,532,514             0       0             0          0    0          uint32_t age = conflicts - canceled[var(p)];
   159,065,028       0    0     79,532,514    39,311,781       0             0          0    0          if (age > 0){
             .       .    .              .             .       .             .          .    .              double decay = pow(0.95, age);
    64,711,060       0    0     32,355,530    19,755,952       0    32,355,530          0    0              activity_CHB[var(p)] *= decay;
             .       .    .              .             .       .             .          .    .              if (order_heap_CHB.inHeap(var(p)))
    32,355,530       0    0              0             0       0             0          0    0                  order_heap_CHB.increase(var(p));
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .  #endif
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
   145,308,751       1    0    145,308,751           721       0             0          0    0      assigns[x] = lbool(!sign(p));
   290,617,502       0    0              0             0       0   290,617,502 78,242,420   53      vardata[x] = mkVarData(from, level);
   145,308,751       2    1    145,308,751             0       0             0          0    0      trail.push_(p);
 1,017,161,257       0    0    871,852,506             0       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  unsigned number_watch_changed_total=0;
             .       .    .              .             .       .             .          .    .  unsigned number_clause_read_total=0;
             .       .    .              .             .       .             .          .    .  unsigned times_only_access_watch=0;
             .       .    .              .             .       .             .          .    .  /*_________________________________________________________________________________________________
             .       .    .              .             .       .             .          .    .  |
             .       .    .              .             .       .             .          .    .  |  propagate : [void]  ->  [Clause*]
             .       .    .              .             .       .             .          .    .  |  
-- line 1532 ----------------------------------------
-- line 1533 ----------------------------------------
             .       .    .              .             .       .             .          .    .  |  Description:
             .       .    .              .             .       .             .          .    .  |    Propagates all enqueued facts. If a conflict arises, the conflicting clause is returned,
             .       .    .              .             .       .             .          .    .  |    otherwise CRef_Undef.
             .       .    .              .             .       .             .          .    .  |  
             .       .    .              .             .       .             .          .    .  |    Post-conditions:
             .       .    .              .             .       .             .          .    .  |      * the propagation queue is empty, even if there was a conflict.
             .       .    .              .             .       .             .          .    .  |________________________________________________________________________________________________@*/
             .       .    .              .             .       .             .          .    .  CRef Solver::propagate_()
    21,806,384       5    3              0             0       0    16,354,788          0    0  {
             .       .    .              .             .       .             .          .    .      //auto start_time=std::chrono::steady_clock::now();
     2,725,798       0    0              0             0       0     2,725,798          0    0      CRef    confl     = CRef_Undef;
     2,725,798       0    0              0             0       0     2,725,798         31    0      int     num_props = 0;
     5,451,596       0    0              0             0       0     2,725,798      1,236    0      watches.cleanAll();
     5,451,596       4    2              0             0       0     2,725,798          0    0      watches_bin.cleanAll();
             .       .    .              .             .       .             .          .    .      
   493,180,246       1    1    361,784,166     1,378,910       1             0          0    0      while (qhead < trail.size()){
   639,325,145       0    0    255,730,058     5,232,798       0   127,865,029          0    0          Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
             .       .    .              .             .       .             .          .    .          int currLevel = level(var(p));
             .       .    .              .             .       .             .          .    .          vec<Watcher>&  ws  = watches[p];
             .       .    .              .             .       .             .          .    .          //std::cout<<"size of ws: "<<watches.size()<<"\n";
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .          Watcher        *i, *j, *end;
   228,485,607       0    0    228,485,607     1,783,259       0             0          0    0          num_props++;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .          vec<Watcher>& ws_bin = watches_bin[p];  // Propagate binary clauses first.
             .       .    .              .             .       .             .          .    .          //std::cout<<"size of ws_bin: "<<watches_bin.size()<<"\n";
   526,041,651       2    1    127,865,029   117,245,051     578             0          0    0          for (int k = 0; k < ws_bin.size(); k++){
    61,800,342       0    0     61,800,342    23,402,914      80             0          0    0              Lit the_other = ws_bin[k].blocker;
11,150,287,706       0    0 10,962,432,960             0       0             0          0    0              if (value(the_other) == l_False){
        36,132       0    0         18,066             0       0        18,066          0    0                  confl = ws_bin[k].cref;
             .       .    .              .             .       .             .          .    .                  //auto end_time=std::chrono::steady_clock::now();
             .       .    .              .             .       .             .          .    .                  //auto duration=end_time-start_time;
             .       .    .              .             .       .             .          .    .  #ifdef LOOSE_PROP_STAT
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .                  return confl;
             .       .    .              .             .       .             .          .    .  #else
             .       .    .              .             .       .             .          .    .                  goto ExitProp;
             .       .    .              .             .       .             .          .    .  #endif
    80,682,354       5    2              0             0       0             0          0    0              }else if(value(the_other) == l_Undef)
             .       .    .              .             .       .             .          .    .              {
    53,890,320       2    0     32,334,192             0       0    10,778,064          0    0                  uncheckedEnqueue(the_other, currLevel, ws_bin[k].cref);
             .       .    .              .             .       .             .          .    .  #ifdef  PRINT_OUT                
             .       .    .              .             .       .             .          .    .                  std::cout << "i " << the_other << " l " << currLevel << "\n";
             .       .    .              .             .       .             .          .    .  #endif                
             .       .    .              .             .       .             .          .    .  			}
             .       .    .              .             .       .             .          .    .          }
   255,693,926       0    0    255,693,926    78,450,619      40             0          0    0          total_Watchers+=ws.size();
   127,846,963       0    0    127,846,963             0       0             0          0    0          total_indexs++;//number of rounds
             .       .    .              .             .       .             .          .    .          //int count=0;
   126,558,152       0    0              0             0       0             0          0    0          bool no_clause_access=true;
   126,558,152       0    0              0             0       0   126,558,152          0    0          bool no_implication_added=true;
   126,558,152       0    0              0             0       0   126,558,152          0    0          bool no_change_other_watch=true;
30,452,833,677       8    5 14,971,367,318             0       0   127,846,963          0    0          for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
             .       .    .              .             .       .             .          .    .              // Try to avoid inspecting the clause:
             .       .    .              .             .       .             .          .    .              //count++;
14,843,520,355       2    1 14,843,520,355 1,954,460,167  50,931             0          0    0              Lit blocker = i->blocker;
29,687,040,710       0    0 14,843,520,355       410,324       0             0          0    0              total_access_watches++;
29,687,040,710       0    0 14,843,520,355    40,689,768       0             0          0    0              if (value(blocker) == l_True){
             .       .    .              .             .       .             .          .    .                  
39,117,634,000       0    0  9,779,408,500             0       0 9,779,408,500  5,363,756    0                  *j++ = *i++; continue; }//no clause accessed
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .              // Make sure the false literal is data[1]:
 5,070,405,975       0    0      1,033,223           155       0             0          0    0              no_clause_access=false;
15,192,335,565       3    2 10,128,223,710       526,096       0 5,064,111,855          0    0              total_clause_access_times++;
10,128,223,710       0    0  5,064,111,855             0       0             0          0    0              CRef     cr        = i->cref;
             .       .    .              .             .       .             .          .    .              //std::cout<<"cr: "<<cr<<"\n";
             .       .    .              .             .       .             .          .    .              Clause&  c         = ca[cr];
             .       .    .              .             .       .             .          .    .              Lit      false_lit = ~p;
 5,064,111,855       0    0  5,064,111,855             0       0             0          0    0              total_clause_access_size+=2;
15,192,335,565       0    0 10,128,223,710 4,648,158,127 171,535             0          0    0              if (c[0] == false_lit)
10,084,065,008       0    0  5,042,032,504   144,351,685   4,416 5,042,032,504          0    0                  c[0] = c[1], c[1] = false_lit;
             .       .    .              .             .       .             .          .    .              assert(c[1] == false_lit);
             .       .    .              .             .       .             .          .    .              i++;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .              // If 0th watch is true, then clause is already satisfied.
             .       .    .              .             .       .             .          .    .              Lit     first = c[0];
             .       .    .              .             .       .             .          .    .              Watcher w     = Watcher(cr, first);
12,975,229,680       0    0  1,423,502,985     2,234,471       0             0          0    0              if (first != blocker && value(first) == l_True){
 3,549,073,380       0    0              0             0       0 2,366,048,920  1,800,541    0                  *j++ = w; continue; }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .              // Look for new watch:
20,979,796,532       2    1              0             0       0             0          0    0              for (int k = 2; k < c.size(); k++)
             .       .    .              .             .       .             .          .    .              {
37,570,719,384       0    0              0             0       0 8,154,021,837          0    0                  total_clause_access_size++;
26,181,186,560       0    0  2,110,968,096             0       0             0          0    0                  if (value(c[k]) != l_False){
14,992,591,692     814    0  7,496,295,846             0       0 7,496,295,846          0    0                      c[1] = c[k]; c[k] = false_lit;
 3,748,147,923       0    0  3,748,147,923             0       0             0          0    0                      total_change_other_watch++;
 3,748,147,923       0    0              0             0       0 3,748,147,923        216    0                      no_change_other_watch=false;
             .       .    .              .             .       .             .          .    .                      watches[~c[1]].push(w);
             .       .    .              .             .       .             .          .    .                      goto NextClause; }
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .              // Did not find watch -- clause is unit under assignment:
   399,946,421       0    0              0             0       0   265,878,944    171,832    0              *j++ = w;
   265,878,944       0    0              0             0       0             0          0    0              if (value(first) == l_False){
     1,128,005       0    0      1,128,005        43,034       0             0          0    0                  time_find_conflict++;
     6,768,030       3    1      4,512,020        28,286       0             0          0    0                  total_find_conflict_length+=i-(Watcher*)ws;
     2,256,010       0    0      2,256,010             0       0             0          0    0                  total_find_conflict_allsize+=ws.size();
             .       .    .              .             .       .             .          .    .                  //std::cout<<"count: "<<count<<", length: "<<i-ws<<"\n";
     1,128,005       0    0              0             0       0     1,128,005          0    0                  confl = cr;
     2,256,010       0    0      1,128,005             0       0     1,128,005      7,685    0                  qhead = trail.size();
             .       .    .              .             .       .             .          .    .                  // Copy the remaining watches:
             .       .    .              .             .       .             .          .    .  
   162,475,905       7    3      2,161,228           153       0             0          0    0                  while (i < end)
    78,512,722       0    0     78,512,722     9,715,637     724    78,512,722    272,882    0                      *j++ = *i++;
             .       .    .              .             .       .             .          .    .              }else
             .       .    .              .             .       .             .          .    .              {//new implecate
   131,811,467       0    0              0             0       0   131,811,467          0    0                  no_implication_added=false;
   131,811,467       0    0    131,811,467     1,723,351       0             0          0    0                  total_push_new_implication++;
   395,434,401       0    0    263,622,934       650,243       0             0          0    0  				if (currLevel == decisionLevel())
             .       .    .              .             .       .             .          .    .  				{
   263,622,934       0    0              0             0       0             0          0    0  					uncheckedEnqueue(first, currLevel, cr);
             .       .    .              .             .       .             .          .    .  #ifdef PRINT_OUT					
             .       .    .              .             .       .             .          .    .  					std::cout << "i " << first << " l " << currLevel << "\n";
             .       .    .              .             .       .             .          .    .  #endif					
             .       .    .              .             .       .             .          .    .  				}
             .       .    .              .             .       .             .          .    .  				else
             .       .    .              .             .       .             .          .    .  				{
             .       .    .              .             .       .             .          .    .  					int nMaxLevel = currLevel;
           814       0    0              0             0       0             0          0    0  					int nMaxInd = 1;
             .       .    .              .             .       .             .          .    .  					// pass over all the literals in the clause and find the one with the biggest level
         3,904       0    0            407             0       0             0          0    0  					for (int nInd = 2; nInd < c.size(); ++nInd)
             .       .    .              .             .       .             .          .    .  					{
             .       .    .              .             .       .             .          .    .  						int nLevel = level(var(c[nInd]));
         2,560       0    0              0             0       0             0          0    0  						if (nLevel > nMaxLevel)
             .       .    .              .             .       .             .          .    .  						{
             .       .    .              .             .       .             .          .    .  							nMaxLevel = nLevel;
             .       .    .              .             .       .             .          .    .  							nMaxInd = nInd;
             .       .    .              .             .       .             .          .    .  						}
             .       .    .              .             .       .             .          .    .  					}
             .       .    .              .             .       .             .          .    .  
           814       1    1              0             0       0             0          0    0  					if (nMaxInd != 1)
             .       .    .              .             .       .             .          .    .  					{
             .       .    .              .             .       .             .          .    .  						std::swap(c[1], c[nMaxInd]);
             .       .    .              .             .       .             .          .    .  						*j--; // undo last watch
           111       0    0            111             0       0             0          0    0                          total_change_other_watch++;
           111       0    0              0             0       0           111          0    0                          no_change_other_watch=false;
             .       .    .              .             .       .             .          .    .  						watches[~c[1]].push(w);
             .       .    .              .             .       .             .          .    .  					}
             .       .    .              .             .       .             .          .    .  					
   659,057,742       0    0    131,811,467             0       0   131,811,467          0    0  					uncheckedEnqueue(first, nMaxLevel, cr);
             .       .    .              .             .       .             .          .    .  #ifdef PRINT_OUT					
             .       .    .              .             .       .             .          .    .  					std::cout << "i " << first << " l " << nMaxLevel << "\n";
             .       .    .              .             .       .             .          .    .  #endif	
             .       .    .              .             .       .             .          .    .  				}
             .       .    .              .             .       .             .          .    .  			}
             .       .    .              .             .       .             .          .    .  
     1,033,223      66    3              0             0       0             0          0    0  NextClause:;
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .          //after process all watches, I need to decide if this round of propagation change the assignment queue, or access clause.
   632,790,760       0    0    126,558,152             0       0             0          0    0          if(no_clause_access==true){
    12,600,320     247    4     12,600,320        28,775       0             0          0    0              total_no_clause_access++;
             .       .    .              .             .       .             .          .    .          }
   264,427,813      30   11    126,558,152             0       0             0          0    0          if(no_implication_added==true){
    58,574,225       2    0     57,285,414     1,353,940       0             0          0    0              total_no_implication_added++;
             .       .    .              .             .       .             .          .    .          }
   266,922,535       0    0    126,558,152             0       0             0          0    0          if(no_change_other_watch==true){
    27,208,319     182    4     27,208,319             5       0             0          0    0              total_no_change_other_watch++;
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .          ws.shrink(i - j);
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  ExitProp:;
     5,415,464       3    1      5,415,464     1,037,555       0             0          0    0      propagations += num_props;
     2,707,732       0    0      2,707,732             0       0             0          0    0      simpDB_props -= num_props;
             .       .    .              .             .       .             .          .    .  
     2,707,732       0    0      2,707,732             0       0             0          0    0      return confl;
 1,791,925,683     289    4     19,080,586     1,965,387       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  /*_________________________________________________________________________________________________
             .       .    .              .             .       .             .          .    .  |
             .       .    .              .             .       .             .          .    .  |  reduceDB : ()  ->  [void]
             .       .    .              .             .       .             .          .    .  |  
             .       .    .              .             .       .             .          .    .  |  Description:
             .       .    .              .             .       .             .          .    .  |    Remove half of the learnt clauses, minus the clauses locked by the current assignment. Locked
             .       .    .              .             .       .             .          .    .  |    clauses are clauses that are reason to some assignment. Binary clauses are never removed.
             .       .    .              .             .       .             .          .    .  |________________________________________________________________________________________________@*/
             .       .    .              .             .       .             .          .    .  struct reduceDB_lt { 
             .       .    .              .             .       .             .          .    .      ClauseAllocator& ca;
             .       .    .              .             .       .             .          .    .      reduceDB_lt(ClauseAllocator& ca_) : ca(ca_) {}
    53,453,785     152   32     52,442,756    18,483,237     893             0          0    0      bool operator () (CRef x, CRef y) const { return ca[x].activity() < ca[y].activity(); }
             .       .    .              .             .       .             .          .    .  };
             .       .    .              .             .       .             .          .    .  void Solver::reduceDB()
           456      74    8              0             0       0           304          0    0  {
             .       .    .              .             .       .             .          .    .      int     i, j;
             .       .    .              .             .       .             .          .    .      //if (local_learnts_dirty) cleanLearnts(learnts_local, LOCAL);
             .       .    .              .             .       .             .          .    .      //local_learnts_dirty = false;
             .       .    .              .             .       .             .          .    .  
            76       0    0              0             0       0             0          0    0      sort(learnts_local, reduceDB_lt(ca));
             .       .    .              .             .       .             .          .    .  
           380       0    0             76            76       0             0          0    0      int limit = learnts_local.size() / 2;
     4,233,616      76    9              0             0       0             0          0    0      for (i = j = 0; i < learnts_local.size(); i++){
     6,349,854      76   11      4,233,236       132,379       0             0          0    0          Clause& c = ca[learnts_local[i]];
     4,233,236       0    0      2,116,618     2,106,659     433             0          0    0          if (c.mark() == LOCAL)
     7,768,844       0    0      2,040,249             0       0             0          0    0              if (c.removable() && !locked(c) && i < limit)
     5,127,575       0    0      1,025,515             0       0     1,025,515          0    0                  removeClause(learnts_local[i]);
             .       .    .              .             .       .             .          .    .              else{
       195,549       0    0              0             0       0             0          0    0                  if (!c.removable()) limit++;
             .       .    .              .             .       .             .          .    .                  c.removable(true);
     5,226,408       0    0      1,014,734             0       0     1,014,734     63,545    0                  learnts_local[j++] = learnts_local[i]; }
             .       .    .              .             .       .             .          .    .      }
            76       0    0              0             0       0             0          0    0      learnts_local.shrink(i - j);
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      checkGarbage();
           403       0    0            327            76       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  void Solver::reduceDB_Tier2()
           684      75   10              0             0       0           570          0    0  {
             .       .    .              .             .       .             .          .    .      int i, j;
     3,494,140      35    3            114           109       0             0          0    0      for (i = j = 0; i < learnts_tier2.size(); i++){
     4,299,681      62   12      2,866,454        89,702   1,757             0          0    0          Clause& c = ca[learnts_tier2[i]];
     2,866,454       0    0              0             0       0             0          0    0          if (c.mark() == TIER2)
     6,960,960      94   11      2,784,384     1,176,075     986             0          0    0              if (!locked(c) && c.touched() + 30000 < conflicts){
             .       .    .              .             .       .             .          .    .                  learnts_local.push(learnts_tier2[i]);
             .       .    .              .             .       .             .          .    .                  c.mark(LOCAL);
             .       .    .              .             .       .             .          .    .                  //c.removable(true);
             .       .    .              .             .       .             .          .    .                  c.activity() = 0;
             .       .    .              .             .       .             .          .    .                  claBumpActivity(c);
             .       .    .              .             .       .             .          .    .              }else
     5,598,630       0    0      1,119,726             0       0     1,119,726     55,688    0                  learnts_tier2[j++] = learnts_tier2[i];
             .       .    .              .             .       .             .          .    .      }
           114       0    0              0             0       0             0          0    0      learnts_tier2.shrink(i - j);
           684       0    0            684           114       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  void Solver::removeSatisfied(vec<CRef>& cs)
           144       0    0              0             0       0            64          0    0  {
             .       .    .              .             .       .             .          .    .      int i, j;
     1,521,726       8    3        304,352             9       0             0          0    0      for (i = j = 0; i < cs.size(); i++){
       913,005       0    0        608,670        19,037       0             0          0    0          Clause& c = ca[cs[i]];
             .       .    .              .             .       .             .          .    .          if (satisfied(c))
         5,578       8    3              1             0       0         1,859        112    0              removeClause(cs[i]);
             .       .    .              .             .       .             .          .    .          else
       604,952       0    0              0             0       0       302,476        900    0              cs[j++] = cs[i];
             .       .    .              .             .       .             .          .    .      }
            16       0    0              0             0       0             0          0    0      cs.shrink(i - j);
            96       1    0             80             7       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  void Solver::safeRemoveSatisfied(vec<CRef>& cs, unsigned valid_mark)
           108       0    0              0             0       0            90          0    0  {
             .       .    .              .             .       .             .          .    .      int i, j;
       376,082       8    3             18             9       0             0          0    0      for (i = j = 0; i < cs.size(); i++){
       554,439       0    0        369,626        11,569       0             0          0    0          Clause& c = ca[cs[i]];
       369,626       0    0              0             0       0             0          0    0          if (c.mark() == valid_mark)
             .       .    .              .             .       .             .          .    .              if (satisfied(c))
           192       2    1             48             0       0            48         16    0                  removeClause(cs[i]);
             .       .    .              .             .       .             .          .    .              else
       908,300       0    0        181,660             0       0       181,660      2,531    0                  cs[j++] = cs[i];
             .       .    .              .             .       .             .          .    .      }
            16       0    0              0             0       0             0          0    0      cs.shrink(i - j);
           108       5    2            108            16       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  void Solver::rebuildOrderHeap()
            90       4    3              0             0       0            60          0    0  {
             .       .    .              .             .       .             .          .    .      vec<Var> vs;
        16,580       0    0             10             0       0            10          0    0      for (Var v = 0; v < nVars(); v++)
        49,566       0    0         24,783           220       0             0          0    0          if (decision[v] && value(v) == l_Undef)
             .       .    .              .             .       .             .          .    .              vs.push(v);
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      order_heap_CHB  .build(vs);
             .       .    .              .             .       .             .          .    .      order_heap_VSIDS.build(vs);
             .       .    .              .             .       .             .          .    .      order_heap_distance.build(vs);
            80      10    3             70             9       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  /*_________________________________________________________________________________________________
             .       .    .              .             .       .             .          .    .  |
             .       .    .              .             .       .             .          .    .  |  simplify : [void]  ->  [bool]
             .       .    .              .             .       .             .          .    .  |  
             .       .    .              .             .       .             .          .    .  |  Description:
             .       .    .              .             .       .             .          .    .  |    Simplify the clause database according to the current top-level assigment. Currently, the only
             .       .    .              .             .       .             .          .    .  |    thing done here is the removal of satisfied clauses, but more things can be put here.
             .       .    .              .             .       .             .          .    .  |________________________________________________________________________________________________@*/
             .       .    .              .             .       .             .          .    .  bool Solver::simplify()
        19,668     474    3              0             0       0        13,112          0    0  {
             .       .    .              .             .       .             .          .    .      assert(decisionLevel() == 0);
             .       .    .              .             .       .             .          .    .  
        16,390       0    0          3,278         3,213       1             0          0    0      if (!ok || propagate() != CRef_Undef)
             .       .    .              .             .       .             .          .    .          return ok = false;
             .       .    .              .             .       .             .          .    .  
        10,094     111    9          6,686             0       0             0          0    0      if (nAssigns() == simpDB_assigns || (simpDB_props > 0))
             .       .    .              .             .       .             .          .    .          return true;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // Remove satisfied clauses:
            27       0    0              0             0       0             9          0    0      removeSatisfied(learnts_core); // Should clean core first.
            36       0    0              0             0       0             9          0    0      safeRemoveSatisfied(learnts_tier2, TIER2);
            36       9    3              0             0       0             9          0    0      safeRemoveSatisfied(learnts_local, LOCAL);
            18       0    0              9             9       0             0          0    0      if (remove_satisfied)        // Can be turned off.
            32      16    5              0             0       0             8          0    0          removeSatisfied(clauses);
             .       .    .              .             .       .             .          .    .      checkGarbage();
            18       1    1              0             0       0             9          0    0      rebuildOrderHeap();
             .       .    .              .             .       .             .          .    .  
            18       0    0              9             9       0             9          9    0      simpDB_assigns = nAssigns();
            27       0    0             18            18       0             9          0    0      simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
             .       .    .              .             .       .             .          .    .  
             9       0    0              0             0       0             0          0    0      return true;
        22,946       0    0         16,390             9       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  // pathCs[k] is the number of variables assigned at level k,
             .       .    .              .             .       .             .          .    .  // it is initialized to 0 at the begining and reset to 0 after the function execution
        82,704       4    1              0             0       0        62,028          0    0  bool Solver::collectFirstUIP(CRef confl){
        20,676       0    0              0             0       0        10,338          0    0      involved_lits.clear();
       349,044       1    1              0             0       0             0          0    0      int max_level=1;
             .       .    .              .             .       .             .          .    .      Clause& c=ca[confl]; int minLevel=decisionLevel();
       161,133       0    0         10,338             0       0             0          0    0      for(int i=0; i<c.size(); i++) {
             .       .    .              .             .       .             .          .    .          Var v=var(c[i]);
             .       .    .              .             .       .             .          .    .          //        assert(!seen[v]);
       164,139       9    1         54,713         7,039       0             0          0    0          if (level(v)>0) {
       109,340       0    0         54,670         7,390       0        54,670     14,619    0              seen[v]=1;
       119,678       0    0         65,008        15,596       0        54,670     32,723    0              var_iLevel_tmp[v]=1;
        54,670       0    0         54,670        25,093       0             0          0    0              pathCs[level(v)]++;
             .       .    .              .             .       .             .          .    .              if (minLevel>level(v)) {
             .       .    .              .             .       .             .          .    .                  minLevel=level(v);
             .       .    .              .             .       .             .          .    .                  assert(minLevel>0);
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .              //    varBumpActivity(v);
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
        31,014       0    0         20,676         8,815       0             0          0    0      int limit=trail_lim[minLevel-1];
    13,392,468       0    0         10,338             0       0             0          0    0      for(int i=trail.size()-1; i>=limit; i--) {
     6,675,558      26    1      6,675,558       175,306       0             0          0    0          Lit p=trail[i]; Var v=var(p);
     6,675,558       0    0      3,337,779        91,179       0             0          0    0          if (seen[v]) {
             .       .    .              .             .       .             .          .    .              int currentDecLevel=level(v);
             .       .    .              .             .       .             .          .    .              //      if (currentDecLevel==decisionLevel())
             .       .    .              .             .       .             .          .    .              //      	varBumpActivity(v);
       323,792       0    0              0             0       0       323,792          0    0              seen[v]=0;
       647,584       0    0        323,792             0       0             0          0    0              if (--pathCs[currentDecLevel]!=0) {
             .       .    .              .             .       .             .          .    .                  Clause& rc=ca[reason(v)];
       625,722       5    1        430,524             0       0             0          0    0                  int reasonVarLevel=var_iLevel_tmp[v]+1;
       287,016       0    0              0             0       0             0          0    0                  if(reasonVarLevel>max_level) max_level=reasonVarLevel;
       318,686       0    0              0             0       0             0          0    0                  if (rc.size()==2 && value(rc[0])==l_False) {
             .       .    .              .             .       .             .          .    .                      // Special case for binary clauses
             .       .    .              .             .       .             .          .    .                      // The first one has to be SAT
             .       .    .              .             .       .             .          .    .                      assert(value(rc[1]) != l_False);
             .       .    .              .             .       .             .          .    .                      Lit tmp = rc[0];
         7,953       0    0          2,651           243       0         5,302          0    0                      rc[0] =  rc[1], rc[1] = tmp;
             .       .    .              .             .       .             .          .    .                  }
     1,373,794       0    0              0             0       0             0          0    0                  for (int j = 1; j < rc.size(); j++){
             .       .    .              .             .       .             .          .    .                      Lit q = rc[j]; Var v1=var(q);
     1,118,448       0    0              0             0       0             0          0    0                      if (level(v1) > 0) {
     1,116,382       0    0              0             0       0             0          0    0                          if (minLevel>level(v1)) {
        97,572       0    0         48,786        18,524       0             0          0    0                              minLevel=level(v1); limit=trail_lim[minLevel-1]; 	assert(minLevel>0);
             .       .    .              .             .       .             .          .    .                          }
     1,674,573       0    0      1,116,382         5,288       0             0          0    0                          if (seen[v1]) {
       578,138       0    0        289,069             0       0             0          0    0                              if (var_iLevel_tmp[v1]<reasonVarLevel)
       422,890       0    0              0             0       0       211,445          0    0                                  var_iLevel_tmp[v1]=reasonVarLevel;
             .       .    .              .             .       .             .          .    .                          }
             .       .    .              .             .       .             .          .    .                          else {
       269,122       0    0              0             0       0       269,122     82,325    0                              var_iLevel_tmp[v1]=reasonVarLevel;
             .       .    .              .             .       .             .          .    .                              //   varBumpActivity(v1);
       269,122       0    0              0             0       0       269,122          0    0                              seen[v1] = 1;
       807,366       5    1        538,244        55,193       0             0          0    0                              pathCs[level(v1)]++;
             .       .    .              .             .       .             .          .    .                          }
             .       .    .              .             .       .             .          .    .                      }
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .              involved_lits.push(p);
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .      }
        31,014     399    1         10,338             0       0        10,338          0    0      double inc=var_iLevel_inc;
             .       .    .              .             .       .             .          .    .      vec<int> level_incs; level_incs.clear();
       403,854       0    0        149,136             0       0             0          0    0      for(int i=0;i<max_level;i++){
       169,812       4    1         84,906             0       0             0          0    0          level_incs.push(inc);
       254,718       0    0        169,812             0       0        84,906          0    0          inc = inc/my_var_decay;
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
       688,936       0    0        334,130             0       0             0          0    0      for(int i=0;i<involved_lits.size();i++){
        10,338       0    0         10,338             0       0             0          0    0          Var v =var(involved_lits[i]);
             .       .    .              .             .       .             .          .    .          //        double old_act=activity_distance[v];
             .       .    .              .             .       .             .          .    .          //        activity_distance[v] +=var_iLevel_inc * var_iLevel_tmp[v];
     3,079,536   5,352    2      1,012,728        95,622       0       334,130          0    0          activity_distance[v]+=var_iLevel_tmp[v]*level_incs[var_iLevel_tmp[v]-1];
             .       .    .              .             .       .             .          .    .  
       647,584       0    0              0             0       0             0          0    0          if(activity_distance[v]>1e100){
             .       .    .              .             .       .             .          .    .              for(int vv=0;vv<nVars();vv++)
        51,690     371    1         20,676        16,145       0        20,676          0    0                  activity_distance[vv] *= 1e-100;
             .       .    .              .             .       .             .          .    .              var_iLevel_inc*=1e-100;
        14,160      11    1              0             0       0             0          0    0              for(int j=0; j<max_level; j++) level_incs[j]*=1e-100;
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .          if (order_heap_distance.inHeap(v))
             .       .    .              .             .       .             .          .    .              order_heap_distance.decrease(v);
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .          //        var_iLevel_inc *= (1 / my_var_decay);
             .       .    .              .             .       .             .          .    .      }
        51,690     135    1         20,676             0       0        10,338          0    0      var_iLevel_inc=level_incs[level_incs.size()-1];
             .       .    .              .             .       .             .          .    .      return true;
        93,042       0    0         72,366           208       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  struct UIPOrderByILevel_Lt {
             .       .    .              .             .       .             .          .    .      Solver& solver;
             .       .    .              .             .       .             .          .    .      const vec<double>&  var_iLevel;
             .       .    .              .             .       .             .          .    .      bool operator () (Lit x, Lit y) const
             .       .    .              .             .       .             .          .    .      {
             .       .    .              .             .       .             .          .    .          return var_iLevel[var(x)] < var_iLevel[var(y)] ||
             .       .    .              .             .       .             .          .    .                  (var_iLevel[var(x)]==var_iLevel[var(y)]&& solver.level(var(x))>solver.level(var(y)));
-- line 1927 ----------------------------------------
-- line 1954 ----------------------------------------
             .       .    .              .             .       .             .          .    .  |    Search for a model the specified number of conflicts. 
             .       .    .              .             .       .             .          .    .  |  
             .       .    .              .             .       .             .          .    .  |  Output:
             .       .    .              .             .       .             .          .    .  |    'l_True' if a partial assigment that is consistent with respect to the clauseset is found. If
             .       .    .              .             .       .             .          .    .  |    all variables are decision variables, this means that the clause set is satisfiable. 'l_False'
             .       .    .              .             .       .             .          .    .  |    if the clause set is unsatisfiable. 'l_Undef' if the bound on number of conflicts is reached.
             .       .    .              .             .       .             .          .    .  |________________________________________________________________________________________________@*/
             .       .    .              .             .       .             .          .    .  lbool Solver::search(int& nof_conflicts)
        35,915   2,141    7              0             0       0        22,855          0    0  {
             .       .    .              .             .       .             .          .    .      assert(ok);
             .       .    .              .             .       .             .          .    .      int         backtrack_level;
             .       .    .              .             .       .             .          .    .      int         lbd;
             .       .    .              .             .       .             .          .    .      vec<Lit>    learnt_clause;
             .       .    .              .             .       .             .          .    .      bool        cached = false;
         3,265       0    0          3,265            33       0             0          0    0      starts++;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // simplify
             .       .    .              .             .       .             .          .    .      //
        13,060       3    3          9,795         3,265       3             0          0    0      if (conflicts >= curSimplify * nbconfbeforesimplify){
             .       .    .              .             .       .             .          .    .          //        printf("c ### simplifyAll on conflict : %lld\n", conflicts);
             .       .    .              .             .       .             .          .    .          //printf("nbClauses: %d, nbLearnts_core: %d, nbLearnts_tier2: %d, nbLearnts_local: %d, nbLearnts: %d\n",
             .       .    .              .             .       .             .          .    .          //	clauses.size(), learnts_core.size(), learnts_tier2.size(), learnts_local.size(),
             .       .    .              .             .       .             .          .    .          //	learnts_core.size() + learnts_tier2.size() + learnts_local.size());
            32      21   11             32            32      13             0          0    0          nbSimplifyAll++;
            96      32   12              0             0       0            32          0    0          if (!simplifyAll()){
             .       .    .              .             .       .             .          .    .              return l_False;
             .       .    .              .             .       .             .          .    .          }
           224       0    0             64            64       0            32          0    0          curSimplify = (conflicts / nbconfbeforesimplify) + 1;
            96       0    0             32             0       0            32          0    0          nbconfbeforesimplify += incSimplify;
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      for (;;){
             .       .    .              .             .       .             .          .    .          CRef confl = propagate();
             .       .    .              .             .       .             .          .    .  
     5,444,948       0    0              0             0       0             0          0    0          if (confl != CRef_Undef){
             .       .    .              .             .       .             .          .    .              // CONFLICT
     3,438,213       0    0      1,146,071        24,680       0             0          0    0              if (VSIDS){
     1,061,698       0    0        530,834       505,867       2            30          0    0                  if (--timer == 0 && var_decay < 0.95) timer = 5000, var_decay += 0.01;
             .       .    .              .             .       .             .          .    .              }else
     2,865,855      16    0      1,570,569       573,958       0       340,001          0    0                  if (step_size > min_step_size) step_size -= step_size_dec;
             .       .    .              .             .       .             .          .    .  
     4,584,284      85   28      2,292,142     1,080,137       0     1,146,071          0    0              conflicts++; nof_conflicts--;
             .       .    .              .             .       .             .          .    .              //if (conflicts == 100000 && learnts_core.size() < 100) core_lbd_cut = 5;
             .       .    .              .             .       .             .          .    .              ConflictData data = FindConflictLevel(confl);
     2,292,142       9    1              0             0       0             0          0    0              if (data.nHighestLevel == 0) return l_False;
            74       0    0             34             0       0             0          0    0              if (data.bOnlyOneLitFromHighest)
             .       .    .              .             .       .             .          .    .              {
             3       0    0              0             0       0             0          0    0  				cancelUntil(data.nHighestLevel - 1);
             .       .    .              .             .       .             .          .    .  				continue;
             .       .    .              .             .       .             .          .    .  			}
             .       .    .              .             .       .             .          .    .  			
             .       .    .              .             .       .             .          .    .              learnt_clause.clear();
     2,292,136       0    0              0             0       0     1,146,068  1,048,746    0              if(conflicts>50000) DISTANCE=0;
             .       .    .              .             .       .             .          .    .              else DISTANCE=1;
     3,353,704       0    0              0             0       0             0          0    0              if(VSIDS && DISTANCE)
        41,352       4    1              0             0       0        10,338          0    0                  collectFirstUIP(confl);
             .       .    .              .             .       .             .          .    .  
     6,876,408      72    9              0             0       0     1,146,068          0    0              analyze(confl, learnt_clause, backtrack_level, lbd);
             .       .    .              .             .       .             .          .    .              // check chrono backtrack condition
    16,016,959      44   10      5,726,341        57,563       0             0          0    0              if ((confl_to_chrono < 0 || confl_to_chrono <= conflicts) && chrono > -1 && (decisionLevel() - backtrack_level) >= chrono)
             .       .    .              .             .       .             .          .    .              {
            30       0    0             30             0       0             0          0    0  				++chrono_backtrack;
            30       0    0              0             0       0             0          0    0  				cancelUntil(data.nHighestLevel -1);
             .       .    .              .             .       .             .          .    .  			}
             .       .    .              .             .       .             .          .    .  			else // default behavior
             .       .    .              .             .       .             .          .    .  			{
     1,146,038     340    9      1,146,038           721       0             0          0    0  				++non_chrono_backtrack;
             .       .    .              .             .       .             .          .    .  				cancelUntil(backtrack_level);
             .       .    .              .             .       .             .          .    .  			}
             .       .    .              .             .       .             .          .    .  
     3,438,204       0    0      1,146,068         7,747       0     1,146,068          0    0              lbd--;
     2,292,136       0    0      1,146,068             0       0             0          0    0              if (VSIDS){
       530,784      14   13              0             0       0       530,784          0    0                  cached = false;
     1,592,352      41   14      1,592,352       404,791       0             0          0    0                  conflicts_VSIDS++;
             .       .    .              .             .       .             .          .    .                  lbd_queue.push(lbd);
     4,246,272       0    0      1,592,352             0       0       530,784          0    0                  global_lbd_sum += (lbd > 50 ? 50 : lbd); }
             .       .    .              .             .       .             .          .    .  
     3,438,204      35   10      1,146,068             0       0             0          0    0              if (learnt_clause.size() == 1){
            84       4    0             24             3       0            12          0    0                  uncheckedEnqueue(learnt_clause[0]);
             .       .    .              .             .       .             .          .    .              }else{
             .       .    .              .             .       .             .          .    .                  CRef cr = ca.alloc(learnt_clause, true);
     1,146,056       0    0      1,146,056             0       0             0          0    0                  ca[cr].set_lbd(lbd);
             .       .    .              .             .       .             .          .    .                  //duplicate learnts 
             .       .    .              .             .       .             .          .    .                  int  id = 0;
     2,292,112       0    0      1,146,056     1,112,776       0             0          0    0                  if (lbd <= max_lbd_dup){                        
             .       .    .              .             .       .             .          .    .                      std::vector<uint32_t> tmp;
    84,214,405       0    0     57,573,640             0       0       851,221          0    0                      for (int i = 0; i < learnt_clause.size(); i++)
    59,276,082       8    1     39,517,388             0       0    19,758,694          0    0                          tmp.push_back(learnt_clause[i].x);
     2,553,663       5    1        851,221             0       0       851,221          0    0                      id = is_duplicate(tmp);             
     4,256,105       0    0        851,221             0       0             0          0    0                      if (id == min_number_of_learnts_copies +1){
            48       0    0             48             1       0             0          0    0                          duplicates_added_conflicts++;                        
             .       .    .              .             .       .             .          .    .                      }                    
     1,702,442       0    0              0             0       0             0          0    0                      if (id == min_number_of_learnts_copies){
           504       0    0            504             7       0             0          0    0                          duplicates_added_tier2++;
             .       .    .              .             .       .             .          .    .                      }                                        
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .                  //duplicate learnts
             .       .    .              .             .       .             .          .    .  
     6,815,788       0    0      2,276,975       543,122       0             0          0    0                  if ((lbd <= core_lbd_cut) || (id == min_number_of_learnts_copies+1)){
            13       3    1              0             0       0             0          0    0                      learnts_core.push(cr);
             .       .    .              .             .       .             .          .    .                      ca[cr].mark(CORE);
     3,965,178   1,246   11              0             0       0             0          0    0                  }else if ((lbd <= 6)||(id == min_number_of_learnts_copies)){
            21       4    1              0             0       0             0          0    0                      learnts_tier2.push(cr);
             .       .    .              .             .       .             .          .    .                      ca[cr].mark(TIER2);
     1,116,940       0    0        279,235           214       0       279,235        210    0                      ca[cr].touched() = conflicts;
             .       .    .              .             .       .             .          .    .                  }else{
            24      19    2              0             0       0             0          0    0                      learnts_local.push(cr);
             .       .    .              .             .       .             .          .    .                      claBumpActivity(ca[cr]); }
     3,438,168   1,291   14              0             0       0     1,146,056          0    0                  attachClause(cr);
             .       .    .              .             .       .             .          .    .  
     6,876,336       0    0      3,438,168           799       0     1,146,056          0    0                  uncheckedEnqueue(learnt_clause[0], backtrack_level, cr);
             .       .    .              .             .       .             .          .    .  #ifdef PRINT_OUT
             .       .    .              .             .       .             .          .    .                  std::cout << "new " << ca[cr] << "\n";
             .       .    .              .             .       .             .          .    .                  std::cout << "ci " << learnt_clause[0] << " l " << backtrack_level << "\n";
             .       .    .              .             .       .             .          .    .  #endif                
             .       .    .              .             .       .             .          .    .              }
     3,438,204       0    0      1,146,068       127,146       0             0          0    0              if (drup_file){
             .       .    .              .             .       .             .          .    .  #ifdef BIN_DRUP
             .       .    .              .             .       .             .          .    .                  binDRUP('a', learnt_clause, drup_file);
             .       .    .              .             .       .             .          .    .  #else
             .       .    .              .             .       .             .          .    .                  for (int i = 0; i < learnt_clause.size(); i++)
             .       .    .              .             .       .             .          .    .                      fprintf(drup_file, "%i ", (var(learnt_clause[i]) + 1) * (-2 * sign(learnt_clause[i]) + 1));
             .       .    .              .             .       .             .          .    .                  fprintf(drup_file, "0\n");
             .       .    .              .             .       .             .          .    .  #endif
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .  
     3,438,204     777   10      2,292,136       512,967       0             0          0    0              if (VSIDS) varDecayActivity();
             .       .    .              .             .       .             .          .    .              claDecayActivity();
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .              /*if (--learntsize_adjust_cnt == 0){
             .       .    .              .             .       .             .          .    .                  learntsize_adjust_confl *= learntsize_adjust_inc;
             .       .    .              .             .       .             .          .    .                  learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
             .       .    .              .             .       .             .          .    .                  max_learnts             *= learntsize_inc;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .                  if (verbosity >= 1)
-- line 2088 ----------------------------------------
-- line 2090 ----------------------------------------
             .       .    .              .             .       .             .          .    .                             (int)conflicts,
             .       .    .              .             .       .             .          .    .                             (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals,
             .       .    .              .             .       .             .          .    .                             (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
             .       .    .              .             .       .             .          .    .              }*/
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .          }else{
             .       .    .              .             .       .             .          .    .              // NO CONFLICT
             .       .    .              .             .       .             .          .    .              bool restart = false;
     4,729,209      33   13      1,576,403       217,007       0             0          0    0              if (!VSIDS)
             .       .    .              .             .       .             .          .    .                  restart = nof_conflicts <= 0;
     1,518,584       1    1        759,292             0       0             0          0    0              else if (!cached){
     4,139,288       0    0      1,195,636       446,041       0       270,065          0    0                  restart = lbd_queue.full() && (lbd_queue.avg() * 0.8 > global_lbd_sum / conflicts_VSIDS);
             .       .    .              .             .       .             .          .    .                  cached = true;
             .       .    .              .             .       .             .          .    .              }
     2,451,333       0    0        817,111       510,562       0             0          0    0              if (restart /*|| !withinBudget()*/){
             .       .    .              .             .       .             .          .    .                  lbd_queue.clear();
             .       .    .              .             .       .             .          .    .                  cached = false;
             .       .    .              .             .       .             .          .    .                  // Reached bound on number of conflicts:
         9,792       0    0              0             0       0         6,528      3,034    1                  progress_estimate = progressEstimate();
             .       .    .              .             .       .             .          .    .                  cancelUntil(0);
         6,528       0    0              0             0       0             0          0    0                  return l_Undef; }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .              // Simplify the set of problem clauses:
     4,949,042      40    2      1,573,139             0       0       219,793          0    0              if (decisionLevel() == 0 && !simplify())
             .       .    .              .             .       .             .          .    .                  return l_False;
             .       .    .              .             .       .             .          .    .  
     4,719,417      13    1      3,146,278       698,888       0             0          0    0              if (conflicts >= next_T2_reduce){
           228       0    0              0             0       0           114          0    0                  next_T2_reduce = conflicts + 10000;
           456       0    0            114             0       0           114          0    0                  reduceDB_Tier2(); }
     3,146,278      31   10      1,573,139           904       0             0          0    0              if (conflicts >= next_L_reduce){
           152       0    0              0             0       0            76          0    0                  next_L_reduce = conflicts + 15000;
           152       0    0              0             0       0            76          0    0                  reduceDB(); }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .              Lit next = lit_Undef;
             .       .    .              .             .       .             .          .    .              /*while (decisionLevel() < assumptions.size()){
             .       .    .              .             .       .             .          .    .                  // Perform user provided assumption:
             .       .    .              .             .       .             .          .    .                  Lit p = assumptions[decisionLevel()];
             .       .    .              .             .       .             .          .    .                  if (value(p) == l_True){
             .       .    .              .             .       .             .          .    .                      // Dummy decision level:
             .       .    .              .             .       .             .          .    .                      newDecisionLevel();
-- line 2129 ----------------------------------------
-- line 2133 ----------------------------------------
             .       .    .              .             .       .             .          .    .                  }else{
             .       .    .              .             .       .             .          .    .                      next = p;
             .       .    .              .             .       .             .          .    .                      break;
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .              if (next == lit_Undef)*/{
             .       .    .              .             .       .             .          .    .                  // New variable decision:
     1,573,139       0    0      1,573,139            76       0             0          0    0                  decisions++;
     4,719,417     325   11              0             0       0     1,573,139          0    0                  next = pickBranchLit();
             .       .    .              .             .       .             .          .    .  
     3,146,278       0    0              0             0       0             0          0    0                  if (next == lit_Undef)
             .       .    .              .             .       .             .          .    .                      // Model found:
             2       0    0              0             0       0             0          0    0                      return l_True;
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .              // Increase decision level and enqueue 'next'
             .       .    .              .             .       .             .          .    .              newDecisionLevel();
     9,438,828      33   11      1,573,138             0       0     1,573,138          0    0              uncheckedEnqueue(next, decisionLevel());
             .       .    .              .             .       .             .          .    .  #ifdef PRINT_OUT            
             .       .    .              .             .       .             .          .    .              std::cout << "d " << next << " l " << decisionLevel() << "\n";
             .       .    .              .             .       .             .          .    .  #endif            
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .      }
        29,385      25    3         22,855         3,265       1             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  double Solver::progressEstimate() const
        19,584       4    4              0             0       0        16,320          0    0  {
         6,528       0    0              0             0       0             0          0    0      double  progress = 0;
        16,320       0    0          6,528         2,519       0         3,264          0    0      double  F = 1.0 / nVars();
             .       .    .              .             .       .             .          .    .  
       289,125       4    3              0             0       0             0          0    0      for (int i = 0; i <= decisionLevel(); i++){
       269,541       0    0        175,342             0       0             0          0    0          int beg = i == 0 ? 0 : trail_lim[i - 1];
       360,476       0    0        178,606         9,100       1             0          0    0          int end = i == decisionLevel() ? trail.size() : trail_lim[i];
       555,402      16    7         94,199             0       0             0          0    0          progress += pow(F, i) * (end - beg);
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
         6,528       0    0              0             0       0             0          0    0      return progress / nVars();
        22,848       0    0         19,584             0       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  /*
             .       .    .              .             .       .             .          .    .    Finite subsequences of the Luby-sequence:
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .    0: 1
             .       .    .              .             .       .             .          .    .    1: 1 1 2
             .       .    .              .             .       .             .          .    .    2: 1 1 2 1 1 2 4
             .       .    .              .             .       .             .          .    .    3: 1 1 2 1 1 2 4 1 1 2 1 1 2 4 8
-- line 2180 ----------------------------------------
-- line 2183 ----------------------------------------
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .   */
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  static double luby(double y, int x){
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // Find the finite subsequence that contains index 'x', and the
             .       .    .              .             .       .             .          .    .      // size of that subsequence:
             .       .    .              .             .       .             .          .    .      int size, seq;
        60,108       0    0              0             0       0             0          0    0      for (size = 1, seq = 0; size < x+1; seq++, size = 2*size+1);
             .       .    .              .             .       .             .          .    .  
        33,542       1    1              0             0       0             0          0    0      while (size-1 != x){
        18,968       0    0              0             0       0             0          0    0          size = (size-1)>>1;
         9,484       0    0              0             0       0             0          0    0          seq--;
        28,452       0    0              0             0       0             0          0    0          x = x % size;
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      return pow(y, seq);
             .       .    .              .             .       .             .          .    .  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  static bool switch_mode = false;
             .       .    .              .             .       .             .          .    .  //static void SIGALRM_switch(int signum) { switch_mode = true; }
             .       .    .              .             .       .             .          .    .  
            16       2    2              0             0       0            12          0    0  uint32_t Solver::reduceduplicates(){
             .       .    .              .             .       .             .          .    .      uint32_t removed_duplicates = 0;
             .       .    .              .             .       .             .          .    .      std::vector<std::vector<uint64_t>> tmp;
             .       .    .              .             .       .             .          .    .      //std::map<int32_t,std::map<uint32_t,std::unordered_map<uint64_t,uint32_t>>>  ht;
         3,282       0    0              4             0       0             0          0    0      for (auto & outer_mp: ht){//variables
        44,228       0    0              0             0       0             0          0    0          for (auto &inner_mp:outer_mp.second){//sizes
     2,093,862       0    0              0             0       0             0          0    0              for (auto &in_in_mp: inner_mp.second){
     3,081,804       2    2      1,027,268       983,871 348,027             0          0    0                  if (in_in_mp.second >= 2){
             .       .    .              .             .       .             .          .    .                  //min_number_of_learnts_copies
       715,970       2    2        286,388           541     185       286,388         98    0                      tmp.push_back({(uint64_t) outer_mp.first,inner_mp.first,in_in_mp.first,in_in_mp.second});
             .       .    .              .             .       .             .          .    .                  }
             .       .    .              .             .       .             .          .    .              }                    
             .       .    .              .             .       .             .          .    .           }
             .       .    .              .             .       .             .          .    .      }          
             6       0    0              2             2       0             2          0    0      removed_duplicates = dupl_db_size-tmp.size();  
             .       .    .              .             .       .             .          .    .      ht.clear();
       501,189       2    2        214,793            22       0             0          0    0      for (auto i=0;i<tmp.size();i++){
       715,970       0    0        357,985        80,595   4,634       214,791         14    0          ht[tmp[i][0]][tmp[i][1]][tmp[i][2]]=tmp[i][3];
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .      return removed_duplicates;
            18       0    0             16             4       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  // NOTE: assumptions passed in member-variable 'assumptions'.
             .       .    .              .             .       .             .          .    .  lbool Solver::solve_()
             8       0    0              0             0       0             6          0    0  {
             .       .    .              .             .       .             .          .    .      //signal(SIGALRM, SIGALRM_switch);
             .       .    .              .             .       .             .          .    .      //alarm(2500);
             .       .    .              .             .       .             .          .    .  
             1       1    1              0             0       0             0          0    0      model.clear();
             .       .    .              .             .       .             .          .    .      conflict.clear();
             2       1    1              1             0       0             0          0    0      if (!ok) return l_False;
             .       .    .              .             .       .             .          .    .  
             1       1    1              1             0       0             0          0    0      solves++;
             .       .    .              .             .       .             .          .    .  
             5       0    0              2             1       0             1          0    0      max_learnts               = nClauses() * learntsize_factor;
             3       0    0              1             1       0             0          0    0      learntsize_adjust_confl   = learntsize_adjust_start_confl;
             1       0    0              0             0       0             1          1    0      learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
             .       .    .              .             .       .             .          .    .      lbool   status            = l_Undef;
             .       .    .              .             .       .             .          .    .  
             3       0    0              1             0       0             0          0    0      if (verbosity >= 1){
             2       0    0              0             0       0             1          0    0          printf("c ============================[ Search Statistics ]==============================\n");
             2       1    1              0             0       0             1          0    0          printf("c | Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
             2       0    0              0             0       0             1          0    0          printf("c |           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
             2       0    0              0             0       0             1          0    0          printf("c ===============================================================================\n");
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      add_tmp.clear();
             .       .    .              .             .       .             .          .    .  
             1       0    0              0             0       0             1          0    0      VSIDS = true;
             1       1    1              0             0       0             1          0    0      int init = 10000;
           165       0    0             33            33       0             0          0    0      while (status == l_Undef && init > 0 /*&& withinBudget()*/)
           132       3    0              0             0       0            33          0    0          status = search(init);
             1       0    0              0             0       0             1          0    0      VSIDS = false;
             .       .    .              .             .       .             .          .    .  
             3       1    1              0             0       0             2          2    0      duplicates_added_conflicts = 0;
             .       .    .              .             .       .             .          .    .      duplicates_added_minimization=0;
             .       .    .              .             .       .             .          .    .      duplicates_added_tier2 =0;    
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      dupl_db_size=0;
             1       0    0              1             1       0             0          0    0      size_t dupl_db_size_limit = dupl_db_init_size;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // Search:
             1       0    0              0             0       0             0          0    0      int curr_restarts = 0;
             1       0    0              0             0       0             0          0    0      uint64_t curr_props = 0;
             .       .    .              .             .       .             .          .    .      uint32_t removed_duplicates =0;
         6,464     496    5              0             0       0             0          0    0      while (status == l_Undef /*&& withinBudget()*/){
         6,464       1    1          3,232         1,915       0             0          0    0          if (dupl_db_size >= dupl_db_size_limit){    
             8       2    2              2             2       0             2          0    0              printf("c Duplicate learnts added (Minimization) %i\n",duplicates_added_minimization);    
             8       0    0              2             0       0             2          0    0              printf("c Duplicate learnts added (conflicts) %i\n",duplicates_added_conflicts);    
             8       0    0              2             0       0             2          0    0              printf("c Duplicate learnts added (tier2) %i\n",duplicates_added_tier2);    
             8       2    2              2             2       0             2          0    0              printf("c Duptime: %i\n",duptime.count());
             8       0    0              2             0       0             2          0    0              printf("c Number of conflicts: %i\n",conflicts);
             8       0    0              2             2       0             2          0    0              printf("c Core size: %i\n",learnts_core.size());
             .       .    .              .             .       .             .          .    .              
             4       0    0              0             0       0             2          0    0              removed_duplicates = reduceduplicates();
            16       2    2              4             4       0             0          0    0              dupl_db_size_limit*=1.1;
             4       0    0              2             2       1             0          0    0              dupl_db_size -= removed_duplicates;
            10       0    0              0             0       0             2          0    0              printf("c removed duplicates %i\n",removed_duplicates);
             .       .    .              .             .       .             .          .    .          }   
        19,392      78    9          6,464         4,411       1             0          0    0          if (propagations - curr_props >  VSIDS_props_limit){
             3       0    0              0             0       0             0          0    0              curr_props = propagations;
             3       0    0              0             0       0             3          0    0              switch_mode = true;
            16       0    0              0             0       0             3          0    0              VSIDS_props_limit = VSIDS_props_limit + VSIDS_props_limit/10;
             .       .    .              .             .       .             .          .    .          }     
         6,464       0    0          3,232             2       0             0          0    0          if (VSIDS){
         1,954       0    0              0             0       0         1,954      1,914    0              int weighted = INT32_MAX;
         7,816   1,953    3              0             0       0         1,954          0    0              status = search(weighted);
             .       .    .              .             .       .             .          .    .          }else{
         7,668   1,174    2          2,556             0       0         1,278        137    0              int nof_conflicts = luby(restart_inc, curr_restarts) * restart_first;
         1,278       0    0              0             0       0             0          0    0              curr_restarts++;
         6,390   1,277    0              0             0       0         1,278          0    0              status = search(nof_conflicts);
             .       .    .              .             .       .             .          .    .          }
         6,464   1,277    0          3,232         3,232       4             0          0    0          if (switch_mode){ 
             3       0    0              0             0       0             3          0    0              switch_mode = false;
             .       .    .              .             .       .             .          .    .              VSIDS = !VSIDS;
             6       0    0              3             0       0             0          0    0              if (VSIDS){
             4       2    2              0             0       0             2          0    0                  printf("c Switched to VSIDS.\n");
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .              else{
             3       1    1              0             0       0             1          0    0                 printf("c Switched to LRB.\n");
             .       .    .              .             .       .             .          .    .              }
             .       .    .              .             .       .             .          .    .              //            reduceduplicates();            
             6       1    1              3             3       3             3          0    0              fflush(stdout);
             .       .    .              .             .       .             .          .    .              picked.clear();
             .       .    .              .             .       .             .          .    .              conflicted.clear();
             .       .    .              .             .       .             .          .    .              almost_conflicted.clear();
             .       .    .              .             .       .             .          .    .  #ifdef ANTI_EXPLORATION
             .       .    .              .             .       .             .          .    .              canceled.clear();
             .       .    .              .             .       .             .          .    .  #endif
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
             3       1    1              1             1       0             0          0    0      if (verbosity >= 1)
             2       0    0              0             0       0             1          0    0          printf("c ===============================================================================\n");
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  #ifdef BIN_DRUP
             3       0    0              1             0       0             0          0    0      if (drup_file && status == l_False) binDRUP_flush(drup_file);
             .       .    .              .             .       .             .          .    .  #endif
             .       .    .              .             .       .             .          .    .  
             2       1    1              0             0       0             0          0    0      if (status == l_True){
             .       .    .              .             .       .             .          .    .          // Extend & copy model:
             .       .    .              .             .       .             .          .    .          model.growTo(nVars());
           149       1    1             52             0       0            62          0    0          for (int i = 0; i < nVars(); i++) model[i] = value(i);
             .       .    .              .             .       .             .          .    .      }else if (status == l_False && conflict.size() == 0)
             .       .    .              .             .       .             .          .    .          ok = false;
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      cancelUntil(0);
             1       0    0              0             0       0             0          0    0      return status;
             8       1    1              7             2       1             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  //=================================================================================================
             .       .    .              .             .       .             .          .    .  // Writing CNF to DIMACS:
             .       .    .              .             .       .             .          .    .  // 
             .       .    .              .             .       .             .          .    .  // FIXME: this needs to be rewritten completely.
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  static Var mapVar(Var x, vec<Var>& map, Var& max)
             .       .    .              .             .       .             .          .    .  {
-- line 2341 ----------------------------------------
-- line 2409 ----------------------------------------
             .       .    .              .             .       .             .          .    .          printf("c Wrote %d clauses with %d variables.\n", cnt, max);
             .       .    .              .             .       .             .          .    .  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  //=================================================================================================
             .       .    .              .             .       .             .          .    .  // Garbage Collection methods:
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  void Solver::relocAll(ClauseAllocator& to)
           540      68   24              0             0       0           432          0    0  {
             .       .    .              .             .       .             .          .    .      // All watchers:
             .       .    .              .             .       .             .          .    .      //
             .       .    .              .             .       .             .          .    .      // for (int i = 0; i < watches.size(); i++)
           108       0    0              0             0       0            54          0    0      watches.cleanAll();
           108       0    0              0             0       0            54          0    0      watches_bin.cleanAll();
       446,904      11    5        312,660         9,581       0        44,766         54    0      for (int v = 0; v < nVars(); v++)
       178,632       0    0         89,316             0       0             0          0    0          for (int s = 0; s < 2; s++){
             .       .    .              .             .       .             .          .    .              Lit p = mkLit(v, s);
             .       .    .              .             .       .             .          .    .              // printf(" >>> RELOCING: %s%d\n", sign(p)?"-":"", var(p)+1);
             .       .    .              .             .       .             .          .    .              vec<Watcher>& ws = watches[p];
    33,069,916      18   13     18,110,796        22,356      72             0          0    0              for (int j = 0; j < ws.size(); j++)
             .       .    .              .             .       .             .          .    .                  ca.reloc(ws[j].cref, to);
             .       .    .              .             .       .             .          .    .              vec<Watcher>& ws_bin = watches_bin[p];
       827,599       5    4        328,452        28,832      39             0          0    0              for (int j = 0; j < ws_bin.size(); j++)
             .       .    .              .             .       .             .          .    .                  ca.reloc(ws_bin[j].cref, to);
             .       .    .              .             .       .             .          .    .          }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // All reasons:
             .       .    .              .             .       .             .          .    .      //
        31,880       0    0            162            54       0             0          0    0      for (int i = 0; i < trail.size(); i++){
             .       .    .              .             .       .             .          .    .          Var v = var(trail[i]);
             .       .    .              .             .       .             .          .    .  
        56,568       0    0         12,506        11,882       0             0          0    0          if (reason(v) != CRef_Undef && (ca[reason(v)].reloced() || locked(ca[reason(v)])))
        62,638       0    0         12,506             0       0        12,506         29    0              ca.reloc(vardata[v].reason, to);
             .       .    .              .             .       .             .          .    .      }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // All learnt:
             .       .    .              .             .       .             .          .    .      //
     4,483,801      54   19      2,241,873            67       0             0          0    0      for (int i = 0; i < learnts_core.size(); i++)
             .       .    .              .             .       .             .          .    .          ca.reloc(learnts_core[i], to);
     1,126,847     162   52        563,423           106       0             0          0    0      for (int i = 0; i < learnts_tier2.size(); i++)
             .       .    .              .             .       .             .          .    .          ca.reloc(learnts_tier2[i], to);
     1,454,053      54   16        726,919            54       0             0          0    0      for (int i = 0; i < learnts_local.size(); i++)
     2,180,433       0    0              0             0       0       726,811         53    0          ca.reloc(learnts_local[i], to);
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      // All original:
             .       .    .              .             .       .             .          .    .      //
             .       .    .              .             .       .             .          .    .      int i, j;
     2,007,724      54   22            216           106       0             0          0    0      for (i = j = 0; i < clauses.size(); i++)
     2,007,238       0    0              0             0       0             0          0    0          if (ca[clauses[i]].mark() != 1){
     3,010,965      54   20      1,003,619             0       0     1,003,619          0    0              ca.reloc(clauses[i], to);
    10,036,136      44   19      4,014,422             0       0     1,003,619          0    0              clauses[j++] = clauses[i]; }
            54      54   17              0             0       0             0          0    0      clauses.shrink(i - j);
           432      54   15            378            54       0             0          0    0  }
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .  void Solver::garbageCollect()
             .       .    .              .             .       .             .          .    .  {
             .       .    .              .             .       .             .          .    .      // Initialize the next region to a size corresponding to the estimated utilization degree. This
             .       .    .              .             .       .             .          .    .      // is not precise but should avoid some unnecessary reallocations for the new region:
             .       .    .              .             .       .             .          .    .      ClauseAllocator to(ca.size() - ca.wasted());
             .       .    .              .             .       .             .          .    .  
             .       .    .              .             .       .             .          .    .      relocAll(to);
             .       .    .              .             .       .             .          .    .      if (verbosity >= 2)
             .       .    .              .             .       .             .          .    .          printf("c |  Garbage collection:   %12d bytes => %12d bytes             |\n",
             .       .    .              .             .       .             .          .    .                 ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);
             .       .    .              .             .       .             .          .    .      to.moveTo(ca);
           155      18   18             47             4       4            61          0    0  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Alloc.h
--------------------------------------------------------------------------------
Ir             I1mr  ILmr Dr            D1mr      DLmr   Dw         D1mw DLmw 

-- line 40 ----------------------------------------
             .     .    .             .         .      .          .    .    .      void capacity(uint32_t min_cap);
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .   public:
             .     .    .             .         .      .          .    .    .      // TODO: make this a class for better type-checking?
             .     .    .             .         .      .          .    .    .      typedef uint32_t Ref;
             .     .    .             .         .      .          .    .    .      enum { Ref_Undef = UINT32_MAX };
             .     .    .             .         .      .          .    .    .      enum { Unit_Size = sizeof(uint32_t) };
             .     .    .             .         .      .          .    .    .  
           276     1    1             0         0      0        220   53    0      explicit RegionAllocator(uint32_t start_cap = 1024*1024) : memory(NULL), sz(0), cap(0), wasted_(0){ capacity(start_cap); }
             .     .    .             .         .      .          .    .    .      ~RegionAllocator()
             .     .    .             .         .      .          .    .    .      {
             .     .    .             .         .      .          .    .    .          if (memory != NULL)
             .     .    .             .         .      .          .    .    .              ::free(memory);
             .     .    .             .         .      .          .    .    .      }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .      uint32_t size      () const      { return sz; }
             .     .    .             .         .      .          .    .    .      uint32_t wasted    () const      { return wasted_; }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .      Ref      alloc     (int size); 
     3,085,342     0    0     1,028,443         0      0  1,028,443    0    0      void     free      (int size)    { wasted_ += size; }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .      // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
14,494,993,953   252   68 7,224,804,842 1,543,905 47,580    328,450    0    0      T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    14,154,908     0    0    14,154,908 1,826,286    134          0    0    0      const T& operator[](Ref r) const { assert(r >= 0 && r < sz); return memory[r]; }
             .     .    .             .         .      .          .    .    .  
    18,207,662 6,686   13     1,166,695         0      0          0    0    0      T*       lea       (Ref r)       { assert(r >= 0 && r < sz); return &memory[r]; }
     1,764,411     0    0             0         0      0          0    0    0      const T* lea       (Ref r) const { assert(r >= 0 && r < sz); return &memory[r]; }
             .     .    .             .         .      .          .    .    .      Ref      ael       (const T* t)  { assert((void*)t >= (void*)&memory[0] && (void*)t < (void*)&memory[sz-1]);
             .     .    .             .         .      .          .    .    .          return  (Ref)(t - &memory[0]); }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .      void     moveTo(RegionAllocator& to) {
           216     0    0            54         0      0         54    0    0          if (to.memory != NULL) ::free(to.memory);
           108     0    0            54         0      0         54    0    0          to.memory = memory;
           108     0    0            54         0      0         54    0    0          to.sz = sz;
             .     .    .             .         .      .          .    .    .          to.cap = cap;
           108     0    0            54         0      0         54    0    0          to.wasted_ = wasted_;
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .          memory = NULL;
             .     .    .             .         .      .          .    .    .          sz = cap = wasted_ = 0;
             .     .    .             .         .      .          .    .    .      }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  };
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  template<class T>
           624    34   12             0         0      0        208    0    0  void RegionAllocator<T>::capacity(uint32_t min_cap)
             .     .    .             .         .      .          .    .    .  {
    17,061,771     4    0     5,687,257         0      0          0    0    0      if (cap >= min_cap) return;
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .      uint32_t prev_cap = cap;
         3,250     0    0             0         0      0        104    0    0      while (cap < min_cap){
             .     .    .             .         .      .          .    .    .          // NOTE: Multiply by a factor (13/8) without causing overflow, then add 2 and make the
             .     .    .             .         .      .          .    .    .          // result even by clearing the least significant bit. The resulting sequence of capacities
             .     .    .             .         .      .          .    .    .          // is carefully chosen to hit a maximum capacity that is close to the '2^32-1' limit when
             .     .    .             .         .      .          .    .    .          // using 'uint32_t' as indices so that as much as possible of this space can be used.
         9,438     0    0             0         0      0          0    0    0          uint32_t delta = ((cap >> 1) + (cap >> 3) + 2) & ~1;
         1,573     0    0             0         0      0          0    0    0          cap += delta;
             .     .    .             .         .      .          .    .    .  
         3,146     0    0             0         0      0          0    0    0          if (cap <= prev_cap)
             .     .    .             .         .      .          .    .    .              throw OutOfMemoryException();
             .     .    .             .         .      .          .    .    .      }
             .     .    .             .         .      .          .    .    .      // printf(" .. (%p) cap = %u\n", this, cap);
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .      assert(cap > 0);
           208     2    1             0         0      0        104   45    0      memory = (T*)xrealloc(memory, sizeof(T)*cap);
           416     0    0           312         0      0          0    0    0  }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  template<class T>
             .     .    .             .         .      .          .    .    .  typename RegionAllocator<T>::Ref
        82,552     2    1             0         0      0     61,914    0    0  RegionAllocator<T>::alloc(int size)
             .     .    .             .         .      .          .    .    .  { 
             .     .    .             .         .      .          .    .    .      // printf("ALLOC called (this = %p, size = %d)\n", this, size); fflush(stdout);
             .     .    .             .         .      .          .    .    .      assert(size > 0);
    30,602,490     0    0     5,687,202   103,031      0 14,707,567   97    0      capacity(sz + size);
             .     .    .             .         .      .          .    .    .  
    18,145,737     0    0    10,187,060         0      0          0    0    0      uint32_t prev_sz = sz;
     5,687,202     2    1             0         0      0  5,687,202    0    0      sz += size;
             .     .    .             .         .      .          .    .    .      
             .     .    .             .         .      .          .    .    .      // Handle overflow:
    24,935,924    77   30     4,520,507         0      0          0    0    0      if (sz < prev_sz)
             2     1    1             1         1      0          0    0    0          throw OutOfMemoryException();
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .      return prev_sz;
        82,552     0    0        82,552         0      0          0    0    0  }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  //=================================================================================================
             .     .    .             .         .      .          .    .    .  }
             .     .    .             .         .      .          .    .    .  
             .     .    .             .         .      .          .    .    .  #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/jshen/git/MapleLCMDiscChronoBT/sources/simp/../mtl/Heap.h
--------------------------------------------------------------------------------
Ir            I1mr   ILmr Dr            D1mr       DLmr Dw          D1mw       DLmw 

-- line 31 ----------------------------------------
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .  template<class Comp>
            .      .    .             .          .    .           .          .    .  class Heap {
            .      .    .             .          .    .           .          .    .      Comp     lt;       // The heap is a minimum-heap with respect to this comparator
            .      .    .             .          .    .           .          .    .      vec<int> heap;     // Heap of integers
            .      .    .             .          .    .           .          .    .      vec<int> indices;  // Each integers position (index) in the Heap
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .      // Index "traversal" functions
  164,018,178     19    5             0          0    0           0          0    0      static inline int left  (int i) { return i*2+1; }
  591,257,406     14    5   236,400,544 65,635,798  464           0          0    0      static inline int right (int i) { return (i+1)*2; }
  373,531,001      8    6    51,062,349          0    0           0          0    0      static inline int parent(int i) { return (i-1) >> 1; }
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .  
  102,124,698     16   10             0          0    0 102,124,698          0    0      void percolateUp(int i)
            .      .    .             .          .    .           .          .    .      {
  272,635,831      0    0   164,587,150  8,001,371   16  56,986,332          0    0          int x  = heap[i];
            .      .    .             .          .    .           .          .    .          int p  = parent(i);
            .      .    .             .          .    .           .          .    .          
1,136,788,792     20   11   380,131,551 25,015,694   13   7,867,444          0    0          while (i != 0 && lt(x, heap[p])){
   76,204,882     30    8             0          0    0  76,204,882          0    0              heap[i]          = heap[p];
   76,204,882      0    0             0          0    0  76,204,882  8,702,967    2              indices[heap[p]] = i;
            .      .    .             .          .    .           .          .    .              i                = p;
   78,608,148      0    0             0          0    0           0          0    0              p                = parent(p);
            .      .    .             .          .    .           .          .    .          }
  113,524,801      8    5    28,496,334          0    0  85,028,467          0    0          heap   [i] = x;
  119,343,916      2    2    28,501,450          0    0  85,034,193          0    0          indices[x] = i;
  199,051,957      0    0   153,187,047          0    0           0          0    0      }
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .  
  577,141,376      0    0    82,448,768          0    0 494,692,608          0    0      void percolateDown(int i)
            .      .    .             .          .    .           .          .    .      {
  264,726,951  1,013   12   172,653,831 30,785,046    0  92,061,126          0    0          int x = heap[i];
  654,796,027 13,521   18   160,102,898          0    0           0          0    0          while (left(i) < heap.size()){
  855,174,196     10    5   117,305,268  3,991,056   20           0          0    0              int child = right(i) < heap.size() && lt(heap[right(i)], heap[left(i)]) ? right(i) : left(i);
  308,187,102     26    7             0          0    0           0          0    0              if (!lt(heap[child], x)) break;
   73,937,725      0    0             0          0    0  73,937,725          0    0              heap[i]          = heap[child];
   73,948,626      0    0        10,901          0    0  73,937,725 14,295,446  132              indices[heap[i]] = i;
   56,795,757      0    0             0          0    0           0          0    0              i                = child;
            .      .    .             .          .    .           .          .    .          }
  180,126,456     30   11    90,063,533          0    0  90,062,923          0    0          heap   [i] = x;
  104,999,792      3    1     7,476,848          0    0  90,062,923          0    0          indices[x] = i;
  584,558,280      2    0   577,141,376          0    0           0          0    0      }
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .    public:
            .      .    .             .          .    .           .          .    .      Heap(const Comp& c) : lt(c) { }
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .      int  size      ()          const { return heap.size(); }
    5,467,481      1    1     5,467,481    718,354    0           0          0    0      bool empty     ()          const { return heap.size() == 0; }
2,331,448,465  1,838   38 1,199,068,866 43,039,323   14           0          0    0      bool inHeap    (int n)     const { return n < indices.size() && indices[n] >= 0; }
   13,832,410      7    3     8,559,537    474,529    1           0          0    0      int  operator[](int index) const { assert(index < heap.size()); return heap[index]; }
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .  
  256,855,406      0    0   179,490,052          0    0  51,062,349          2    0      void decrease  (int n) { assert(inHeap(n)); percolateUp  (indices[n]); }
  429,981,549      5    3   265,084,012          0    0  82,448,768          7    0      void increase  (int n) { assert(inHeap(n)); percolateDown(indices[n]); }
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .      // Safe variant of insert/decrease/increase:
            .      .    .             .          .    .           .          .    .      void update(int n)
            .      .    .             .          .    .           .          .    .      {
            .      .    .             .          .    .           .          .    .          if (!inHeap(n))
            .      .    .             .          .    .           .          .    .              insert(n);
            .      .    .             .          .    .           .          .    .          else {
            .      .    .             .          .    .           .          .    .              percolateUp(indices[n]);
       12,672      0    0         6,336          0    0           0          0    0              percolateDown(indices[n]); }
            .      .    .             .          .    .           .          .    .      }
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .      void insert(int n)
            .      .    .             .          .    .           .          .    .      {
    5,469,784      2    2             0          0    0           0          0    0          indices.growTo(n+1, -1);
            .      .    .             .          .    .           .          .    .          assert(!inHeap(n));
            .      .    .             .          .    .           .          .    .  
   10,939,568      1    1     5,469,784      1,817    0   5,469,784          0    0          indices[n] = heap.size();
        2,723      1    1             0          0    0       1,778          0    0          heap.push(n);
   10,939,568      0    0     5,469,784          0    0           0          0    0          percolateUp(indices[n]); 
            .      .    .             .          .    .           .          .    .      }
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .      int  removeMin()
            .      .    .             .          .    .           .          .    .      {
   16,402,440      1    1    10,934,960    494,803    2   5,467,480          0    0          int x            = heap[0];
   10,934,960      0    0     5,467,480  1,011,615    8   5,467,480          0    0          heap[0]          = heap.last();
   10,934,960     21   13     5,467,480    464,097    1   5,467,480  2,581,154   33          indices[heap[0]] = 0;
    5,467,480      1    1             0          0    0   5,467,480    881,149    3          indices[x]       = -1;
            .      .    .             .          .    .           .          .    .          heap.pop();
   10,934,960      0    0             0          0    0           0          0    0          if (heap.size() > 1) percolateDown(0);
            .      .    .             .          .    .           .          .    .          return x; 
            .      .    .             .          .    .           .          .    .      }
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .      // Rebuild the heap from scratch, using the elements in 'ns':
            .      .    .             .          .    .           .          .    .      void build(const vec<int>& ns) {
       48,054     18    6        24,027         10    0           0          0    0          for (int i = 0; i < heap.size(); i++)
       24,057     10    3            30         10    0      23,967      1,570  176              indices[heap[i]] = -1;
           30      0    0             0          0    0           0          0    0          heap.clear();
            .      .    .             .          .    .           .          .    .  
       48,150     10    3        24,030          0    0           0          0    0          for (int i = 0; i < ns.size(); i++){
       48,000      0    0        24,000          0    0      24,000          0    0              indices[ns[i]] = i;
            .      .    .             .          .    .           .          .    .              heap.push(ns[i]); }
            .      .    .             .          .    .           .          .    .  
       84,268     30    9        12,024          0    0          30          0    0          for (int i = heap.size() / 2 - 1; i >= 0; i--)
            .      .    .             .          .    .           .          .    .              percolateDown(i);
            .      .    .             .          .    .           .          .    .      }
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .      void clear(bool dealloc = false) 
            .      .    .             .          .    .           .          .    .      { 
            4      0    0             2          0    0           0          0    0          for (int i = 0; i < heap.size(); i++)
            .      .    .             .          .    .           .          .    .              indices[heap[i]] = -1;
            .      .    .             .          .    .           .          .    .          heap.clear(dealloc); 
            .      .    .             .          .    .           .          .    .      }
            .      .    .             .          .    .           .          .    .  };
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .  
            .      .    .             .          .    .           .          .    .  //=================================================================================================
            .      .    .             .          .    .           .          .    .  }
-- line 146 ----------------------------------------

--------------------------------------------------------------------------------
Ir              I1mr    ILmr  Dr              D1mr           DLmr    Dw             D1mw          DLmw      
--------------------------------------------------------------------------------
791,322,356,735 567,629 3,328 256,413,577,943 12,464,979,392 951,976 91,684,125,222 2,140,582,533 2,106,784  events annotated

